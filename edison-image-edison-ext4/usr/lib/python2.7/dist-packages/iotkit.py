# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
Python interface to libiotkit
"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_iotkit', [dirname(__file__)])
        except ImportError:
            import _iotkit
            return _iotkit
        if fp is not None:
            try:
                _mod = imp.load_module('_iotkit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _iotkit = swig_import_helper()
    del swig_import_helper
else:
    import _iotkit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class UpdateUserAccount(_object):
    """Proxy of C++ _UpdateUserAccount class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateUserAccount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UpdateUserAccount, name)
    __repr__ = _swig_repr
    __swig_setmethods__["new_name"] = _iotkit.UpdateUserAccount_new_name_set
    __swig_getmethods__["new_name"] = _iotkit.UpdateUserAccount_new_name_get
    if _newclass:
        new_name = _swig_property(_iotkit.UpdateUserAccount_new_name_get, _iotkit.UpdateUserAccount_new_name_set)
    __swig_setmethods__["attributes"] = _iotkit.UpdateUserAccount_attributes_set
    __swig_getmethods__["attributes"] = _iotkit.UpdateUserAccount_attributes_get
    if _newclass:
        attributes = _swig_property(_iotkit.UpdateUserAccount_attributes_get, _iotkit.UpdateUserAccount_attributes_set)
    __swig_setmethods__["healthTimePeriod"] = _iotkit.UpdateUserAccount_healthTimePeriod_set
    __swig_getmethods__["healthTimePeriod"] = _iotkit.UpdateUserAccount_healthTimePeriod_get
    if _newclass:
        healthTimePeriod = _swig_property(_iotkit.UpdateUserAccount_healthTimePeriod_get, _iotkit.UpdateUserAccount_healthTimePeriod_set)
    __swig_setmethods__["exec_interval"] = _iotkit.UpdateUserAccount_exec_interval_set
    __swig_getmethods__["exec_interval"] = _iotkit.UpdateUserAccount_exec_interval_get
    if _newclass:
        exec_interval = _swig_property(_iotkit.UpdateUserAccount_exec_interval_get, _iotkit.UpdateUserAccount_exec_interval_set)
    __swig_setmethods__["base_line_exec_interval"] = _iotkit.UpdateUserAccount_base_line_exec_interval_set
    __swig_getmethods__["base_line_exec_interval"] = _iotkit.UpdateUserAccount_base_line_exec_interval_get
    if _newclass:
        base_line_exec_interval = _swig_property(_iotkit.UpdateUserAccount_base_line_exec_interval_get, _iotkit.UpdateUserAccount_base_line_exec_interval_set)
    __swig_setmethods__["cd_model_frequency"] = _iotkit.UpdateUserAccount_cd_model_frequency_set
    __swig_getmethods__["cd_model_frequency"] = _iotkit.UpdateUserAccount_cd_model_frequency_get
    if _newclass:
        cd_model_frequency = _swig_property(_iotkit.UpdateUserAccount_cd_model_frequency_get, _iotkit.UpdateUserAccount_cd_model_frequency_set)
    __swig_setmethods__["cd_execution_frequency"] = _iotkit.UpdateUserAccount_cd_execution_frequency_set
    __swig_getmethods__["cd_execution_frequency"] = _iotkit.UpdateUserAccount_cd_execution_frequency_get
    if _newclass:
        cd_execution_frequency = _swig_property(_iotkit.UpdateUserAccount_cd_execution_frequency_get, _iotkit.UpdateUserAccount_cd_execution_frequency_set)
    __swig_setmethods__["data_retention"] = _iotkit.UpdateUserAccount_data_retention_set
    __swig_getmethods__["data_retention"] = _iotkit.UpdateUserAccount_data_retention_get
    if _newclass:
        data_retention = _swig_property(_iotkit.UpdateUserAccount_data_retention_get, _iotkit.UpdateUserAccount_data_retention_set)

    def __init__(self):
        """__init__(_UpdateUserAccount self) -> UpdateUserAccount"""
        this = _iotkit.new_UpdateUserAccount()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_UpdateUserAccount
    __del__ = lambda self: None
UpdateUserAccount_swigregister = _iotkit.UpdateUserAccount_swigregister
UpdateUserAccount_swigregister(UpdateUserAccount)


def createAnAccount(account_name):
    """
    createAnAccount(char * account_name) -> char *

    Parameters:
        account_name: char *

    """
    return _iotkit.createAnAccount(account_name)

def getAccountInformation():
    """getAccountInformation() -> char *"""
    return _iotkit.getAccountInformation()

def getAccountActivationCode():
    """getAccountActivationCode() -> char *"""
    return _iotkit.getAccountActivationCode()

def renewActivationCode():
    """renewActivationCode() -> char *"""
    return _iotkit.renewActivationCode()

def updateAnAccount(updateUserAccount):
    """
    updateAnAccount(UpdateUserAccount updateUserAccount) -> char *

    Parameters:
        updateUserAccount: UpdateUserAccount *

    """
    return _iotkit.updateAnAccount(updateUserAccount)

def deleteAnAccount():
    """deleteAnAccount() -> char *"""
    return _iotkit.deleteAnAccount()

def getUserAssociatedWithAccount():
    """getUserAssociatedWithAccount() -> char *"""
    return _iotkit.getUserAssociatedWithAccount()

def addAnUserToAccount(account_id, user_id, isAdmin):
    """
    addAnUserToAccount(char * account_id, char * user_id, bool isAdmin) -> char *

    Parameters:
        account_id: char *
        user_id: char *
        isAdmin: bool

    """
    return _iotkit.addAnUserToAccount(account_id, user_id, isAdmin)

def createUpdateUserAccountObject(new_name):
    """
    createUpdateUserAccountObject(char * new_name) -> UpdateUserAccount

    Parameters:
        new_name: char *

    """
    return _iotkit.createUpdateUserAccountObject(new_name)

def setUpdateAccountAttributes(updateUserAccount, attributes):
    """
    setUpdateAccountAttributes(UpdateUserAccount updateUserAccount, KeyValueParams attributes)

    Parameters:
        updateUserAccount: UpdateUserAccount *
        attributes: KeyValueParams *

    """
    return _iotkit.setUpdateAccountAttributes(updateUserAccount, attributes)

def setUpdateAccountHealthTimePeriod(updateUserAccount, healthTimePeriod):
    """
    setUpdateAccountHealthTimePeriod(UpdateUserAccount updateUserAccount, int healthTimePeriod)

    Parameters:
        updateUserAccount: UpdateUserAccount *
        healthTimePeriod: int

    """
    return _iotkit.setUpdateAccountHealthTimePeriod(updateUserAccount, healthTimePeriod)

def setUpdateAccountExecInterval(updateUserAccount, exec_interval):
    """
    setUpdateAccountExecInterval(UpdateUserAccount updateUserAccount, int exec_interval)

    Parameters:
        updateUserAccount: UpdateUserAccount *
        exec_interval: int

    """
    return _iotkit.setUpdateAccountExecInterval(updateUserAccount, exec_interval)

def setUpdateAccountBaseLineExecInterval(updateUserAccount, base_line_exec_interval):
    """
    setUpdateAccountBaseLineExecInterval(UpdateUserAccount updateUserAccount, int base_line_exec_interval)

    Parameters:
        updateUserAccount: UpdateUserAccount *
        base_line_exec_interval: int

    """
    return _iotkit.setUpdateAccountBaseLineExecInterval(updateUserAccount, base_line_exec_interval)

def setUpdateAccountCdModelFrequency(updateUserAccount, cd_model_frequency):
    """
    setUpdateAccountCdModelFrequency(UpdateUserAccount updateUserAccount, int cd_model_frequency)

    Parameters:
        updateUserAccount: UpdateUserAccount *
        cd_model_frequency: int

    """
    return _iotkit.setUpdateAccountCdModelFrequency(updateUserAccount, cd_model_frequency)

def setUpdateAccountCdExecutionFrequency(updateUserAccount, cd_execution_frequency):
    """
    setUpdateAccountCdExecutionFrequency(UpdateUserAccount updateUserAccount, int cd_execution_frequency)

    Parameters:
        updateUserAccount: UpdateUserAccount *
        cd_execution_frequency: int

    """
    return _iotkit.setUpdateAccountCdExecutionFrequency(updateUserAccount, cd_execution_frequency)

def setUpdateAccountDataRetention(updateUserAccount, data_retention):
    """
    setUpdateAccountDataRetention(UpdateUserAccount updateUserAccount, int data_retention)

    Parameters:
        updateUserAccount: UpdateUserAccount *
        data_retention: int

    """
    return _iotkit.setUpdateAccountDataRetention(updateUserAccount, data_retention)
class AdvancedDataInquiry(_object):
    """Proxy of C++ _AdvancedDataInquiry class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedDataInquiry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedDataInquiry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gatewayIds"] = _iotkit.AdvancedDataInquiry_gatewayIds_set
    __swig_getmethods__["gatewayIds"] = _iotkit.AdvancedDataInquiry_gatewayIds_get
    if _newclass:
        gatewayIds = _swig_property(_iotkit.AdvancedDataInquiry_gatewayIds_get, _iotkit.AdvancedDataInquiry_gatewayIds_set)
    __swig_setmethods__["deviceIds"] = _iotkit.AdvancedDataInquiry_deviceIds_set
    __swig_getmethods__["deviceIds"] = _iotkit.AdvancedDataInquiry_deviceIds_get
    if _newclass:
        deviceIds = _swig_property(_iotkit.AdvancedDataInquiry_deviceIds_get, _iotkit.AdvancedDataInquiry_deviceIds_set)
    __swig_setmethods__["componentIds"] = _iotkit.AdvancedDataInquiry_componentIds_set
    __swig_getmethods__["componentIds"] = _iotkit.AdvancedDataInquiry_componentIds_get
    if _newclass:
        componentIds = _swig_property(_iotkit.AdvancedDataInquiry_componentIds_get, _iotkit.AdvancedDataInquiry_componentIds_set)
    __swig_setmethods__["startTimestamp"] = _iotkit.AdvancedDataInquiry_startTimestamp_set
    __swig_getmethods__["startTimestamp"] = _iotkit.AdvancedDataInquiry_startTimestamp_get
    if _newclass:
        startTimestamp = _swig_property(_iotkit.AdvancedDataInquiry_startTimestamp_get, _iotkit.AdvancedDataInquiry_startTimestamp_set)
    __swig_setmethods__["endTimestamp"] = _iotkit.AdvancedDataInquiry_endTimestamp_set
    __swig_getmethods__["endTimestamp"] = _iotkit.AdvancedDataInquiry_endTimestamp_get
    if _newclass:
        endTimestamp = _swig_property(_iotkit.AdvancedDataInquiry_endTimestamp_get, _iotkit.AdvancedDataInquiry_endTimestamp_set)
    __swig_setmethods__["returnedMeasureAttributes"] = _iotkit.AdvancedDataInquiry_returnedMeasureAttributes_set
    __swig_getmethods__["returnedMeasureAttributes"] = _iotkit.AdvancedDataInquiry_returnedMeasureAttributes_get
    if _newclass:
        returnedMeasureAttributes = _swig_property(_iotkit.AdvancedDataInquiry_returnedMeasureAttributes_get, _iotkit.AdvancedDataInquiry_returnedMeasureAttributes_set)
    __swig_setmethods__["showMeasureLocation"] = _iotkit.AdvancedDataInquiry_showMeasureLocation_set
    __swig_getmethods__["showMeasureLocation"] = _iotkit.AdvancedDataInquiry_showMeasureLocation_get
    if _newclass:
        showMeasureLocation = _swig_property(_iotkit.AdvancedDataInquiry_showMeasureLocation_get, _iotkit.AdvancedDataInquiry_showMeasureLocation_set)
    __swig_setmethods__["devCompAttributeFilter"] = _iotkit.AdvancedDataInquiry_devCompAttributeFilter_set
    __swig_getmethods__["devCompAttributeFilter"] = _iotkit.AdvancedDataInquiry_devCompAttributeFilter_get
    if _newclass:
        devCompAttributeFilter = _swig_property(_iotkit.AdvancedDataInquiry_devCompAttributeFilter_get, _iotkit.AdvancedDataInquiry_devCompAttributeFilter_set)
    __swig_setmethods__["measurementAttributeFilter"] = _iotkit.AdvancedDataInquiry_measurementAttributeFilter_set
    __swig_getmethods__["measurementAttributeFilter"] = _iotkit.AdvancedDataInquiry_measurementAttributeFilter_get
    if _newclass:
        measurementAttributeFilter = _swig_property(_iotkit.AdvancedDataInquiry_measurementAttributeFilter_get, _iotkit.AdvancedDataInquiry_measurementAttributeFilter_set)
    __swig_setmethods__["valueFilter"] = _iotkit.AdvancedDataInquiry_valueFilter_set
    __swig_getmethods__["valueFilter"] = _iotkit.AdvancedDataInquiry_valueFilter_get
    if _newclass:
        valueFilter = _swig_property(_iotkit.AdvancedDataInquiry_valueFilter_get, _iotkit.AdvancedDataInquiry_valueFilter_set)
    __swig_setmethods__["componentRowLimit"] = _iotkit.AdvancedDataInquiry_componentRowLimit_set
    __swig_getmethods__["componentRowLimit"] = _iotkit.AdvancedDataInquiry_componentRowLimit_get
    if _newclass:
        componentRowLimit = _swig_property(_iotkit.AdvancedDataInquiry_componentRowLimit_get, _iotkit.AdvancedDataInquiry_componentRowLimit_set)
    __swig_setmethods__["countOnly"] = _iotkit.AdvancedDataInquiry_countOnly_set
    __swig_getmethods__["countOnly"] = _iotkit.AdvancedDataInquiry_countOnly_get
    if _newclass:
        countOnly = _swig_property(_iotkit.AdvancedDataInquiry_countOnly_get, _iotkit.AdvancedDataInquiry_countOnly_set)
    __swig_setmethods__["sort"] = _iotkit.AdvancedDataInquiry_sort_set
    __swig_getmethods__["sort"] = _iotkit.AdvancedDataInquiry_sort_get
    if _newclass:
        sort = _swig_property(_iotkit.AdvancedDataInquiry_sort_get, _iotkit.AdvancedDataInquiry_sort_set)

    def __init__(self):
        """__init__(_AdvancedDataInquiry self) -> AdvancedDataInquiry"""
        this = _iotkit.new_AdvancedDataInquiry()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_AdvancedDataInquiry
    __del__ = lambda self: None
AdvancedDataInquiry_swigregister = _iotkit.AdvancedDataInquiry_swigregister
AdvancedDataInquiry_swigregister(AdvancedDataInquiry)


def createAdvancedDataInquiryObject():
    """createAdvancedDataInquiryObject() -> AdvancedDataInquiry"""
    return _iotkit.createAdvancedDataInquiryObject()

def addGatewayIds(advancedDataInquiryObject, gatewayId):
    """
    addGatewayIds(AdvancedDataInquiry advancedDataInquiryObject, char * gatewayId) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        gatewayId: char *

    """
    return _iotkit.addGatewayIds(advancedDataInquiryObject, gatewayId)

def addDeviceIds(advancedDataInquiryObject, deviceId):
    """
    addDeviceIds(AdvancedDataInquiry advancedDataInquiryObject, char * deviceId) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        deviceId: char *

    """
    return _iotkit.addDeviceIds(advancedDataInquiryObject, deviceId)

def addComponentIds(advancedDataInquiryObject, componentId):
    """
    addComponentIds(AdvancedDataInquiry advancedDataInquiryObject, char * componentId) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        componentId: char *

    """
    return _iotkit.addComponentIds(advancedDataInquiryObject, componentId)

def setStartTimestamp(advancedDataInquiryObject, startTimestamp):
    """
    setStartTimestamp(AdvancedDataInquiry advancedDataInquiryObject, long startTimestamp) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        startTimestamp: long

    """
    return _iotkit.setStartTimestamp(advancedDataInquiryObject, startTimestamp)

def setEndTimestamp(advancedDataInquiryObject, endTimestamp):
    """
    setEndTimestamp(AdvancedDataInquiry advancedDataInquiryObject, long endTimestamp) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        endTimestamp: long

    """
    return _iotkit.setEndTimestamp(advancedDataInquiryObject, endTimestamp)

def addReturnedMeasureAttributes(advancedDataInquiryObject, attribute):
    """
    addReturnedMeasureAttributes(AdvancedDataInquiry advancedDataInquiryObject, char * attribute) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        attribute: char *

    """
    return _iotkit.addReturnedMeasureAttributes(advancedDataInquiryObject, attribute)

def setShowMeasureLocation(advancedDataInquiryObject, measureLocation):
    """
    setShowMeasureLocation(AdvancedDataInquiry advancedDataInquiryObject, bool measureLocation) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        measureLocation: bool

    """
    return _iotkit.setShowMeasureLocation(advancedDataInquiryObject, measureLocation)

def createAttributeFilterObject(filterName):
    """
    createAttributeFilterObject(char * filterName) -> AttributeFilter

    Parameters:
        filterName: char *

    """
    return _iotkit.createAttributeFilterObject(filterName)

def addAttributeFilterValues(attributeFilter, filterValue):
    """
    addAttributeFilterValues(AttributeFilter attributeFilter, char * filterValue) -> AttributeFilter

    Parameters:
        attributeFilter: AttributeFilter *
        filterValue: char *

    """
    return _iotkit.addAttributeFilterValues(attributeFilter, filterValue)

def addDevCompAttributeFilter(advancedDataInquiryObject, attributeFilter):
    """
    addDevCompAttributeFilter(AdvancedDataInquiry advancedDataInquiryObject, AttributeFilter attributeFilter) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        attributeFilter: AttributeFilter *

    """
    return _iotkit.addDevCompAttributeFilter(advancedDataInquiryObject, attributeFilter)

def addMeasurementAttributeFilter(advancedDataInquiryObject, attributeFilter):
    """
    addMeasurementAttributeFilter(AdvancedDataInquiry advancedDataInquiryObject, AttributeFilter attributeFilter) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        attributeFilter: AttributeFilter *

    """
    return _iotkit.addMeasurementAttributeFilter(advancedDataInquiryObject, attributeFilter)

def addValueFilter(advancedDataInquiryObject, attributeFilter):
    """
    addValueFilter(AdvancedDataInquiry advancedDataInquiryObject, AttributeFilter attributeFilter) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        attributeFilter: AttributeFilter *

    """
    return _iotkit.addValueFilter(advancedDataInquiryObject, attributeFilter)

def setComponentRowLimit(advancedDataInquiryObject, componentRowLimit):
    """
    setComponentRowLimit(AdvancedDataInquiry advancedDataInquiryObject, int componentRowLimit) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        componentRowLimit: int

    """
    return _iotkit.setComponentRowLimit(advancedDataInquiryObject, componentRowLimit)

def setCountOnly(advancedDataInquiryObject, countOnly):
    """
    setCountOnly(AdvancedDataInquiry advancedDataInquiryObject, bool countOnly) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        countOnly: bool

    """
    return _iotkit.setCountOnly(advancedDataInquiryObject, countOnly)

def addSortInfo(advancedDataInquiryObject, name, value):
    """
    addSortInfo(AdvancedDataInquiry advancedDataInquiryObject, char * name, char * value) -> AdvancedDataInquiry

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *
        name: char *
        value: char *

    """
    return _iotkit.addSortInfo(advancedDataInquiryObject, name, value)

def advancedDataInquiry(advancedDataInquiryObject):
    """
    advancedDataInquiry(AdvancedDataInquiry advancedDataInquiryObject) -> char *

    Parameters:
        advancedDataInquiryObject: AdvancedDataInquiry *

    """
    return _iotkit.advancedDataInquiry(advancedDataInquiryObject)
class AggregatedReportInterface(_object):
    """Proxy of C++ _AggregatedReportInterface class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregatedReportInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AggregatedReportInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startTimestamp"] = _iotkit.AggregatedReportInterface_startTimestamp_set
    __swig_getmethods__["startTimestamp"] = _iotkit.AggregatedReportInterface_startTimestamp_get
    if _newclass:
        startTimestamp = _swig_property(_iotkit.AggregatedReportInterface_startTimestamp_get, _iotkit.AggregatedReportInterface_startTimestamp_set)
    __swig_setmethods__["endTimestamp"] = _iotkit.AggregatedReportInterface_endTimestamp_set
    __swig_getmethods__["endTimestamp"] = _iotkit.AggregatedReportInterface_endTimestamp_get
    if _newclass:
        endTimestamp = _swig_property(_iotkit.AggregatedReportInterface_endTimestamp_get, _iotkit.AggregatedReportInterface_endTimestamp_set)
    __swig_setmethods__["aggregationMethods"] = _iotkit.AggregatedReportInterface_aggregationMethods_set
    __swig_getmethods__["aggregationMethods"] = _iotkit.AggregatedReportInterface_aggregationMethods_get
    if _newclass:
        aggregationMethods = _swig_property(_iotkit.AggregatedReportInterface_aggregationMethods_get, _iotkit.AggregatedReportInterface_aggregationMethods_set)
    __swig_setmethods__["dimensions"] = _iotkit.AggregatedReportInterface_dimensions_set
    __swig_getmethods__["dimensions"] = _iotkit.AggregatedReportInterface_dimensions_get
    if _newclass:
        dimensions = _swig_property(_iotkit.AggregatedReportInterface_dimensions_get, _iotkit.AggregatedReportInterface_dimensions_set)
    __swig_setmethods__["offset"] = _iotkit.AggregatedReportInterface_offset_set
    __swig_getmethods__["offset"] = _iotkit.AggregatedReportInterface_offset_get
    if _newclass:
        offset = _swig_property(_iotkit.AggregatedReportInterface_offset_get, _iotkit.AggregatedReportInterface_offset_set)
    __swig_setmethods__["limit"] = _iotkit.AggregatedReportInterface_limit_set
    __swig_getmethods__["limit"] = _iotkit.AggregatedReportInterface_limit_get
    if _newclass:
        limit = _swig_property(_iotkit.AggregatedReportInterface_limit_get, _iotkit.AggregatedReportInterface_limit_set)
    __swig_setmethods__["countOnly"] = _iotkit.AggregatedReportInterface_countOnly_set
    __swig_getmethods__["countOnly"] = _iotkit.AggregatedReportInterface_countOnly_get
    if _newclass:
        countOnly = _swig_property(_iotkit.AggregatedReportInterface_countOnly_get, _iotkit.AggregatedReportInterface_countOnly_set)
    __swig_setmethods__["outputType"] = _iotkit.AggregatedReportInterface_outputType_set
    __swig_getmethods__["outputType"] = _iotkit.AggregatedReportInterface_outputType_get
    if _newclass:
        outputType = _swig_property(_iotkit.AggregatedReportInterface_outputType_get, _iotkit.AggregatedReportInterface_outputType_set)
    __swig_setmethods__["gatewayIds"] = _iotkit.AggregatedReportInterface_gatewayIds_set
    __swig_getmethods__["gatewayIds"] = _iotkit.AggregatedReportInterface_gatewayIds_get
    if _newclass:
        gatewayIds = _swig_property(_iotkit.AggregatedReportInterface_gatewayIds_get, _iotkit.AggregatedReportInterface_gatewayIds_set)
    __swig_setmethods__["deviceIds"] = _iotkit.AggregatedReportInterface_deviceIds_set
    __swig_getmethods__["deviceIds"] = _iotkit.AggregatedReportInterface_deviceIds_get
    if _newclass:
        deviceIds = _swig_property(_iotkit.AggregatedReportInterface_deviceIds_get, _iotkit.AggregatedReportInterface_deviceIds_set)
    __swig_setmethods__["componentIds"] = _iotkit.AggregatedReportInterface_componentIds_set
    __swig_getmethods__["componentIds"] = _iotkit.AggregatedReportInterface_componentIds_get
    if _newclass:
        componentIds = _swig_property(_iotkit.AggregatedReportInterface_componentIds_get, _iotkit.AggregatedReportInterface_componentIds_set)
    __swig_setmethods__["sort"] = _iotkit.AggregatedReportInterface_sort_set
    __swig_getmethods__["sort"] = _iotkit.AggregatedReportInterface_sort_get
    if _newclass:
        sort = _swig_property(_iotkit.AggregatedReportInterface_sort_get, _iotkit.AggregatedReportInterface_sort_set)
    __swig_setmethods__["filters"] = _iotkit.AggregatedReportInterface_filters_set
    __swig_getmethods__["filters"] = _iotkit.AggregatedReportInterface_filters_get
    if _newclass:
        filters = _swig_property(_iotkit.AggregatedReportInterface_filters_get, _iotkit.AggregatedReportInterface_filters_set)

    def __init__(self):
        """__init__(_AggregatedReportInterface self) -> AggregatedReportInterface"""
        this = _iotkit.new_AggregatedReportInterface()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_AggregatedReportInterface
    __del__ = lambda self: None
AggregatedReportInterface_swigregister = _iotkit.AggregatedReportInterface_swigregister
AggregatedReportInterface_swigregister(AggregatedReportInterface)


def createAggregatedReportInterface():
    """createAggregatedReportInterface() -> AggregatedReportInterface"""
    return _iotkit.createAggregatedReportInterface()

def setReportStartTimestamp(aggregatedReportInterfaceObject, startTimestamp):
    """
    setReportStartTimestamp(AggregatedReportInterface aggregatedReportInterfaceObject, long startTimestamp) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        startTimestamp: long

    """
    return _iotkit.setReportStartTimestamp(aggregatedReportInterfaceObject, startTimestamp)

def setReportEndTimestamp(aggregatedReportInterfaceObject, endTimestamp):
    """
    setReportEndTimestamp(AggregatedReportInterface aggregatedReportInterfaceObject, long endTimestamp) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        endTimestamp: long

    """
    return _iotkit.setReportEndTimestamp(aggregatedReportInterfaceObject, endTimestamp)

def addAggregationMethods(aggregatedReportInterfaceObject, aggregation):
    """
    addAggregationMethods(AggregatedReportInterface aggregatedReportInterfaceObject, char * aggregation) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        aggregation: char *

    """
    return _iotkit.addAggregationMethods(aggregatedReportInterfaceObject, aggregation)

def addDimensions(aggregatedReportInterfaceObject, dimension):
    """
    addDimensions(AggregatedReportInterface aggregatedReportInterfaceObject, char * dimension) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        dimension: char *

    """
    return _iotkit.addDimensions(aggregatedReportInterfaceObject, dimension)

def setOffset(aggregatedReportInterfaceObject, offset):
    """
    setOffset(AggregatedReportInterface aggregatedReportInterfaceObject, int offset) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        offset: int

    """
    return _iotkit.setOffset(aggregatedReportInterfaceObject, offset)

def setLimit(aggregatedReportInterfaceObject, limit):
    """
    setLimit(AggregatedReportInterface aggregatedReportInterfaceObject, int limit) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        limit: int

    """
    return _iotkit.setLimit(aggregatedReportInterfaceObject, limit)

def setReportCountOnly(aggregatedReportInterfaceObject, countOnly):
    """
    setReportCountOnly(AggregatedReportInterface aggregatedReportInterfaceObject, bool countOnly) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        countOnly: bool

    """
    return _iotkit.setReportCountOnly(aggregatedReportInterfaceObject, countOnly)

def setOutputType(aggregatedReportInterfaceObject, outputType):
    """
    setOutputType(AggregatedReportInterface aggregatedReportInterfaceObject, char * outputType) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        outputType: char *

    """
    return _iotkit.setOutputType(aggregatedReportInterfaceObject, outputType)

def addReportDeviceIds(aggregatedReportInterfaceObject, deviceId):
    """
    addReportDeviceIds(AggregatedReportInterface aggregatedReportInterfaceObject, char * deviceId) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        deviceId: char *

    """
    return _iotkit.addReportDeviceIds(aggregatedReportInterfaceObject, deviceId)

def addReportGatewayIds(aggregatedReportInterfaceObject, gatewayId):
    """
    addReportGatewayIds(AggregatedReportInterface aggregatedReportInterfaceObject, char * gatewayId) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        gatewayId: char *

    """
    return _iotkit.addReportGatewayIds(aggregatedReportInterfaceObject, gatewayId)

def addReportComponentIds(aggregatedReportInterfaceObject, componentId):
    """
    addReportComponentIds(AggregatedReportInterface aggregatedReportInterfaceObject, char * componentId) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        componentId: char *

    """
    return _iotkit.addReportComponentIds(aggregatedReportInterfaceObject, componentId)

def addReportSortInfo(aggregatedReportInterfaceObject, name, value):
    """
    addReportSortInfo(AggregatedReportInterface aggregatedReportInterfaceObject, char * name, char * value) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        name: char *
        value: char *

    """
    return _iotkit.addReportSortInfo(aggregatedReportInterfaceObject, name, value)

def addFilters(aggregatedReportInterfaceObject, attributeFilter):
    """
    addFilters(AggregatedReportInterface aggregatedReportInterfaceObject, AttributeFilter attributeFilter) -> AggregatedReportInterface

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *
        attributeFilter: AttributeFilter *

    """
    return _iotkit.addFilters(aggregatedReportInterfaceObject, attributeFilter)

def aggregatedReportInterface(aggregatedReportInterfaceObject):
    """
    aggregatedReportInterface(AggregatedReportInterface aggregatedReportInterfaceObject) -> char *

    Parameters:
        aggregatedReportInterfaceObject: AggregatedReportInterface *

    """
    return _iotkit.aggregatedReportInterface(aggregatedReportInterfaceObject)
class ConditionCmpsValuePoints(_object):
    """Proxy of C++ _ConditionCmpsValuePoints class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionCmpsValuePoints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionCmpsValuePoints, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _iotkit.ConditionCmpsValuePoints_timestamp_set
    __swig_getmethods__["timestamp"] = _iotkit.ConditionCmpsValuePoints_timestamp_get
    if _newclass:
        timestamp = _swig_property(_iotkit.ConditionCmpsValuePoints_timestamp_get, _iotkit.ConditionCmpsValuePoints_timestamp_set)
    __swig_setmethods__["value"] = _iotkit.ConditionCmpsValuePoints_value_set
    __swig_getmethods__["value"] = _iotkit.ConditionCmpsValuePoints_value_get
    if _newclass:
        value = _swig_property(_iotkit.ConditionCmpsValuePoints_value_get, _iotkit.ConditionCmpsValuePoints_value_set)

    def __init__(self):
        """__init__(_ConditionCmpsValuePoints self) -> ConditionCmpsValuePoints"""
        this = _iotkit.new_ConditionCmpsValuePoints()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_ConditionCmpsValuePoints
    __del__ = lambda self: None
ConditionCmpsValuePoints_swigregister = _iotkit.ConditionCmpsValuePoints_swigregister
ConditionCmpsValuePoints_swigregister(ConditionCmpsValuePoints)

class CreateNewAlertDataConditionCmpsValuePoints(_object):
    """Proxy of C++ _CreateNewAlertDataConditionCmpsValuePoints class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlertDataConditionCmpsValuePoints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlertDataConditionCmpsValuePoints, name)
    __repr__ = _swig_repr
    __swig_setmethods__["valuePoint"] = _iotkit.CreateNewAlertDataConditionCmpsValuePoints_valuePoint_set
    __swig_getmethods__["valuePoint"] = _iotkit.CreateNewAlertDataConditionCmpsValuePoints_valuePoint_get
    if _newclass:
        valuePoint = _swig_property(_iotkit.CreateNewAlertDataConditionCmpsValuePoints_valuePoint_get, _iotkit.CreateNewAlertDataConditionCmpsValuePoints_valuePoint_set)
    __swig_setmethods__["next"] = _iotkit.CreateNewAlertDataConditionCmpsValuePoints_next_set
    __swig_getmethods__["next"] = _iotkit.CreateNewAlertDataConditionCmpsValuePoints_next_get
    if _newclass:
        next = _swig_property(_iotkit.CreateNewAlertDataConditionCmpsValuePoints_next_get, _iotkit.CreateNewAlertDataConditionCmpsValuePoints_next_set)

    def __init__(self):
        """__init__(_CreateNewAlertDataConditionCmpsValuePoints self) -> CreateNewAlertDataConditionCmpsValuePoints"""
        this = _iotkit.new_CreateNewAlertDataConditionCmpsValuePoints()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlertDataConditionCmpsValuePoints
    __del__ = lambda self: None
CreateNewAlertDataConditionCmpsValuePoints_swigregister = _iotkit.CreateNewAlertDataConditionCmpsValuePoints_swigregister
CreateNewAlertDataConditionCmpsValuePoints_swigregister(CreateNewAlertDataConditionCmpsValuePoints)

class CreateNewAlertDataConditionCmps(_object):
    """Proxy of C++ _CreateNewAlertDataConditionCmps class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlertDataConditionCmps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlertDataConditionCmps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmp_componentId"] = _iotkit.CreateNewAlertDataConditionCmps_cmp_componentId_set
    __swig_getmethods__["cmp_componentId"] = _iotkit.CreateNewAlertDataConditionCmps_cmp_componentId_get
    if _newclass:
        cmp_componentId = _swig_property(_iotkit.CreateNewAlertDataConditionCmps_cmp_componentId_get, _iotkit.CreateNewAlertDataConditionCmps_cmp_componentId_set)
    __swig_setmethods__["cmp_dataType"] = _iotkit.CreateNewAlertDataConditionCmps_cmp_dataType_set
    __swig_getmethods__["cmp_dataType"] = _iotkit.CreateNewAlertDataConditionCmps_cmp_dataType_get
    if _newclass:
        cmp_dataType = _swig_property(_iotkit.CreateNewAlertDataConditionCmps_cmp_dataType_get, _iotkit.CreateNewAlertDataConditionCmps_cmp_dataType_set)
    __swig_setmethods__["cmp_componentName"] = _iotkit.CreateNewAlertDataConditionCmps_cmp_componentName_set
    __swig_getmethods__["cmp_componentName"] = _iotkit.CreateNewAlertDataConditionCmps_cmp_componentName_get
    if _newclass:
        cmp_componentName = _swig_property(_iotkit.CreateNewAlertDataConditionCmps_cmp_componentName_get, _iotkit.CreateNewAlertDataConditionCmps_cmp_componentName_set)
    __swig_setmethods__["valuePoints"] = _iotkit.CreateNewAlertDataConditionCmps_valuePoints_set
    __swig_getmethods__["valuePoints"] = _iotkit.CreateNewAlertDataConditionCmps_valuePoints_get
    if _newclass:
        valuePoints = _swig_property(_iotkit.CreateNewAlertDataConditionCmps_valuePoints_get, _iotkit.CreateNewAlertDataConditionCmps_valuePoints_set)

    def __init__(self):
        """__init__(_CreateNewAlertDataConditionCmps self) -> CreateNewAlertDataConditionCmps"""
        this = _iotkit.new_CreateNewAlertDataConditionCmps()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlertDataConditionCmps
    __del__ = lambda self: None
CreateNewAlertDataConditionCmps_swigregister = _iotkit.CreateNewAlertDataConditionCmps_swigregister
CreateNewAlertDataConditionCmps_swigregister(CreateNewAlertDataConditionCmps)

class CreateNewAlertDataConditionCmpsList(_object):
    """Proxy of C++ _CreateNewAlertDataConditionCmpsList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlertDataConditionCmpsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlertDataConditionCmpsList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["component"] = _iotkit.CreateNewAlertDataConditionCmpsList_component_set
    __swig_getmethods__["component"] = _iotkit.CreateNewAlertDataConditionCmpsList_component_get
    if _newclass:
        component = _swig_property(_iotkit.CreateNewAlertDataConditionCmpsList_component_get, _iotkit.CreateNewAlertDataConditionCmpsList_component_set)
    __swig_setmethods__["next"] = _iotkit.CreateNewAlertDataConditionCmpsList_next_set
    __swig_getmethods__["next"] = _iotkit.CreateNewAlertDataConditionCmpsList_next_get
    if _newclass:
        next = _swig_property(_iotkit.CreateNewAlertDataConditionCmpsList_next_get, _iotkit.CreateNewAlertDataConditionCmpsList_next_set)

    def __init__(self):
        """__init__(_CreateNewAlertDataConditionCmpsList self) -> CreateNewAlertDataConditionCmpsList"""
        this = _iotkit.new_CreateNewAlertDataConditionCmpsList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlertDataConditionCmpsList
    __del__ = lambda self: None
CreateNewAlertDataConditionCmpsList_swigregister = _iotkit.CreateNewAlertDataConditionCmpsList_swigregister
CreateNewAlertDataConditionCmpsList_swigregister(CreateNewAlertDataConditionCmpsList)

class CreateNewAlertDataConditions(_object):
    """Proxy of C++ _CreateNewAlertDataConditions class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlertDataConditions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlertDataConditions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c_conditionSequence"] = _iotkit.CreateNewAlertDataConditions_c_conditionSequence_set
    __swig_getmethods__["c_conditionSequence"] = _iotkit.CreateNewAlertDataConditions_c_conditionSequence_get
    if _newclass:
        c_conditionSequence = _swig_property(_iotkit.CreateNewAlertDataConditions_c_conditionSequence_get, _iotkit.CreateNewAlertDataConditions_c_conditionSequence_set)
    __swig_setmethods__["c_naturalLangCondition"] = _iotkit.CreateNewAlertDataConditions_c_naturalLangCondition_set
    __swig_getmethods__["c_naturalLangCondition"] = _iotkit.CreateNewAlertDataConditions_c_naturalLangCondition_get
    if _newclass:
        c_naturalLangCondition = _swig_property(_iotkit.CreateNewAlertDataConditions_c_naturalLangCondition_get, _iotkit.CreateNewAlertDataConditions_c_naturalLangCondition_set)
    __swig_setmethods__["components"] = _iotkit.CreateNewAlertDataConditions_components_set
    __swig_getmethods__["components"] = _iotkit.CreateNewAlertDataConditions_components_get
    if _newclass:
        components = _swig_property(_iotkit.CreateNewAlertDataConditions_components_get, _iotkit.CreateNewAlertDataConditions_components_set)

    def __init__(self):
        """__init__(_CreateNewAlertDataConditions self) -> CreateNewAlertDataConditions"""
        this = _iotkit.new_CreateNewAlertDataConditions()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlertDataConditions
    __del__ = lambda self: None
CreateNewAlertDataConditions_swigregister = _iotkit.CreateNewAlertDataConditions_swigregister
CreateNewAlertDataConditions_swigregister(CreateNewAlertDataConditions)

class CreateNewAlertDataConditionsList(_object):
    """Proxy of C++ _CreateNewAlertDataConditionsList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlertDataConditionsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlertDataConditionsList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["condition"] = _iotkit.CreateNewAlertDataConditionsList_condition_set
    __swig_getmethods__["condition"] = _iotkit.CreateNewAlertDataConditionsList_condition_get
    if _newclass:
        condition = _swig_property(_iotkit.CreateNewAlertDataConditionsList_condition_get, _iotkit.CreateNewAlertDataConditionsList_condition_set)
    __swig_setmethods__["next"] = _iotkit.CreateNewAlertDataConditionsList_next_set
    __swig_getmethods__["next"] = _iotkit.CreateNewAlertDataConditionsList_next_get
    if _newclass:
        next = _swig_property(_iotkit.CreateNewAlertDataConditionsList_next_get, _iotkit.CreateNewAlertDataConditionsList_next_set)

    def __init__(self):
        """__init__(_CreateNewAlertDataConditionsList self) -> CreateNewAlertDataConditionsList"""
        this = _iotkit.new_CreateNewAlertDataConditionsList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlertDataConditionsList
    __del__ = lambda self: None
CreateNewAlertDataConditionsList_swigregister = _iotkit.CreateNewAlertDataConditionsList_swigregister
CreateNewAlertDataConditionsList_swigregister(CreateNewAlertDataConditionsList)

class CreateNewAlertData(_object):
    """Proxy of C++ _CreateNewAlertData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlertData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlertData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accountId"] = _iotkit.CreateNewAlertData_accountId_set
    __swig_getmethods__["accountId"] = _iotkit.CreateNewAlertData_accountId_get
    if _newclass:
        accountId = _swig_property(_iotkit.CreateNewAlertData_accountId_get, _iotkit.CreateNewAlertData_accountId_set)
    __swig_setmethods__["alertId"] = _iotkit.CreateNewAlertData_alertId_set
    __swig_getmethods__["alertId"] = _iotkit.CreateNewAlertData_alertId_get
    if _newclass:
        alertId = _swig_property(_iotkit.CreateNewAlertData_alertId_get, _iotkit.CreateNewAlertData_alertId_set)
    __swig_setmethods__["ruleId"] = _iotkit.CreateNewAlertData_ruleId_set
    __swig_getmethods__["ruleId"] = _iotkit.CreateNewAlertData_ruleId_get
    if _newclass:
        ruleId = _swig_property(_iotkit.CreateNewAlertData_ruleId_get, _iotkit.CreateNewAlertData_ruleId_set)
    __swig_setmethods__["deviceId"] = _iotkit.CreateNewAlertData_deviceId_set
    __swig_getmethods__["deviceId"] = _iotkit.CreateNewAlertData_deviceId_get
    if _newclass:
        deviceId = _swig_property(_iotkit.CreateNewAlertData_deviceId_get, _iotkit.CreateNewAlertData_deviceId_set)
    __swig_setmethods__["alertStatus"] = _iotkit.CreateNewAlertData_alertStatus_set
    __swig_getmethods__["alertStatus"] = _iotkit.CreateNewAlertData_alertStatus_get
    if _newclass:
        alertStatus = _swig_property(_iotkit.CreateNewAlertData_alertStatus_get, _iotkit.CreateNewAlertData_alertStatus_set)
    __swig_setmethods__["timestamp"] = _iotkit.CreateNewAlertData_timestamp_set
    __swig_getmethods__["timestamp"] = _iotkit.CreateNewAlertData_timestamp_get
    if _newclass:
        timestamp = _swig_property(_iotkit.CreateNewAlertData_timestamp_get, _iotkit.CreateNewAlertData_timestamp_set)
    __swig_setmethods__["resetTimestamp"] = _iotkit.CreateNewAlertData_resetTimestamp_set
    __swig_getmethods__["resetTimestamp"] = _iotkit.CreateNewAlertData_resetTimestamp_get
    if _newclass:
        resetTimestamp = _swig_property(_iotkit.CreateNewAlertData_resetTimestamp_get, _iotkit.CreateNewAlertData_resetTimestamp_set)
    __swig_setmethods__["resetType"] = _iotkit.CreateNewAlertData_resetType_set
    __swig_getmethods__["resetType"] = _iotkit.CreateNewAlertData_resetType_get
    if _newclass:
        resetType = _swig_property(_iotkit.CreateNewAlertData_resetType_get, _iotkit.CreateNewAlertData_resetType_set)
    __swig_setmethods__["lastUpdateDate"] = _iotkit.CreateNewAlertData_lastUpdateDate_set
    __swig_getmethods__["lastUpdateDate"] = _iotkit.CreateNewAlertData_lastUpdateDate_get
    if _newclass:
        lastUpdateDate = _swig_property(_iotkit.CreateNewAlertData_lastUpdateDate_get, _iotkit.CreateNewAlertData_lastUpdateDate_set)
    __swig_setmethods__["ruleName"] = _iotkit.CreateNewAlertData_ruleName_set
    __swig_getmethods__["ruleName"] = _iotkit.CreateNewAlertData_ruleName_get
    if _newclass:
        ruleName = _swig_property(_iotkit.CreateNewAlertData_ruleName_get, _iotkit.CreateNewAlertData_ruleName_set)
    __swig_setmethods__["rulePriority"] = _iotkit.CreateNewAlertData_rulePriority_set
    __swig_getmethods__["rulePriority"] = _iotkit.CreateNewAlertData_rulePriority_get
    if _newclass:
        rulePriority = _swig_property(_iotkit.CreateNewAlertData_rulePriority_get, _iotkit.CreateNewAlertData_rulePriority_set)
    __swig_setmethods__["naturalLangAlert"] = _iotkit.CreateNewAlertData_naturalLangAlert_set
    __swig_getmethods__["naturalLangAlert"] = _iotkit.CreateNewAlertData_naturalLangAlert_get
    if _newclass:
        naturalLangAlert = _swig_property(_iotkit.CreateNewAlertData_naturalLangAlert_get, _iotkit.CreateNewAlertData_naturalLangAlert_set)
    __swig_setmethods__["ruleExecutionTimestamp"] = _iotkit.CreateNewAlertData_ruleExecutionTimestamp_set
    __swig_getmethods__["ruleExecutionTimestamp"] = _iotkit.CreateNewAlertData_ruleExecutionTimestamp_get
    if _newclass:
        ruleExecutionTimestamp = _swig_property(_iotkit.CreateNewAlertData_ruleExecutionTimestamp_get, _iotkit.CreateNewAlertData_ruleExecutionTimestamp_set)
    __swig_setmethods__["conditions"] = _iotkit.CreateNewAlertData_conditions_set
    __swig_getmethods__["conditions"] = _iotkit.CreateNewAlertData_conditions_get
    if _newclass:
        conditions = _swig_property(_iotkit.CreateNewAlertData_conditions_get, _iotkit.CreateNewAlertData_conditions_set)

    def __init__(self):
        """__init__(_CreateNewAlertData self) -> CreateNewAlertData"""
        this = _iotkit.new_CreateNewAlertData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlertData
    __del__ = lambda self: None
CreateNewAlertData_swigregister = _iotkit.CreateNewAlertData_swigregister
CreateNewAlertData_swigregister(CreateNewAlertData)

class CreateNewAlertDataList(_object):
    """Proxy of C++ _CreateNewAlertDataList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlertDataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlertDataList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _iotkit.CreateNewAlertDataList_data_set
    __swig_getmethods__["data"] = _iotkit.CreateNewAlertDataList_data_get
    if _newclass:
        data = _swig_property(_iotkit.CreateNewAlertDataList_data_get, _iotkit.CreateNewAlertDataList_data_set)
    __swig_setmethods__["next"] = _iotkit.CreateNewAlertDataList_next_set
    __swig_getmethods__["next"] = _iotkit.CreateNewAlertDataList_next_get
    if _newclass:
        next = _swig_property(_iotkit.CreateNewAlertDataList_next_get, _iotkit.CreateNewAlertDataList_next_set)

    def __init__(self):
        """__init__(_CreateNewAlertDataList self) -> CreateNewAlertDataList"""
        this = _iotkit.new_CreateNewAlertDataList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlertDataList
    __del__ = lambda self: None
CreateNewAlertDataList_swigregister = _iotkit.CreateNewAlertDataList_swigregister
CreateNewAlertDataList_swigregister(CreateNewAlertDataList)

class CreateNewAlert(_object):
    """Proxy of C++ _CreateNewAlert class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateNewAlert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateNewAlert, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgType"] = _iotkit.CreateNewAlert_msgType_set
    __swig_getmethods__["msgType"] = _iotkit.CreateNewAlert_msgType_get
    if _newclass:
        msgType = _swig_property(_iotkit.CreateNewAlert_msgType_get, _iotkit.CreateNewAlert_msgType_set)
    __swig_setmethods__["dataList"] = _iotkit.CreateNewAlert_dataList_set
    __swig_getmethods__["dataList"] = _iotkit.CreateNewAlert_dataList_get
    if _newclass:
        dataList = _swig_property(_iotkit.CreateNewAlert_dataList_get, _iotkit.CreateNewAlert_dataList_set)

    def __init__(self):
        """__init__(_CreateNewAlert self) -> CreateNewAlert"""
        this = _iotkit.new_CreateNewAlert()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateNewAlert
    __del__ = lambda self: None
CreateNewAlert_swigregister = _iotkit.CreateNewAlert_swigregister
CreateNewAlert_swigregister(CreateNewAlert)


def getListOfAlerts():
    """getListOfAlerts() -> char *"""
    return _iotkit.getListOfAlerts()

def getAlertInformation(alertId):
    """
    getAlertInformation(char * alertId) -> char *

    Parameters:
        alertId: char *

    """
    return _iotkit.getAlertInformation(alertId)

def resetAlert(alertId):
    """
    resetAlert(char * alertId) -> char *

    Parameters:
        alertId: char *

    """
    return _iotkit.resetAlert(alertId)

def updateAlertStatus(alertId, status_name):
    """
    updateAlertStatus(char * alertId, char * status_name) -> char *

    Parameters:
        alertId: char *
        status_name: char *

    """
    return _iotkit.updateAlertStatus(alertId, status_name)

def addCommentToAlert(alertId, user, timestamp, comment):
    """
    addCommentToAlert(char * alertId, char * user, long timestamp, char * comment) -> char *

    Parameters:
        alertId: char *
        user: char *
        timestamp: long
        comment: char *

    """
    return _iotkit.addCommentToAlert(alertId, user, timestamp, comment)

def getUserJwtToken(username, password):
    """
    getUserJwtToken(char * username, char * password) -> char *

    Parameters:
        username: char *
        password: char *

    """
    return _iotkit.getUserJwtToken(username, password)

def getUserJwtTokenInfo():
    """getUserJwtTokenInfo() -> char *"""
    return _iotkit.getUserJwtTokenInfo()
class ActuatorCommandParams(_object):
    """Proxy of C++ _ActuatorCommandParams class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActuatorCommandParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActuatorCommandParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _iotkit.ActuatorCommandParams_name_set
    __swig_getmethods__["name"] = _iotkit.ActuatorCommandParams_name_get
    if _newclass:
        name = _swig_property(_iotkit.ActuatorCommandParams_name_get, _iotkit.ActuatorCommandParams_name_set)
    __swig_setmethods__["value"] = _iotkit.ActuatorCommandParams_value_set
    __swig_getmethods__["value"] = _iotkit.ActuatorCommandParams_value_get
    if _newclass:
        value = _swig_property(_iotkit.ActuatorCommandParams_value_get, _iotkit.ActuatorCommandParams_value_set)
    __swig_setmethods__["next"] = _iotkit.ActuatorCommandParams_next_set
    __swig_getmethods__["next"] = _iotkit.ActuatorCommandParams_next_get
    if _newclass:
        next = _swig_property(_iotkit.ActuatorCommandParams_next_get, _iotkit.ActuatorCommandParams_next_set)

    def __init__(self):
        """__init__(_ActuatorCommandParams self) -> ActuatorCommandParams"""
        this = _iotkit.new_ActuatorCommandParams()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_ActuatorCommandParams
    __del__ = lambda self: None
ActuatorCommandParams_swigregister = _iotkit.ActuatorCommandParams_swigregister
ActuatorCommandParams_swigregister(ActuatorCommandParams)

class ComponentCatalog(_object):
    """Proxy of C++ _ComponentCatalog class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentCatalog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentCatalog, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _iotkit.ComponentCatalog_name_set
    __swig_getmethods__["name"] = _iotkit.ComponentCatalog_name_get
    if _newclass:
        name = _swig_property(_iotkit.ComponentCatalog_name_get, _iotkit.ComponentCatalog_name_set)
    __swig_setmethods__["version"] = _iotkit.ComponentCatalog_version_set
    __swig_getmethods__["version"] = _iotkit.ComponentCatalog_version_get
    if _newclass:
        version = _swig_property(_iotkit.ComponentCatalog_version_get, _iotkit.ComponentCatalog_version_set)
    __swig_setmethods__["type"] = _iotkit.ComponentCatalog_type_set
    __swig_getmethods__["type"] = _iotkit.ComponentCatalog_type_get
    if _newclass:
        type = _swig_property(_iotkit.ComponentCatalog_type_get, _iotkit.ComponentCatalog_type_set)
    __swig_setmethods__["datatype"] = _iotkit.ComponentCatalog_datatype_set
    __swig_getmethods__["datatype"] = _iotkit.ComponentCatalog_datatype_get
    if _newclass:
        datatype = _swig_property(_iotkit.ComponentCatalog_datatype_get, _iotkit.ComponentCatalog_datatype_set)
    __swig_setmethods__["format"] = _iotkit.ComponentCatalog_format_set
    __swig_getmethods__["format"] = _iotkit.ComponentCatalog_format_get
    if _newclass:
        format = _swig_property(_iotkit.ComponentCatalog_format_get, _iotkit.ComponentCatalog_format_set)
    __swig_setmethods__["isMinPresent"] = _iotkit.ComponentCatalog_isMinPresent_set
    __swig_getmethods__["isMinPresent"] = _iotkit.ComponentCatalog_isMinPresent_get
    if _newclass:
        isMinPresent = _swig_property(_iotkit.ComponentCatalog_isMinPresent_get, _iotkit.ComponentCatalog_isMinPresent_set)
    __swig_setmethods__["minvalue"] = _iotkit.ComponentCatalog_minvalue_set
    __swig_getmethods__["minvalue"] = _iotkit.ComponentCatalog_minvalue_get
    if _newclass:
        minvalue = _swig_property(_iotkit.ComponentCatalog_minvalue_get, _iotkit.ComponentCatalog_minvalue_set)
    __swig_setmethods__["isMaxPresent"] = _iotkit.ComponentCatalog_isMaxPresent_set
    __swig_getmethods__["isMaxPresent"] = _iotkit.ComponentCatalog_isMaxPresent_get
    if _newclass:
        isMaxPresent = _swig_property(_iotkit.ComponentCatalog_isMaxPresent_get, _iotkit.ComponentCatalog_isMaxPresent_set)
    __swig_setmethods__["maxvalue"] = _iotkit.ComponentCatalog_maxvalue_set
    __swig_getmethods__["maxvalue"] = _iotkit.ComponentCatalog_maxvalue_get
    if _newclass:
        maxvalue = _swig_property(_iotkit.ComponentCatalog_maxvalue_get, _iotkit.ComponentCatalog_maxvalue_set)
    __swig_setmethods__["unit"] = _iotkit.ComponentCatalog_unit_set
    __swig_getmethods__["unit"] = _iotkit.ComponentCatalog_unit_get
    if _newclass:
        unit = _swig_property(_iotkit.ComponentCatalog_unit_get, _iotkit.ComponentCatalog_unit_set)
    __swig_setmethods__["display"] = _iotkit.ComponentCatalog_display_set
    __swig_getmethods__["display"] = _iotkit.ComponentCatalog_display_get
    if _newclass:
        display = _swig_property(_iotkit.ComponentCatalog_display_get, _iotkit.ComponentCatalog_display_set)
    __swig_setmethods__["command"] = _iotkit.ComponentCatalog_command_set
    __swig_getmethods__["command"] = _iotkit.ComponentCatalog_command_get
    if _newclass:
        command = _swig_property(_iotkit.ComponentCatalog_command_get, _iotkit.ComponentCatalog_command_set)
    __swig_setmethods__["parameters"] = _iotkit.ComponentCatalog_parameters_set
    __swig_getmethods__["parameters"] = _iotkit.ComponentCatalog_parameters_get
    if _newclass:
        parameters = _swig_property(_iotkit.ComponentCatalog_parameters_get, _iotkit.ComponentCatalog_parameters_set)

    def __init__(self):
        """__init__(_ComponentCatalog self) -> ComponentCatalog"""
        this = _iotkit.new_ComponentCatalog()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_ComponentCatalog
    __del__ = lambda self: None
ComponentCatalog_swigregister = _iotkit.ComponentCatalog_swigregister
ComponentCatalog_swigregister(ComponentCatalog)


def listAllComponentCatalogs():
    """listAllComponentCatalogs() -> char *"""
    return _iotkit.listAllComponentCatalogs()

def getComponentCatalogDetails(cmp_id):
    """
    getComponentCatalogDetails(char * cmp_id) -> char *

    Parameters:
        cmp_id: char *

    """
    return _iotkit.getComponentCatalogDetails(cmp_id)

def createComponentCatalogObject(cmp_name, cmp_version, cmp_type, cmp_datatype, cmp_format, cmp_unit, cmp_display):
    """
    createComponentCatalogObject(char * cmp_name, char * cmp_version, char * cmp_type, char * cmp_datatype, char * cmp_format, char * cmp_unit, char * cmp_display) -> ComponentCatalog

    Parameters:
        cmp_name: char *
        cmp_version: char *
        cmp_type: char *
        cmp_datatype: char *
        cmp_format: char *
        cmp_unit: char *
        cmp_display: char *

    """
    return _iotkit.createComponentCatalogObject(cmp_name, cmp_version, cmp_type, cmp_datatype, cmp_format, cmp_unit, cmp_display)

def addMinValue(cmpCatalogObject, cmp_minvalue):
    """
    addMinValue(ComponentCatalog cmpCatalogObject, double cmp_minvalue) -> ComponentCatalog

    Parameters:
        cmpCatalogObject: ComponentCatalog *
        cmp_minvalue: double

    """
    return _iotkit.addMinValue(cmpCatalogObject, cmp_minvalue)

def addMaxValue(cmpCatalogObject, cmp_maxvalue):
    """
    addMaxValue(ComponentCatalog cmpCatalogObject, double cmp_maxvalue) -> ComponentCatalog

    Parameters:
        cmpCatalogObject: ComponentCatalog *
        cmp_maxvalue: double

    """
    return _iotkit.addMaxValue(cmpCatalogObject, cmp_maxvalue)

def addCommandString(cmpCatalogObject, cmp_command):
    """
    addCommandString(ComponentCatalog cmpCatalogObject, char * cmp_command) -> ComponentCatalog

    Parameters:
        cmpCatalogObject: ComponentCatalog *
        cmp_command: char *

    """
    return _iotkit.addCommandString(cmpCatalogObject, cmp_command)

def addCommandParams(cmpCatalogObject, cmd_name, cmd_value):
    """
    addCommandParams(ComponentCatalog cmpCatalogObject, char * cmd_name, char * cmd_value) -> ComponentCatalog

    Parameters:
        cmpCatalogObject: ComponentCatalog *
        cmd_name: char *
        cmd_value: char *

    """
    return _iotkit.addCommandParams(cmpCatalogObject, cmd_name, cmd_value)

def createAnComponentCatalog(cmpCatalogObject):
    """
    createAnComponentCatalog(ComponentCatalog cmpCatalogObject) -> char *

    Parameters:
        cmpCatalogObject: ComponentCatalog *

    """
    return _iotkit.createAnComponentCatalog(cmpCatalogObject)

def updateAnComponentCatalog(cmpCatalogObject, cmp_id):
    """
    updateAnComponentCatalog(ComponentCatalog cmpCatalogObject, char * cmp_id) -> char *

    Parameters:
        cmpCatalogObject: ComponentCatalog *
        cmp_id: char *

    """
    return _iotkit.updateAnComponentCatalog(cmpCatalogObject, cmp_id)
class RetrieveData(_object):
    """Proxy of C++ _RetrieveData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RetrieveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RetrieveData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fromMillis"] = _iotkit.RetrieveData_fromMillis_set
    __swig_getmethods__["fromMillis"] = _iotkit.RetrieveData_fromMillis_get
    if _newclass:
        fromMillis = _swig_property(_iotkit.RetrieveData_fromMillis_get, _iotkit.RetrieveData_fromMillis_set)
    __swig_setmethods__["toMillis"] = _iotkit.RetrieveData_toMillis_set
    __swig_getmethods__["toMillis"] = _iotkit.RetrieveData_toMillis_get
    if _newclass:
        toMillis = _swig_property(_iotkit.RetrieveData_toMillis_get, _iotkit.RetrieveData_toMillis_set)
    __swig_setmethods__["deviceList"] = _iotkit.RetrieveData_deviceList_set
    __swig_getmethods__["deviceList"] = _iotkit.RetrieveData_deviceList_get
    if _newclass:
        deviceList = _swig_property(_iotkit.RetrieveData_deviceList_get, _iotkit.RetrieveData_deviceList_set)
    __swig_setmethods__["componentId"] = _iotkit.RetrieveData_componentId_set
    __swig_getmethods__["componentId"] = _iotkit.RetrieveData_componentId_get
    if _newclass:
        componentId = _swig_property(_iotkit.RetrieveData_componentId_get, _iotkit.RetrieveData_componentId_set)

    def __init__(self):
        """__init__(_RetrieveData self) -> RetrieveData"""
        this = _iotkit.new_RetrieveData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_RetrieveData
    __del__ = lambda self: None
RetrieveData_swigregister = _iotkit.RetrieveData_swigregister
RetrieveData_swigregister(RetrieveData)


def submitData(cname, value):
    """
    submitData(char * cname, char * value) -> char *

    Parameters:
        cname: char *
        value: char *

    """
    return _iotkit.submitData(cname, value)

def submitDataWithLoc(cname, value, latitude, longitude, height):
    """
    submitDataWithLoc(char * cname, char * value, char * latitude, char * longitude, char * height) -> char *

    Parameters:
        cname: char *
        value: char *
        latitude: char *
        longitude: char *
        height: char *

    """
    return _iotkit.submitDataWithLoc(cname, value, latitude, longitude, height)

def createRetrieveDataObject(fromMillis, toMillis):
    """
    createRetrieveDataObject(long fromMillis, long toMillis) -> RetrieveData

    Parameters:
        fromMillis: long
        toMillis: long

    """
    return _iotkit.createRetrieveDataObject(fromMillis, toMillis)

def addDeviceId(retrieveObj, id):
    """
    addDeviceId(RetrieveData retrieveObj, char * id) -> RetrieveData

    Parameters:
        retrieveObj: RetrieveData *
        id: char *

    """
    return _iotkit.addDeviceId(retrieveObj, id)

def addSensorName(retrieveObj, sensorName):
    """
    addSensorName(RetrieveData retrieveObj, char * sensorName) -> RetrieveData

    Parameters:
        retrieveObj: RetrieveData *
        sensorName: char *

    """
    return _iotkit.addSensorName(retrieveObj, sensorName)

def addSensorId(retrieveObj, id):
    """
    addSensorId(RetrieveData retrieveObj, char * id) -> RetrieveData

    Parameters:
        retrieveObj: RetrieveData *
        id: char *

    """
    return _iotkit.addSensorId(retrieveObj, id)

def retrieveData(retrieveObj):
    """
    retrieveData(RetrieveData retrieveObj) -> char *

    Parameters:
        retrieveObj: RetrieveData *

    """
    return _iotkit.retrieveData(retrieveObj)

def retrieveData2(retrieveObj):
    """
    retrieveData2(RetrieveData retrieveObj) -> char *

    Parameters:
        retrieveObj: RetrieveData *

    """
    return _iotkit.retrieveData2(retrieveObj)
class DeviceCreationObj(_object):
    """Proxy of C++ _DeviceCreationObj class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceCreationObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceCreationObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device_id"] = _iotkit.DeviceCreationObj_device_id_set
    __swig_getmethods__["device_id"] = _iotkit.DeviceCreationObj_device_id_get
    if _newclass:
        device_id = _swig_property(_iotkit.DeviceCreationObj_device_id_get, _iotkit.DeviceCreationObj_device_id_set)
    __swig_setmethods__["gateway_id"] = _iotkit.DeviceCreationObj_gateway_id_set
    __swig_getmethods__["gateway_id"] = _iotkit.DeviceCreationObj_gateway_id_get
    if _newclass:
        gateway_id = _swig_property(_iotkit.DeviceCreationObj_gateway_id_get, _iotkit.DeviceCreationObj_gateway_id_set)
    __swig_setmethods__["device_name"] = _iotkit.DeviceCreationObj_device_name_set
    __swig_getmethods__["device_name"] = _iotkit.DeviceCreationObj_device_name_get
    if _newclass:
        device_name = _swig_property(_iotkit.DeviceCreationObj_device_name_get, _iotkit.DeviceCreationObj_device_name_set)
    __swig_setmethods__["tags"] = _iotkit.DeviceCreationObj_tags_set
    __swig_getmethods__["tags"] = _iotkit.DeviceCreationObj_tags_get
    if _newclass:
        tags = _swig_property(_iotkit.DeviceCreationObj_tags_get, _iotkit.DeviceCreationObj_tags_set)
    __swig_setmethods__["latitude"] = _iotkit.DeviceCreationObj_latitude_set
    __swig_getmethods__["latitude"] = _iotkit.DeviceCreationObj_latitude_get
    if _newclass:
        latitude = _swig_property(_iotkit.DeviceCreationObj_latitude_get, _iotkit.DeviceCreationObj_latitude_set)
    __swig_setmethods__["longitude"] = _iotkit.DeviceCreationObj_longitude_set
    __swig_getmethods__["longitude"] = _iotkit.DeviceCreationObj_longitude_get
    if _newclass:
        longitude = _swig_property(_iotkit.DeviceCreationObj_longitude_get, _iotkit.DeviceCreationObj_longitude_set)
    __swig_setmethods__["height"] = _iotkit.DeviceCreationObj_height_set
    __swig_getmethods__["height"] = _iotkit.DeviceCreationObj_height_get
    if _newclass:
        height = _swig_property(_iotkit.DeviceCreationObj_height_get, _iotkit.DeviceCreationObj_height_set)
    __swig_setmethods__["attributes"] = _iotkit.DeviceCreationObj_attributes_set
    __swig_getmethods__["attributes"] = _iotkit.DeviceCreationObj_attributes_get
    if _newclass:
        attributes = _swig_property(_iotkit.DeviceCreationObj_attributes_get, _iotkit.DeviceCreationObj_attributes_set)

    def __init__(self):
        """__init__(_DeviceCreationObj self) -> DeviceCreationObj"""
        this = _iotkit.new_DeviceCreationObj()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_DeviceCreationObj
    __del__ = lambda self: None
DeviceCreationObj_swigregister = _iotkit.DeviceCreationObj_swigregister
DeviceCreationObj_swigregister(DeviceCreationObj)


def listAllDevices():
    """listAllDevices() -> char *"""
    return _iotkit.listAllDevices()

def getMyDeviceInfo():
    """getMyDeviceInfo() -> char *"""
    return _iotkit.getMyDeviceInfo()

def getOneDeviceInfo(device_id):
    """
    getOneDeviceInfo(char * device_id) -> char *

    Parameters:
        device_id: char *

    """
    return _iotkit.getOneDeviceInfo(device_id)

def createDeviceCreationObject(device_id, gateway_id, device_name):
    """
    createDeviceCreationObject(char * device_id, char * gateway_id, char * device_name) -> DeviceCreationObj

    Parameters:
        device_id: char *
        gateway_id: char *
        device_name: char *

    """
    return _iotkit.createDeviceCreationObject(device_id, gateway_id, device_name)

def addLocInfo(createDeviceObj, latitude, longitude, height):
    """
    addLocInfo(DeviceCreationObj createDeviceObj, char * latitude, char * longitude, char * height) -> DeviceCreationObj

    Parameters:
        createDeviceObj: DeviceCreationObj *
        latitude: char *
        longitude: char *
        height: char *

    """
    return _iotkit.addLocInfo(createDeviceObj, latitude, longitude, height)

def addTagInfo(createDeviceObj, tagName):
    """
    addTagInfo(DeviceCreationObj createDeviceObj, char * tagName) -> DeviceCreationObj

    Parameters:
        createDeviceObj: DeviceCreationObj *
        tagName: char *

    """
    return _iotkit.addTagInfo(createDeviceObj, tagName)

def addAttributesInfo(createDeviceObj, name, value):
    """
    addAttributesInfo(DeviceCreationObj createDeviceObj, char * name, char * value) -> DeviceCreationObj

    Parameters:
        createDeviceObj: DeviceCreationObj *
        name: char *
        value: char *

    """
    return _iotkit.addAttributesInfo(createDeviceObj, name, value)

def createADevice(createDeviceObj):
    """
    createADevice(DeviceCreationObj createDeviceObj) -> char *

    Parameters:
        createDeviceObj: DeviceCreationObj *

    """
    return _iotkit.createADevice(createDeviceObj)

def updateADevice(createDeviceObj):
    """
    updateADevice(DeviceCreationObj createDeviceObj) -> char *

    Parameters:
        createDeviceObj: DeviceCreationObj *

    """
    return _iotkit.updateADevice(createDeviceObj)

def activateADevice(activation_code):
    """
    activateADevice(char * activation_code) -> char *

    Parameters:
        activation_code: char *

    """
    return _iotkit.activateADevice(activation_code)

def activateADevice2(activation_code, device_id):
    """
    activateADevice2(char * activation_code, char * device_id) -> char *

    Parameters:
        activation_code: char *
        device_id: char *

    """
    return _iotkit.activateADevice2(activation_code, device_id)

def deleteADevice(device_id):
    """
    deleteADevice(char * device_id) -> char *

    Parameters:
        device_id: char *

    """
    return _iotkit.deleteADevice(device_id)

def isSensorRegistered(name):
    """
    isSensorRegistered(char * name) -> bool

    Parameters:
        name: char *

    """
    return _iotkit.isSensorRegistered(name)

def getSensorComponentId(name):
    """
    getSensorComponentId(char * name) -> char *

    Parameters:
        name: char *

    """
    return _iotkit.getSensorComponentId(name)

def isDeviceActivated():
    """isDeviceActivated() -> bool"""
    return _iotkit.isDeviceActivated()

def addComponent(cmp_name, cmp_type):
    """
    addComponent(char * cmp_name, char * cmp_type) -> char *

    Parameters:
        cmp_name: char *
        cmp_type: char *

    """
    return _iotkit.addComponent(cmp_name, cmp_type)

def deleteComponent(sensor_name):
    """
    deleteComponent(char * sensor_name) -> char *

    Parameters:
        sensor_name: char *

    """
    return _iotkit.deleteComponent(sensor_name)

def listAllTagsForDevices():
    """listAllTagsForDevices() -> char *"""
    return _iotkit.listAllTagsForDevices()

def listAllAttributesForDevices():
    """listAllAttributesForDevices() -> char *"""
    return _iotkit.listAllAttributesForDevices()

def getListOfInvitation():
    """getListOfInvitation() -> char *"""
    return _iotkit.getListOfInvitation()

def getInvitationListSendToSpecificUser(email_id):
    """
    getInvitationListSendToSpecificUser(char * email_id) -> char *

    Parameters:
        email_id: char *

    """
    return _iotkit.getInvitationListSendToSpecificUser(email_id)

def createInvitation(email):
    """
    createInvitation(char * email) -> char *

    Parameters:
        email: char *

    """
    return _iotkit.createInvitation(email)

def deleteInvitation(email_id):
    """
    deleteInvitation(char * email_id) -> char *

    Parameters:
        email_id: char *

    """
    return _iotkit.deleteInvitation(email_id)
class CreateRuleActions(_object):
    """Proxy of C++ _CreateRuleActions class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateRuleActions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateRuleActions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _iotkit.CreateRuleActions_type_set
    __swig_getmethods__["type"] = _iotkit.CreateRuleActions_type_get
    if _newclass:
        type = _swig_property(_iotkit.CreateRuleActions_type_get, _iotkit.CreateRuleActions_type_set)
    __swig_setmethods__["target"] = _iotkit.CreateRuleActions_target_set
    __swig_getmethods__["target"] = _iotkit.CreateRuleActions_target_get
    if _newclass:
        target = _swig_property(_iotkit.CreateRuleActions_target_get, _iotkit.CreateRuleActions_target_set)

    def __init__(self):
        """__init__(_CreateRuleActions self) -> CreateRuleActions"""
        this = _iotkit.new_CreateRuleActions()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateRuleActions
    __del__ = lambda self: None
CreateRuleActions_swigregister = _iotkit.CreateRuleActions_swigregister
CreateRuleActions_swigregister(CreateRuleActions)

class CreateRuleActionsList(_object):
    """Proxy of C++ _CreateRuleActionsList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateRuleActionsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateRuleActionsList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _iotkit.CreateRuleActionsList_data_set
    __swig_getmethods__["data"] = _iotkit.CreateRuleActionsList_data_get
    if _newclass:
        data = _swig_property(_iotkit.CreateRuleActionsList_data_get, _iotkit.CreateRuleActionsList_data_set)
    __swig_setmethods__["next"] = _iotkit.CreateRuleActionsList_next_set
    __swig_getmethods__["next"] = _iotkit.CreateRuleActionsList_next_get
    if _newclass:
        next = _swig_property(_iotkit.CreateRuleActionsList_next_get, _iotkit.CreateRuleActionsList_next_set)

    def __init__(self):
        """__init__(_CreateRuleActionsList self) -> CreateRuleActionsList"""
        this = _iotkit.new_CreateRuleActionsList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateRuleActionsList
    __del__ = lambda self: None
CreateRuleActionsList_swigregister = _iotkit.CreateRuleActionsList_swigregister
CreateRuleActionsList_swigregister(CreateRuleActionsList)

class CreateRuleConditionValues(_object):
    """Proxy of C++ _CreateRuleConditionValues class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateRuleConditionValues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateRuleConditionValues, name)
    __repr__ = _swig_repr
    __swig_setmethods__["component"] = _iotkit.CreateRuleConditionValues_component_set
    __swig_getmethods__["component"] = _iotkit.CreateRuleConditionValues_component_get
    if _newclass:
        component = _swig_property(_iotkit.CreateRuleConditionValues_component_get, _iotkit.CreateRuleConditionValues_component_set)
    __swig_setmethods__["type"] = _iotkit.CreateRuleConditionValues_type_set
    __swig_getmethods__["type"] = _iotkit.CreateRuleConditionValues_type_get
    if _newclass:
        type = _swig_property(_iotkit.CreateRuleConditionValues_type_get, _iotkit.CreateRuleConditionValues_type_set)
    __swig_setmethods__["values"] = _iotkit.CreateRuleConditionValues_values_set
    __swig_getmethods__["values"] = _iotkit.CreateRuleConditionValues_values_get
    if _newclass:
        values = _swig_property(_iotkit.CreateRuleConditionValues_values_get, _iotkit.CreateRuleConditionValues_values_set)
    __swig_setmethods__["opname"] = _iotkit.CreateRuleConditionValues_opname_set
    __swig_getmethods__["opname"] = _iotkit.CreateRuleConditionValues_opname_get
    if _newclass:
        opname = _swig_property(_iotkit.CreateRuleConditionValues_opname_get, _iotkit.CreateRuleConditionValues_opname_set)

    def __init__(self):
        """__init__(_CreateRuleConditionValues self) -> CreateRuleConditionValues"""
        this = _iotkit.new_CreateRuleConditionValues()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateRuleConditionValues
    __del__ = lambda self: None
CreateRuleConditionValues_swigregister = _iotkit.CreateRuleConditionValues_swigregister
CreateRuleConditionValues_swigregister(CreateRuleConditionValues)

class CreateRuleConditionValuesList(_object):
    """Proxy of C++ _CreateRuleConditionValuesList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateRuleConditionValuesList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateRuleConditionValuesList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _iotkit.CreateRuleConditionValuesList_data_set
    __swig_getmethods__["data"] = _iotkit.CreateRuleConditionValuesList_data_get
    if _newclass:
        data = _swig_property(_iotkit.CreateRuleConditionValuesList_data_get, _iotkit.CreateRuleConditionValuesList_data_set)
    __swig_setmethods__["next"] = _iotkit.CreateRuleConditionValuesList_next_set
    __swig_getmethods__["next"] = _iotkit.CreateRuleConditionValuesList_next_get
    if _newclass:
        next = _swig_property(_iotkit.CreateRuleConditionValuesList_next_get, _iotkit.CreateRuleConditionValuesList_next_set)

    def __init__(self):
        """__init__(_CreateRuleConditionValuesList self) -> CreateRuleConditionValuesList"""
        this = _iotkit.new_CreateRuleConditionValuesList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateRuleConditionValuesList
    __del__ = lambda self: None
CreateRuleConditionValuesList_swigregister = _iotkit.CreateRuleConditionValuesList_swigregister
CreateRuleConditionValuesList_swigregister(CreateRuleConditionValuesList)

class CreateRule(_object):
    """Proxy of C++ _CreateRule class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateRule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _iotkit.CreateRule_name_set
    __swig_getmethods__["name"] = _iotkit.CreateRule_name_get
    if _newclass:
        name = _swig_property(_iotkit.CreateRule_name_get, _iotkit.CreateRule_name_set)
    __swig_setmethods__["description"] = _iotkit.CreateRule_description_set
    __swig_getmethods__["description"] = _iotkit.CreateRule_description_get
    if _newclass:
        description = _swig_property(_iotkit.CreateRule_description_get, _iotkit.CreateRule_description_set)
    __swig_setmethods__["priority"] = _iotkit.CreateRule_priority_set
    __swig_getmethods__["priority"] = _iotkit.CreateRule_priority_get
    if _newclass:
        priority = _swig_property(_iotkit.CreateRule_priority_get, _iotkit.CreateRule_priority_set)
    __swig_setmethods__["type"] = _iotkit.CreateRule_type_set
    __swig_getmethods__["type"] = _iotkit.CreateRule_type_get
    if _newclass:
        type = _swig_property(_iotkit.CreateRule_type_get, _iotkit.CreateRule_type_set)
    __swig_setmethods__["status"] = _iotkit.CreateRule_status_set
    __swig_getmethods__["status"] = _iotkit.CreateRule_status_get
    if _newclass:
        status = _swig_property(_iotkit.CreateRule_status_get, _iotkit.CreateRule_status_set)
    __swig_setmethods__["resetType"] = _iotkit.CreateRule_resetType_set
    __swig_getmethods__["resetType"] = _iotkit.CreateRule_resetType_get
    if _newclass:
        resetType = _swig_property(_iotkit.CreateRule_resetType_get, _iotkit.CreateRule_resetType_set)
    __swig_setmethods__["actions"] = _iotkit.CreateRule_actions_set
    __swig_getmethods__["actions"] = _iotkit.CreateRule_actions_get
    if _newclass:
        actions = _swig_property(_iotkit.CreateRule_actions_get, _iotkit.CreateRule_actions_set)
    __swig_setmethods__["population_ids"] = _iotkit.CreateRule_population_ids_set
    __swig_getmethods__["population_ids"] = _iotkit.CreateRule_population_ids_get
    if _newclass:
        population_ids = _swig_property(_iotkit.CreateRule_population_ids_get, _iotkit.CreateRule_population_ids_set)
    __swig_setmethods__["population_attributes"] = _iotkit.CreateRule_population_attributes_set
    __swig_getmethods__["population_attributes"] = _iotkit.CreateRule_population_attributes_get
    if _newclass:
        population_attributes = _swig_property(_iotkit.CreateRule_population_attributes_get, _iotkit.CreateRule_population_attributes_set)
    __swig_setmethods__["opname"] = _iotkit.CreateRule_opname_set
    __swig_getmethods__["opname"] = _iotkit.CreateRule_opname_get
    if _newclass:
        opname = _swig_property(_iotkit.CreateRule_opname_get, _iotkit.CreateRule_opname_set)
    __swig_setmethods__["values"] = _iotkit.CreateRule_values_set
    __swig_getmethods__["values"] = _iotkit.CreateRule_values_get
    if _newclass:
        values = _swig_property(_iotkit.CreateRule_values_get, _iotkit.CreateRule_values_set)

    def __init__(self):
        """__init__(_CreateRule self) -> CreateRule"""
        this = _iotkit.new_CreateRule()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_CreateRule
    __del__ = lambda self: None
CreateRule_swigregister = _iotkit.CreateRule_swigregister
CreateRule_swigregister(CreateRule)


def createRuleObject():
    """createRuleObject() -> CreateRule"""
    return _iotkit.createRuleObject()

def setRuleName(createRuleObj, name):
    """
    setRuleName(CreateRule createRuleObj, char * name) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        name: char *

    """
    return _iotkit.setRuleName(createRuleObj, name)

def setRuleDescription(createRuleObj, description):
    """
    setRuleDescription(CreateRule createRuleObj, char * description) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        description: char *

    """
    return _iotkit.setRuleDescription(createRuleObj, description)

def setRulePriority(createRuleObj, priority):
    """
    setRulePriority(CreateRule createRuleObj, char * priority) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        priority: char *

    """
    return _iotkit.setRulePriority(createRuleObj, priority)

def setRuleType(createRuleObj, type):
    """
    setRuleType(CreateRule createRuleObj, char * type) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        type: char *

    """
    return _iotkit.setRuleType(createRuleObj, type)

def setRuleStatus(createRuleObj, status):
    """
    setRuleStatus(CreateRule createRuleObj, char * status) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        status: char *

    """
    return _iotkit.setRuleStatus(createRuleObj, status)

def setRuleResetType(createRuleObj, resetType):
    """
    setRuleResetType(CreateRule createRuleObj, char * resetType) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        resetType: char *

    """
    return _iotkit.setRuleResetType(createRuleObj, resetType)

def createRuleActionObject():
    """createRuleActionObject() -> CreateRuleActions"""
    return _iotkit.createRuleActionObject()

def setRuleActionObjType(createRuleActionObj, type):
    """
    setRuleActionObjType(CreateRuleActions createRuleActionObj, char * type) -> CreateRuleActions

    Parameters:
        createRuleActionObj: CreateRuleActions *
        type: char *

    """
    return _iotkit.setRuleActionObjType(createRuleActionObj, type)

def addRuleActionObjTarget(createRuleActionObj, target):
    """
    addRuleActionObjTarget(CreateRuleActions createRuleActionObj, char * target) -> CreateRuleActions

    Parameters:
        createRuleActionObj: CreateRuleActions *
        target: char *

    """
    return _iotkit.addRuleActionObjTarget(createRuleActionObj, target)

def setRuleActions(createRuleObj, action):
    """
    setRuleActions(CreateRule createRuleObj, CreateRuleActions action) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        action: CreateRuleActions *

    """
    return _iotkit.setRuleActions(createRuleObj, action)

def addRulePopulationId(createRuleObj, populationId):
    """
    addRulePopulationId(CreateRule createRuleObj, char * populationId) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        populationId: char *

    """
    return _iotkit.addRulePopulationId(createRuleObj, populationId)

def setRulePopulationAttributes(createRuleObj, attributes):
    """
    setRulePopulationAttributes(CreateRule createRuleObj, char * attributes) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        attributes: char *

    """
    return _iotkit.setRulePopulationAttributes(createRuleObj, attributes)

def createRuleConditionValuesObject():
    """createRuleConditionValuesObject() -> CreateRuleConditionValues"""
    return _iotkit.createRuleConditionValuesObject()

def addConditionComponent(createRuleConditionValuesObj, keyName, keyValue):
    """
    addConditionComponent(CreateRuleConditionValues createRuleConditionValuesObj, char * keyName, char * keyValue) -> CreateRuleConditionValues

    Parameters:
        createRuleConditionValuesObj: CreateRuleConditionValues *
        keyName: char *
        keyValue: char *

    """
    return _iotkit.addConditionComponent(createRuleConditionValuesObj, keyName, keyValue)

def setConditionType(createRuleConditionValuesObj, type):
    """
    setConditionType(CreateRuleConditionValues createRuleConditionValuesObj, char * type) -> CreateRuleConditionValues

    Parameters:
        createRuleConditionValuesObj: CreateRuleConditionValues *
        type: char *

    """
    return _iotkit.setConditionType(createRuleConditionValuesObj, type)

def addConditionValues(createRuleConditionValuesObj, value):
    """
    addConditionValues(CreateRuleConditionValues createRuleConditionValuesObj, char * value) -> CreateRuleConditionValues

    Parameters:
        createRuleConditionValuesObj: CreateRuleConditionValues *
        value: char *

    """
    return _iotkit.addConditionValues(createRuleConditionValuesObj, value)

def setConditionOperator(createRuleConditionValuesObj, opname):
    """
    setConditionOperator(CreateRuleConditionValues createRuleConditionValuesObj, char * opname) -> CreateRuleConditionValues

    Parameters:
        createRuleConditionValuesObj: CreateRuleConditionValues *
        opname: char *

    """
    return _iotkit.setConditionOperator(createRuleConditionValuesObj, opname)

def setRuleConditionOp(createRuleObj, opname):
    """
    setRuleConditionOp(CreateRule createRuleObj, char * opname) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        opname: char *

    """
    return _iotkit.setRuleConditionOp(createRuleObj, opname)

def addRuleConditionValues(createRuleObj, createRuleConditionValuesObj):
    """
    addRuleConditionValues(CreateRule createRuleObj, CreateRuleConditionValues createRuleConditionValuesObj) -> CreateRule

    Parameters:
        createRuleObj: CreateRule *
        createRuleConditionValuesObj: CreateRuleConditionValues *

    """
    return _iotkit.addRuleConditionValues(createRuleObj, createRuleConditionValuesObj)

def createAnRule(createRuleObj):
    """
    createAnRule(CreateRule createRuleObj) -> char *

    Parameters:
        createRuleObj: CreateRule *

    """
    return _iotkit.createAnRule(createRuleObj)

def updateAnRule(createRuleObj, rule_id):
    """
    updateAnRule(CreateRule createRuleObj, char * rule_id) -> char *

    Parameters:
        createRuleObj: CreateRule *
        rule_id: char *

    """
    return _iotkit.updateAnRule(createRuleObj, rule_id)

def getListOfRules():
    """getListOfRules() -> char *"""
    return _iotkit.getListOfRules()

def getOneRuleInformation(rule_id):
    """
    getOneRuleInformation(char * rule_id) -> char *

    Parameters:
        rule_id: char *

    """
    return _iotkit.getOneRuleInformation(rule_id)

def createARuleAsDraft(rule_name):
    """
    createARuleAsDraft(char * rule_name) -> char *

    Parameters:
        rule_name: char *

    """
    return _iotkit.createARuleAsDraft(rule_name)

def updateStatusOfARule(rule_id, rule_status):
    """
    updateStatusOfARule(char * rule_id, char * rule_status) -> char *

    Parameters:
        rule_id: char *
        rule_status: char *

    """
    return _iotkit.updateStatusOfARule(rule_id, rule_status)

def deleteADraftRule(rule_id):
    """
    deleteADraftRule(char * rule_id) -> char *

    Parameters:
        rule_id: char *

    """
    return _iotkit.deleteADraftRule(rule_id)

def createAnUser(emailAddress, password, acceptTermsAndConditions):
    """
    createAnUser(char * emailAddress, char * password, bool acceptTermsAndConditions) -> char *

    Parameters:
        emailAddress: char *
        password: char *
        acceptTermsAndConditions: bool

    """
    return _iotkit.createAnUser(emailAddress, password, acceptTermsAndConditions)

def getUserInformation(userId):
    """
    getUserInformation(char * userId) -> char *

    Parameters:
        userId: char *

    """
    return _iotkit.getUserInformation(userId)

def updateUserAttributes(userId, attributes):
    """
    updateUserAttributes(char * userId, KeyValueParams attributes) -> char *

    Parameters:
        userId: char *
        attributes: KeyValueParams *

    """
    return _iotkit.updateUserAttributes(userId, attributes)

def acceptTermsAndConditions(userId, accept):
    """
    acceptTermsAndConditions(char * userId, bool accept) -> char *

    Parameters:
        userId: char *
        accept: bool

    """
    return _iotkit.acceptTermsAndConditions(userId, accept)

def deleteAUser(userId):
    """
    deleteAUser(char * userId) -> char *

    Parameters:
        userId: char *

    """
    return _iotkit.deleteAUser(userId)

def requestChangePassword(emailAddress):
    """
    requestChangePassword(char * emailAddress) -> char *

    Parameters:
        emailAddress: char *

    """
    return _iotkit.requestChangePassword(emailAddress)

def updateForgotPassword(token, new_password):
    """
    updateForgotPassword(char * token, char * new_password) -> char *

    Parameters:
        token: char *
        new_password: char *

    """
    return _iotkit.updateForgotPassword(token, new_password)

def changePassword(emailAddress, current_password, new_password):
    """
    changePassword(char * emailAddress, char * current_password, char * new_password) -> char *

    Parameters:
        emailAddress: char *
        current_password: char *
        new_password: char *

    """
    return _iotkit.changePassword(emailAddress, current_password, new_password)

_iotkit.DEBUG_swigconstant(_iotkit)
DEBUG = _iotkit.DEBUG

_iotkit.BODY_SIZE_MIN_swigconstant(_iotkit)
BODY_SIZE_MIN = _iotkit.BODY_SIZE_MIN

_iotkit.BODY_SIZE_MED_swigconstant(_iotkit)
BODY_SIZE_MED = _iotkit.BODY_SIZE_MED

_iotkit.BODY_SIZE_MAX_swigconstant(_iotkit)
BODY_SIZE_MAX = _iotkit.BODY_SIZE_MAX

_iotkit.HTTP_PROTOCOL_swigconstant(_iotkit)
HTTP_PROTOCOL = _iotkit.HTTP_PROTOCOL

_iotkit.HTTPS_PROTOCOL_swigconstant(_iotkit)
HTTPS_PROTOCOL = _iotkit.HTTPS_PROTOCOL

_iotkit.HEADER_CONTENT_TYPE_NAME_swigconstant(_iotkit)
HEADER_CONTENT_TYPE_NAME = _iotkit.HEADER_CONTENT_TYPE_NAME

_iotkit.HEADER_CONTENT_TYPE_JSON_swigconstant(_iotkit)
HEADER_CONTENT_TYPE_JSON = _iotkit.HEADER_CONTENT_TYPE_JSON

_iotkit.HEADER_AUTHORIZATION_swigconstant(_iotkit)
HEADER_AUTHORIZATION = _iotkit.HEADER_AUTHORIZATION

_iotkit.HEADER_AUTHORIZATION_BEARER_swigconstant(_iotkit)
HEADER_AUTHORIZATION_BEARER = _iotkit.HEADER_AUTHORIZATION_BEARER

_iotkit.CURRENT_DIR_swigconstant(_iotkit)
CURRENT_DIR = _iotkit.CURRENT_DIR

_iotkit.DEFAULT_CONFIG_DIR_swigconstant(_iotkit)
DEFAULT_CONFIG_DIR = _iotkit.DEFAULT_CONFIG_DIR

_iotkit.CONFIGURATION_FILE_NAME_swigconstant(_iotkit)
CONFIGURATION_FILE_NAME = _iotkit.CONFIGURATION_FILE_NAME

_iotkit.AUTHORIZATION_FILE_NAME_swigconstant(_iotkit)
AUTHORIZATION_FILE_NAME = _iotkit.AUTHORIZATION_FILE_NAME

_iotkit.DEVICE_CONFIG_FILE_NAME_swigconstant(_iotkit)
DEVICE_CONFIG_FILE_NAME = _iotkit.DEVICE_CONFIG_FILE_NAME

_iotkit.SENSOR_LIST_FILE_NAME_swigconstant(_iotkit)
SENSOR_LIST_FILE_NAME = _iotkit.SENSOR_LIST_FILE_NAME
class SensorComp(_object):
    """Proxy of C++ _SensorComp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorComp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cid"] = _iotkit.SensorComp_cid_set
    __swig_getmethods__["cid"] = _iotkit.SensorComp_cid_get
    if _newclass:
        cid = _swig_property(_iotkit.SensorComp_cid_get, _iotkit.SensorComp_cid_set)
    __swig_setmethods__["name"] = _iotkit.SensorComp_name_set
    __swig_getmethods__["name"] = _iotkit.SensorComp_name_get
    if _newclass:
        name = _swig_property(_iotkit.SensorComp_name_get, _iotkit.SensorComp_name_set)
    __swig_setmethods__["type"] = _iotkit.SensorComp_type_set
    __swig_getmethods__["type"] = _iotkit.SensorComp_type_get
    if _newclass:
        type = _swig_property(_iotkit.SensorComp_type_get, _iotkit.SensorComp_type_set)
    __swig_setmethods__["next"] = _iotkit.SensorComp_next_set
    __swig_getmethods__["next"] = _iotkit.SensorComp_next_get
    if _newclass:
        next = _swig_property(_iotkit.SensorComp_next_get, _iotkit.SensorComp_next_set)

    def __init__(self):
        """__init__(_SensorComp self) -> SensorComp"""
        this = _iotkit.new_SensorComp()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_SensorComp
    __del__ = lambda self: None
SensorComp_swigregister = _iotkit.SensorComp_swigregister
SensorComp_swigregister(SensorComp)

class Configurations(_object):
    """Proxy of C++ _Configurations class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Configurations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Configurations, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isSecure"] = _iotkit.Configurations_isSecure_set
    __swig_getmethods__["isSecure"] = _iotkit.Configurations_isSecure_get
    if _newclass:
        isSecure = _swig_property(_iotkit.Configurations_isSecure_get, _iotkit.Configurations_isSecure_set)
    __swig_setmethods__["base_url"] = _iotkit.Configurations_base_url_set
    __swig_getmethods__["base_url"] = _iotkit.Configurations_base_url_get
    if _newclass:
        base_url = _swig_property(_iotkit.Configurations_base_url_get, _iotkit.Configurations_base_url_set)
    __swig_setmethods__["data_account_id"] = _iotkit.Configurations_data_account_id_set
    __swig_getmethods__["data_account_id"] = _iotkit.Configurations_data_account_id_get
    if _newclass:
        data_account_id = _swig_property(_iotkit.Configurations_data_account_id_get, _iotkit.Configurations_data_account_id_set)
    __swig_setmethods__["data_account_name"] = _iotkit.Configurations_data_account_name_set
    __swig_getmethods__["data_account_name"] = _iotkit.Configurations_data_account_name_get
    if _newclass:
        data_account_name = _swig_property(_iotkit.Configurations_data_account_name_get, _iotkit.Configurations_data_account_name_set)
    __swig_setmethods__["device_id"] = _iotkit.Configurations_device_id_set
    __swig_getmethods__["device_id"] = _iotkit.Configurations_device_id_get
    if _newclass:
        device_id = _swig_property(_iotkit.Configurations_device_id_get, _iotkit.Configurations_device_id_set)
    __swig_setmethods__["advanced_data_inquiry"] = _iotkit.Configurations_advanced_data_inquiry_set
    __swig_getmethods__["advanced_data_inquiry"] = _iotkit.Configurations_advanced_data_inquiry_get
    if _newclass:
        advanced_data_inquiry = _swig_property(_iotkit.Configurations_advanced_data_inquiry_get, _iotkit.Configurations_advanced_data_inquiry_set)
    __swig_setmethods__["aggregated_report_interface"] = _iotkit.Configurations_aggregated_report_interface_set
    __swig_getmethods__["aggregated_report_interface"] = _iotkit.Configurations_aggregated_report_interface_get
    if _newclass:
        aggregated_report_interface = _swig_property(_iotkit.Configurations_aggregated_report_interface_get, _iotkit.Configurations_aggregated_report_interface_set)
    __swig_setmethods__["create_an_account"] = _iotkit.Configurations_create_an_account_set
    __swig_getmethods__["create_an_account"] = _iotkit.Configurations_create_an_account_get
    if _newclass:
        create_an_account = _swig_property(_iotkit.Configurations_create_an_account_get, _iotkit.Configurations_create_an_account_set)
    __swig_setmethods__["get_account_information"] = _iotkit.Configurations_get_account_information_set
    __swig_getmethods__["get_account_information"] = _iotkit.Configurations_get_account_information_get
    if _newclass:
        get_account_information = _swig_property(_iotkit.Configurations_get_account_information_get, _iotkit.Configurations_get_account_information_set)
    __swig_setmethods__["get_account_activation_code"] = _iotkit.Configurations_get_account_activation_code_set
    __swig_getmethods__["get_account_activation_code"] = _iotkit.Configurations_get_account_activation_code_get
    if _newclass:
        get_account_activation_code = _swig_property(_iotkit.Configurations_get_account_activation_code_get, _iotkit.Configurations_get_account_activation_code_set)
    __swig_setmethods__["renew_account_activation"] = _iotkit.Configurations_renew_account_activation_set
    __swig_getmethods__["renew_account_activation"] = _iotkit.Configurations_renew_account_activation_get
    if _newclass:
        renew_account_activation = _swig_property(_iotkit.Configurations_renew_account_activation_get, _iotkit.Configurations_renew_account_activation_set)
    __swig_setmethods__["update_an_account_name"] = _iotkit.Configurations_update_an_account_name_set
    __swig_getmethods__["update_an_account_name"] = _iotkit.Configurations_update_an_account_name_get
    if _newclass:
        update_an_account_name = _swig_property(_iotkit.Configurations_update_an_account_name_get, _iotkit.Configurations_update_an_account_name_set)
    __swig_setmethods__["delete_an_account_name"] = _iotkit.Configurations_delete_an_account_name_set
    __swig_getmethods__["delete_an_account_name"] = _iotkit.Configurations_delete_an_account_name_get
    if _newclass:
        delete_an_account_name = _swig_property(_iotkit.Configurations_delete_an_account_name_get, _iotkit.Configurations_delete_an_account_name_set)
    __swig_setmethods__["add_an_user_to_account"] = _iotkit.Configurations_add_an_user_to_account_set
    __swig_getmethods__["add_an_user_to_account"] = _iotkit.Configurations_add_an_user_to_account_get
    if _newclass:
        add_an_user_to_account = _swig_property(_iotkit.Configurations_add_an_user_to_account_get, _iotkit.Configurations_add_an_user_to_account_set)
    __swig_setmethods__["get_user_associated_with_account"] = _iotkit.Configurations_get_user_associated_with_account_set
    __swig_getmethods__["get_user_associated_with_account"] = _iotkit.Configurations_get_user_associated_with_account_get
    if _newclass:
        get_user_associated_with_account = _swig_property(_iotkit.Configurations_get_user_associated_with_account_get, _iotkit.Configurations_get_user_associated_with_account_set)
    __swig_setmethods__["update_user_associated_with_account"] = _iotkit.Configurations_update_user_associated_with_account_set
    __swig_getmethods__["update_user_associated_with_account"] = _iotkit.Configurations_update_user_associated_with_account_get
    if _newclass:
        update_user_associated_with_account = _swig_property(_iotkit.Configurations_update_user_associated_with_account_get, _iotkit.Configurations_update_user_associated_with_account_set)
    __swig_setmethods__["authorization_key"] = _iotkit.Configurations_authorization_key_set
    __swig_getmethods__["authorization_key"] = _iotkit.Configurations_authorization_key_get
    if _newclass:
        authorization_key = _swig_property(_iotkit.Configurations_authorization_key_get, _iotkit.Configurations_authorization_key_set)
    __swig_setmethods__["authorization_key_expiry"] = _iotkit.Configurations_authorization_key_expiry_set
    __swig_getmethods__["authorization_key_expiry"] = _iotkit.Configurations_authorization_key_expiry_get
    if _newclass:
        authorization_key_expiry = _swig_property(_iotkit.Configurations_authorization_key_expiry_get, _iotkit.Configurations_authorization_key_expiry_set)
    __swig_setmethods__["user_account_id"] = _iotkit.Configurations_user_account_id_set
    __swig_getmethods__["user_account_id"] = _iotkit.Configurations_user_account_id_get
    if _newclass:
        user_account_id = _swig_property(_iotkit.Configurations_user_account_id_get, _iotkit.Configurations_user_account_id_set)
    __swig_setmethods__["new_auth_token"] = _iotkit.Configurations_new_auth_token_set
    __swig_getmethods__["new_auth_token"] = _iotkit.Configurations_new_auth_token_get
    if _newclass:
        new_auth_token = _swig_property(_iotkit.Configurations_new_auth_token_get, _iotkit.Configurations_new_auth_token_set)
    __swig_setmethods__["auth_token_info"] = _iotkit.Configurations_auth_token_info_set
    __swig_getmethods__["auth_token_info"] = _iotkit.Configurations_auth_token_info_get
    if _newclass:
        auth_token_info = _swig_property(_iotkit.Configurations_auth_token_info_get, _iotkit.Configurations_auth_token_info_set)
    __swig_setmethods__["me_info"] = _iotkit.Configurations_me_info_set
    __swig_getmethods__["me_info"] = _iotkit.Configurations_me_info_get
    if _newclass:
        me_info = _swig_property(_iotkit.Configurations_me_info_get, _iotkit.Configurations_me_info_set)
    __swig_setmethods__["create_new_alert"] = _iotkit.Configurations_create_new_alert_set
    __swig_getmethods__["create_new_alert"] = _iotkit.Configurations_create_new_alert_get
    if _newclass:
        create_new_alert = _swig_property(_iotkit.Configurations_create_new_alert_get, _iotkit.Configurations_create_new_alert_set)
    __swig_setmethods__["get_list_of_alerts"] = _iotkit.Configurations_get_list_of_alerts_set
    __swig_getmethods__["get_list_of_alerts"] = _iotkit.Configurations_get_list_of_alerts_get
    if _newclass:
        get_list_of_alerts = _swig_property(_iotkit.Configurations_get_list_of_alerts_get, _iotkit.Configurations_get_list_of_alerts_set)
    __swig_setmethods__["get_alert_information"] = _iotkit.Configurations_get_alert_information_set
    __swig_getmethods__["get_alert_information"] = _iotkit.Configurations_get_alert_information_get
    if _newclass:
        get_alert_information = _swig_property(_iotkit.Configurations_get_alert_information_get, _iotkit.Configurations_get_alert_information_set)
    __swig_setmethods__["reset_alert"] = _iotkit.Configurations_reset_alert_set
    __swig_getmethods__["reset_alert"] = _iotkit.Configurations_reset_alert_get
    if _newclass:
        reset_alert = _swig_property(_iotkit.Configurations_reset_alert_get, _iotkit.Configurations_reset_alert_set)
    __swig_setmethods__["update_alert_status"] = _iotkit.Configurations_update_alert_status_set
    __swig_getmethods__["update_alert_status"] = _iotkit.Configurations_update_alert_status_get
    if _newclass:
        update_alert_status = _swig_property(_iotkit.Configurations_update_alert_status_get, _iotkit.Configurations_update_alert_status_set)
    __swig_setmethods__["add_comment_to_alert"] = _iotkit.Configurations_add_comment_to_alert_set
    __swig_getmethods__["add_comment_to_alert"] = _iotkit.Configurations_add_comment_to_alert_get
    if _newclass:
        add_comment_to_alert = _swig_property(_iotkit.Configurations_add_comment_to_alert_get, _iotkit.Configurations_add_comment_to_alert_set)
    __swig_setmethods__["list_components"] = _iotkit.Configurations_list_components_set
    __swig_getmethods__["list_components"] = _iotkit.Configurations_list_components_get
    if _newclass:
        list_components = _swig_property(_iotkit.Configurations_list_components_get, _iotkit.Configurations_list_components_set)
    __swig_setmethods__["get_component_details"] = _iotkit.Configurations_get_component_details_set
    __swig_getmethods__["get_component_details"] = _iotkit.Configurations_get_component_details_get
    if _newclass:
        get_component_details = _swig_property(_iotkit.Configurations_get_component_details_get, _iotkit.Configurations_get_component_details_set)
    __swig_setmethods__["create_an_cmp_catalog"] = _iotkit.Configurations_create_an_cmp_catalog_set
    __swig_getmethods__["create_an_cmp_catalog"] = _iotkit.Configurations_create_an_cmp_catalog_get
    if _newclass:
        create_an_cmp_catalog = _swig_property(_iotkit.Configurations_create_an_cmp_catalog_get, _iotkit.Configurations_create_an_cmp_catalog_set)
    __swig_setmethods__["update_an_cmp_catalog"] = _iotkit.Configurations_update_an_cmp_catalog_set
    __swig_getmethods__["update_an_cmp_catalog"] = _iotkit.Configurations_update_an_cmp_catalog_get
    if _newclass:
        update_an_cmp_catalog = _swig_property(_iotkit.Configurations_update_an_cmp_catalog_get, _iotkit.Configurations_update_an_cmp_catalog_set)
    __swig_setmethods__["list_all_devices"] = _iotkit.Configurations_list_all_devices_set
    __swig_getmethods__["list_all_devices"] = _iotkit.Configurations_list_all_devices_get
    if _newclass:
        list_all_devices = _swig_property(_iotkit.Configurations_list_all_devices_get, _iotkit.Configurations_list_all_devices_set)
    __swig_setmethods__["get_device_info"] = _iotkit.Configurations_get_device_info_set
    __swig_getmethods__["get_device_info"] = _iotkit.Configurations_get_device_info_get
    if _newclass:
        get_device_info = _swig_property(_iotkit.Configurations_get_device_info_get, _iotkit.Configurations_get_device_info_set)
    __swig_setmethods__["get_my_device_info"] = _iotkit.Configurations_get_my_device_info_set
    __swig_getmethods__["get_my_device_info"] = _iotkit.Configurations_get_my_device_info_get
    if _newclass:
        get_my_device_info = _swig_property(_iotkit.Configurations_get_my_device_info_get, _iotkit.Configurations_get_my_device_info_set)
    __swig_setmethods__["create_a_device"] = _iotkit.Configurations_create_a_device_set
    __swig_getmethods__["create_a_device"] = _iotkit.Configurations_create_a_device_get
    if _newclass:
        create_a_device = _swig_property(_iotkit.Configurations_create_a_device_get, _iotkit.Configurations_create_a_device_set)
    __swig_setmethods__["update_a_device"] = _iotkit.Configurations_update_a_device_set
    __swig_getmethods__["update_a_device"] = _iotkit.Configurations_update_a_device_get
    if _newclass:
        update_a_device = _swig_property(_iotkit.Configurations_update_a_device_get, _iotkit.Configurations_update_a_device_set)
    __swig_setmethods__["activate_a_device"] = _iotkit.Configurations_activate_a_device_set
    __swig_getmethods__["activate_a_device"] = _iotkit.Configurations_activate_a_device_get
    if _newclass:
        activate_a_device = _swig_property(_iotkit.Configurations_activate_a_device_get, _iotkit.Configurations_activate_a_device_set)
    __swig_setmethods__["activate_a_device2"] = _iotkit.Configurations_activate_a_device2_set
    __swig_getmethods__["activate_a_device2"] = _iotkit.Configurations_activate_a_device2_get
    if _newclass:
        activate_a_device2 = _swig_property(_iotkit.Configurations_activate_a_device2_get, _iotkit.Configurations_activate_a_device2_set)
    __swig_setmethods__["delete_a_device"] = _iotkit.Configurations_delete_a_device_set
    __swig_getmethods__["delete_a_device"] = _iotkit.Configurations_delete_a_device_get
    if _newclass:
        delete_a_device = _swig_property(_iotkit.Configurations_delete_a_device_get, _iotkit.Configurations_delete_a_device_set)
    __swig_setmethods__["add_a_component"] = _iotkit.Configurations_add_a_component_set
    __swig_getmethods__["add_a_component"] = _iotkit.Configurations_add_a_component_get
    if _newclass:
        add_a_component = _swig_property(_iotkit.Configurations_add_a_component_get, _iotkit.Configurations_add_a_component_set)
    __swig_setmethods__["delete_a_component"] = _iotkit.Configurations_delete_a_component_set
    __swig_getmethods__["delete_a_component"] = _iotkit.Configurations_delete_a_component_get
    if _newclass:
        delete_a_component = _swig_property(_iotkit.Configurations_delete_a_component_get, _iotkit.Configurations_delete_a_component_set)
    __swig_setmethods__["deviceToken"] = _iotkit.Configurations_deviceToken_set
    __swig_getmethods__["deviceToken"] = _iotkit.Configurations_deviceToken_get
    if _newclass:
        deviceToken = _swig_property(_iotkit.Configurations_deviceToken_get, _iotkit.Configurations_deviceToken_set)
    __swig_setmethods__["list_all_tags_for_devices"] = _iotkit.Configurations_list_all_tags_for_devices_set
    __swig_getmethods__["list_all_tags_for_devices"] = _iotkit.Configurations_list_all_tags_for_devices_get
    if _newclass:
        list_all_tags_for_devices = _swig_property(_iotkit.Configurations_list_all_tags_for_devices_get, _iotkit.Configurations_list_all_tags_for_devices_set)
    __swig_setmethods__["list_all_attributes_for_devices"] = _iotkit.Configurations_list_all_attributes_for_devices_set
    __swig_getmethods__["list_all_attributes_for_devices"] = _iotkit.Configurations_list_all_attributes_for_devices_get
    if _newclass:
        list_all_attributes_for_devices = _swig_property(_iotkit.Configurations_list_all_attributes_for_devices_get, _iotkit.Configurations_list_all_attributes_for_devices_set)
    __swig_setmethods__["get_list_of_invitation"] = _iotkit.Configurations_get_list_of_invitation_set
    __swig_getmethods__["get_list_of_invitation"] = _iotkit.Configurations_get_list_of_invitation_get
    if _newclass:
        get_list_of_invitation = _swig_property(_iotkit.Configurations_get_list_of_invitation_get, _iotkit.Configurations_get_list_of_invitation_set)
    __swig_setmethods__["get_invitation_list_send_to_specific_user"] = _iotkit.Configurations_get_invitation_list_send_to_specific_user_set
    __swig_getmethods__["get_invitation_list_send_to_specific_user"] = _iotkit.Configurations_get_invitation_list_send_to_specific_user_get
    if _newclass:
        get_invitation_list_send_to_specific_user = _swig_property(_iotkit.Configurations_get_invitation_list_send_to_specific_user_get, _iotkit.Configurations_get_invitation_list_send_to_specific_user_set)
    __swig_setmethods__["create_invitation"] = _iotkit.Configurations_create_invitation_set
    __swig_getmethods__["create_invitation"] = _iotkit.Configurations_create_invitation_get
    if _newclass:
        create_invitation = _swig_property(_iotkit.Configurations_create_invitation_get, _iotkit.Configurations_create_invitation_set)
    __swig_setmethods__["delete_invitations"] = _iotkit.Configurations_delete_invitations_set
    __swig_getmethods__["delete_invitations"] = _iotkit.Configurations_delete_invitations_get
    if _newclass:
        delete_invitations = _swig_property(_iotkit.Configurations_delete_invitations_get, _iotkit.Configurations_delete_invitations_set)
    __swig_setmethods__["submit_data"] = _iotkit.Configurations_submit_data_set
    __swig_getmethods__["submit_data"] = _iotkit.Configurations_submit_data_get
    if _newclass:
        submit_data = _swig_property(_iotkit.Configurations_submit_data_get, _iotkit.Configurations_submit_data_set)
    __swig_setmethods__["retrieve_data"] = _iotkit.Configurations_retrieve_data_set
    __swig_getmethods__["retrieve_data"] = _iotkit.Configurations_retrieve_data_get
    if _newclass:
        retrieve_data = _swig_property(_iotkit.Configurations_retrieve_data_get, _iotkit.Configurations_retrieve_data_set)
    __swig_setmethods__["create_a_rule"] = _iotkit.Configurations_create_a_rule_set
    __swig_getmethods__["create_a_rule"] = _iotkit.Configurations_create_a_rule_get
    if _newclass:
        create_a_rule = _swig_property(_iotkit.Configurations_create_a_rule_get, _iotkit.Configurations_create_a_rule_set)
    __swig_setmethods__["update_a_rule"] = _iotkit.Configurations_update_a_rule_set
    __swig_getmethods__["update_a_rule"] = _iotkit.Configurations_update_a_rule_get
    if _newclass:
        update_a_rule = _swig_property(_iotkit.Configurations_update_a_rule_get, _iotkit.Configurations_update_a_rule_set)
    __swig_setmethods__["get_list_of_rules"] = _iotkit.Configurations_get_list_of_rules_set
    __swig_getmethods__["get_list_of_rules"] = _iotkit.Configurations_get_list_of_rules_get
    if _newclass:
        get_list_of_rules = _swig_property(_iotkit.Configurations_get_list_of_rules_get, _iotkit.Configurations_get_list_of_rules_set)
    __swig_setmethods__["get_one_rule_info"] = _iotkit.Configurations_get_one_rule_info_set
    __swig_getmethods__["get_one_rule_info"] = _iotkit.Configurations_get_one_rule_info_get
    if _newclass:
        get_one_rule_info = _swig_property(_iotkit.Configurations_get_one_rule_info_get, _iotkit.Configurations_get_one_rule_info_set)
    __swig_setmethods__["create_a_rule_as_draft"] = _iotkit.Configurations_create_a_rule_as_draft_set
    __swig_getmethods__["create_a_rule_as_draft"] = _iotkit.Configurations_create_a_rule_as_draft_get
    if _newclass:
        create_a_rule_as_draft = _swig_property(_iotkit.Configurations_create_a_rule_as_draft_get, _iotkit.Configurations_create_a_rule_as_draft_set)
    __swig_setmethods__["update_status_of_a_rule"] = _iotkit.Configurations_update_status_of_a_rule_set
    __swig_getmethods__["update_status_of_a_rule"] = _iotkit.Configurations_update_status_of_a_rule_get
    if _newclass:
        update_status_of_a_rule = _swig_property(_iotkit.Configurations_update_status_of_a_rule_get, _iotkit.Configurations_update_status_of_a_rule_set)
    __swig_setmethods__["delete_a_draft_rule"] = _iotkit.Configurations_delete_a_draft_rule_set
    __swig_getmethods__["delete_a_draft_rule"] = _iotkit.Configurations_delete_a_draft_rule_get
    if _newclass:
        delete_a_draft_rule = _swig_property(_iotkit.Configurations_delete_a_draft_rule_get, _iotkit.Configurations_delete_a_draft_rule_set)
    __swig_setmethods__["create_a_user"] = _iotkit.Configurations_create_a_user_set
    __swig_getmethods__["create_a_user"] = _iotkit.Configurations_create_a_user_get
    if _newclass:
        create_a_user = _swig_property(_iotkit.Configurations_create_a_user_get, _iotkit.Configurations_create_a_user_set)
    __swig_setmethods__["get_user_information"] = _iotkit.Configurations_get_user_information_set
    __swig_getmethods__["get_user_information"] = _iotkit.Configurations_get_user_information_get
    if _newclass:
        get_user_information = _swig_property(_iotkit.Configurations_get_user_information_get, _iotkit.Configurations_get_user_information_set)
    __swig_setmethods__["update_user_attributes"] = _iotkit.Configurations_update_user_attributes_set
    __swig_getmethods__["update_user_attributes"] = _iotkit.Configurations_update_user_attributes_get
    if _newclass:
        update_user_attributes = _swig_property(_iotkit.Configurations_update_user_attributes_get, _iotkit.Configurations_update_user_attributes_set)
    __swig_setmethods__["accept_terms_and_conditions"] = _iotkit.Configurations_accept_terms_and_conditions_set
    __swig_getmethods__["accept_terms_and_conditions"] = _iotkit.Configurations_accept_terms_and_conditions_get
    if _newclass:
        accept_terms_and_conditions = _swig_property(_iotkit.Configurations_accept_terms_and_conditions_get, _iotkit.Configurations_accept_terms_and_conditions_set)
    __swig_setmethods__["delete_a_user"] = _iotkit.Configurations_delete_a_user_set
    __swig_getmethods__["delete_a_user"] = _iotkit.Configurations_delete_a_user_get
    if _newclass:
        delete_a_user = _swig_property(_iotkit.Configurations_delete_a_user_get, _iotkit.Configurations_delete_a_user_set)
    __swig_setmethods__["request_change_password"] = _iotkit.Configurations_request_change_password_set
    __swig_getmethods__["request_change_password"] = _iotkit.Configurations_request_change_password_get
    if _newclass:
        request_change_password = _swig_property(_iotkit.Configurations_request_change_password_get, _iotkit.Configurations_request_change_password_set)
    __swig_setmethods__["change_password"] = _iotkit.Configurations_change_password_set
    __swig_getmethods__["change_password"] = _iotkit.Configurations_change_password_get
    if _newclass:
        change_password = _swig_property(_iotkit.Configurations_change_password_get, _iotkit.Configurations_change_password_set)
    __swig_setmethods__["store_path"] = _iotkit.Configurations_store_path_set
    __swig_getmethods__["store_path"] = _iotkit.Configurations_store_path_get
    if _newclass:
        store_path = _swig_property(_iotkit.Configurations_store_path_get, _iotkit.Configurations_store_path_set)

    def __init__(self):
        """__init__(_Configurations self) -> Configurations"""
        this = _iotkit.new_Configurations()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_Configurations
    __del__ = lambda self: None
Configurations_swigregister = _iotkit.Configurations_swigregister
Configurations_swigregister(Configurations)

class StringList(_object):
    """Proxy of C++ _StringList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _iotkit.StringList_data_set
    __swig_getmethods__["data"] = _iotkit.StringList_data_get
    if _newclass:
        data = _swig_property(_iotkit.StringList_data_get, _iotkit.StringList_data_set)
    __swig_setmethods__["next"] = _iotkit.StringList_next_set
    __swig_getmethods__["next"] = _iotkit.StringList_next_get
    if _newclass:
        next = _swig_property(_iotkit.StringList_next_get, _iotkit.StringList_next_set)

    def __init__(self):
        """__init__(_StringList self) -> StringList"""
        this = _iotkit.new_StringList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_StringList
    __del__ = lambda self: None
StringList_swigregister = _iotkit.StringList_swigregister
StringList_swigregister(StringList)

class KeyValueParams(_object):
    """Proxy of C++ _KeyValueParams class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyValueParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyValueParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _iotkit.KeyValueParams_name_set
    __swig_getmethods__["name"] = _iotkit.KeyValueParams_name_get
    if _newclass:
        name = _swig_property(_iotkit.KeyValueParams_name_get, _iotkit.KeyValueParams_name_set)
    __swig_setmethods__["value"] = _iotkit.KeyValueParams_value_set
    __swig_getmethods__["value"] = _iotkit.KeyValueParams_value_get
    if _newclass:
        value = _swig_property(_iotkit.KeyValueParams_value_get, _iotkit.KeyValueParams_value_set)
    __swig_setmethods__["next"] = _iotkit.KeyValueParams_next_set
    __swig_getmethods__["next"] = _iotkit.KeyValueParams_next_get
    if _newclass:
        next = _swig_property(_iotkit.KeyValueParams_next_get, _iotkit.KeyValueParams_next_set)

    def __init__(self):
        """__init__(_KeyValueParams self) -> KeyValueParams"""
        this = _iotkit.new_KeyValueParams()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_KeyValueParams
    __del__ = lambda self: None
KeyValueParams_swigregister = _iotkit.KeyValueParams_swigregister
KeyValueParams_swigregister(KeyValueParams)

class AttributeFilter(_object):
    """Proxy of C++ _AttributeFilter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeFilter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filterName"] = _iotkit.AttributeFilter_filterName_set
    __swig_getmethods__["filterName"] = _iotkit.AttributeFilter_filterName_get
    if _newclass:
        filterName = _swig_property(_iotkit.AttributeFilter_filterName_get, _iotkit.AttributeFilter_filterName_set)
    __swig_setmethods__["filterValues"] = _iotkit.AttributeFilter_filterValues_set
    __swig_getmethods__["filterValues"] = _iotkit.AttributeFilter_filterValues_get
    if _newclass:
        filterValues = _swig_property(_iotkit.AttributeFilter_filterValues_get, _iotkit.AttributeFilter_filterValues_set)
    __swig_setmethods__["next"] = _iotkit.AttributeFilter_next_set
    __swig_getmethods__["next"] = _iotkit.AttributeFilter_next_get
    if _newclass:
        next = _swig_property(_iotkit.AttributeFilter_next_get, _iotkit.AttributeFilter_next_set)

    def __init__(self):
        """__init__(_AttributeFilter self) -> AttributeFilter"""
        this = _iotkit.new_AttributeFilter()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_AttributeFilter
    __del__ = lambda self: None
AttributeFilter_swigregister = _iotkit.AttributeFilter_swigregister
AttributeFilter_swigregister(AttributeFilter)

class AttributeFilterList(_object):
    """Proxy of C++ _AttributeFilterList class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeFilterList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeFilterList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filterData"] = _iotkit.AttributeFilterList_filterData_set
    __swig_getmethods__["filterData"] = _iotkit.AttributeFilterList_filterData_get
    if _newclass:
        filterData = _swig_property(_iotkit.AttributeFilterList_filterData_get, _iotkit.AttributeFilterList_filterData_set)
    __swig_setmethods__["next"] = _iotkit.AttributeFilterList_next_set
    __swig_getmethods__["next"] = _iotkit.AttributeFilterList_next_get
    if _newclass:
        next = _swig_property(_iotkit.AttributeFilterList_next_get, _iotkit.AttributeFilterList_next_set)

    def __init__(self):
        """__init__(_AttributeFilterList self) -> AttributeFilterList"""
        this = _iotkit.new_AttributeFilterList()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_AttributeFilterList
    __del__ = lambda self: None
AttributeFilterList_swigregister = _iotkit.AttributeFilterList_swigregister
AttributeFilterList_swigregister(AttributeFilterList)


def parseConfiguration(config_file_path):
    """
    parseConfiguration(char * config_file_path)

    Parameters:
        config_file_path: char *

    """
    return _iotkit.parseConfiguration(config_file_path)

def prepareUrl(full_url, url_prepend, url_append, urlParams):
    """
    prepareUrl(char ** full_url, char * url_prepend, char * url_append, KeyValueParams urlParams) -> bool

    Parameters:
        full_url: char **
        url_prepend: char *
        url_append: char *
        urlParams: KeyValueParams *

    """
    return _iotkit.prepareUrl(full_url, url_prepend, url_append, urlParams)

def getConfigAuthorizationToken():
    """getConfigAuthorizationToken() -> char *"""
    return _iotkit.getConfigAuthorizationToken()

def iotkit_get_version():
    """iotkit_get_version() -> char *"""
    return _iotkit.iotkit_get_version()

def iotkit_init():
    """iotkit_init()"""
    return _iotkit.iotkit_init()

def iotkit_cleanup():
    """iotkit_cleanup()"""
    return _iotkit.iotkit_cleanup()

def createKeyValueParams(key, value):
    """
    createKeyValueParams(char * key, char * value) -> KeyValueParams

    Parameters:
        key: char *
        value: char *

    """
    return _iotkit.createKeyValueParams(key, value)

def addKeyValueParams(params, key, value):
    """
    addKeyValueParams(KeyValueParams params, char * key, char * value)

    Parameters:
        params: KeyValueParams *
        key: char *
        value: char *

    """
    return _iotkit.addKeyValueParams(params, key, value)

def createHttpResponseJson(response):
    """
    createHttpResponseJson(HttpResponse response) -> char *

    Parameters:
        response: HttpResponse *

    """
    return _iotkit.createHttpResponseJson(response)
class putData(_object):
    """Proxy of C++ putData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, putData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, putData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _iotkit.putData_data_set
    __swig_getmethods__["data"] = _iotkit.putData_data_get
    if _newclass:
        data = _swig_property(_iotkit.putData_data_get, _iotkit.putData_data_set)
    __swig_setmethods__["len"] = _iotkit.putData_len_set
    __swig_getmethods__["len"] = _iotkit.putData_len_get
    if _newclass:
        len = _swig_property(_iotkit.putData_len_get, _iotkit.putData_len_set)

    def __init__(self):
        """__init__(putData self) -> putData"""
        this = _iotkit.new_putData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_putData
    __del__ = lambda self: None
putData_swigregister = _iotkit.putData_swigregister
putData_swigregister(putData)
cvar = _iotkit.cvar

class HttpResponse(_object):
    """Proxy of C++ _HttpResponse class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _iotkit.HttpResponse_code_set
    __swig_getmethods__["code"] = _iotkit.HttpResponse_code_get
    if _newclass:
        code = _swig_property(_iotkit.HttpResponse_code_get, _iotkit.HttpResponse_code_set)
    __swig_setmethods__["data"] = _iotkit.HttpResponse_data_set
    __swig_getmethods__["data"] = _iotkit.HttpResponse_data_get
    if _newclass:
        data = _swig_property(_iotkit.HttpResponse_data_get, _iotkit.HttpResponse_data_set)

    def __init__(self):
        """__init__(_HttpResponse self) -> HttpResponse"""
        this = _iotkit.new_HttpResponse()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_HttpResponse
    __del__ = lambda self: None
HttpResponse_swigregister = _iotkit.HttpResponse_swigregister
HttpResponse_swigregister(HttpResponse)


def isJsonBooleanFalse(item):
    """
    isJsonBooleanFalse(cJSON item) -> bool

    Parameters:
        item: cJSON *

    """
    return _iotkit.isJsonBooleanFalse(item)

def isJsonBooleanTrue(item):
    """
    isJsonBooleanTrue(cJSON item) -> bool

    Parameters:
        item: cJSON *

    """
    return _iotkit.isJsonBooleanTrue(item)

def isJsonNull(item):
    """
    isJsonNull(cJSON item) -> bool

    Parameters:
        item: cJSON *

    """
    return _iotkit.isJsonNull(item)

def isJsonString(item):
    """
    isJsonString(cJSON item) -> bool

    Parameters:
        item: cJSON *

    """
    return _iotkit.isJsonString(item)

def isJsonNumber(item):
    """
    isJsonNumber(cJSON item) -> bool

    Parameters:
        item: cJSON *

    """
    return _iotkit.isJsonNumber(item)

def isJsonObject(item):
    """
    isJsonObject(cJSON item) -> bool

    Parameters:
        item: cJSON *

    """
    return _iotkit.isJsonObject(item)

def isJsonArray(item):
    """
    isJsonArray(cJSON item) -> bool

    Parameters:
        item: cJSON *

    """
    return _iotkit.isJsonArray(item)

_iotkit.cJSON_False_swigconstant(_iotkit)
cJSON_False = _iotkit.cJSON_False

_iotkit.cJSON_True_swigconstant(_iotkit)
cJSON_True = _iotkit.cJSON_True

_iotkit.cJSON_NULL_swigconstant(_iotkit)
cJSON_NULL = _iotkit.cJSON_NULL

_iotkit.cJSON_Number_swigconstant(_iotkit)
cJSON_Number = _iotkit.cJSON_Number

_iotkit.cJSON_String_swigconstant(_iotkit)
cJSON_String = _iotkit.cJSON_String

_iotkit.cJSON_Array_swigconstant(_iotkit)
cJSON_Array = _iotkit.cJSON_Array

_iotkit.cJSON_Object_swigconstant(_iotkit)
cJSON_Object = _iotkit.cJSON_Object

_iotkit.cJSON_IsReference_swigconstant(_iotkit)
cJSON_IsReference = _iotkit.cJSON_IsReference
class cJSON(_object):
    """Proxy of C++ cJSON class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cJSON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cJSON, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _iotkit.cJSON_next_set
    __swig_getmethods__["next"] = _iotkit.cJSON_next_get
    if _newclass:
        next = _swig_property(_iotkit.cJSON_next_get, _iotkit.cJSON_next_set)
    __swig_setmethods__["prev"] = _iotkit.cJSON_prev_set
    __swig_getmethods__["prev"] = _iotkit.cJSON_prev_get
    if _newclass:
        prev = _swig_property(_iotkit.cJSON_prev_get, _iotkit.cJSON_prev_set)
    __swig_setmethods__["child"] = _iotkit.cJSON_child_set
    __swig_getmethods__["child"] = _iotkit.cJSON_child_get
    if _newclass:
        child = _swig_property(_iotkit.cJSON_child_get, _iotkit.cJSON_child_set)
    __swig_setmethods__["type"] = _iotkit.cJSON_type_set
    __swig_getmethods__["type"] = _iotkit.cJSON_type_get
    if _newclass:
        type = _swig_property(_iotkit.cJSON_type_get, _iotkit.cJSON_type_set)
    __swig_setmethods__["valuestring"] = _iotkit.cJSON_valuestring_set
    __swig_getmethods__["valuestring"] = _iotkit.cJSON_valuestring_get
    if _newclass:
        valuestring = _swig_property(_iotkit.cJSON_valuestring_get, _iotkit.cJSON_valuestring_set)
    __swig_setmethods__["valueint"] = _iotkit.cJSON_valueint_set
    __swig_getmethods__["valueint"] = _iotkit.cJSON_valueint_get
    if _newclass:
        valueint = _swig_property(_iotkit.cJSON_valueint_get, _iotkit.cJSON_valueint_set)
    __swig_setmethods__["valuedouble"] = _iotkit.cJSON_valuedouble_set
    __swig_getmethods__["valuedouble"] = _iotkit.cJSON_valuedouble_get
    if _newclass:
        valuedouble = _swig_property(_iotkit.cJSON_valuedouble_get, _iotkit.cJSON_valuedouble_set)
    __swig_setmethods__["string"] = _iotkit.cJSON_string_set
    __swig_getmethods__["string"] = _iotkit.cJSON_string_get
    if _newclass:
        string = _swig_property(_iotkit.cJSON_string_get, _iotkit.cJSON_string_set)

    def __init__(self):
        """__init__(cJSON self) -> cJSON"""
        this = _iotkit.new_cJSON()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_cJSON
    __del__ = lambda self: None
cJSON_swigregister = _iotkit.cJSON_swigregister
cJSON_swigregister(cJSON)

class cJSON_Hooks(_object):
    """Proxy of C++ cJSON_Hooks class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cJSON_Hooks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cJSON_Hooks, name)
    __repr__ = _swig_repr
    __swig_setmethods__["malloc_fn"] = _iotkit.cJSON_Hooks_malloc_fn_set
    __swig_getmethods__["malloc_fn"] = _iotkit.cJSON_Hooks_malloc_fn_get
    if _newclass:
        malloc_fn = _swig_property(_iotkit.cJSON_Hooks_malloc_fn_get, _iotkit.cJSON_Hooks_malloc_fn_set)
    __swig_setmethods__["free_fn"] = _iotkit.cJSON_Hooks_free_fn_set
    __swig_getmethods__["free_fn"] = _iotkit.cJSON_Hooks_free_fn_get
    if _newclass:
        free_fn = _swig_property(_iotkit.cJSON_Hooks_free_fn_get, _iotkit.cJSON_Hooks_free_fn_set)

    def __init__(self):
        """__init__(cJSON_Hooks self) -> cJSON_Hooks"""
        this = _iotkit.new_cJSON_Hooks()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _iotkit.delete_cJSON_Hooks
    __del__ = lambda self: None
cJSON_Hooks_swigregister = _iotkit.cJSON_Hooks_swigregister
cJSON_Hooks_swigregister(cJSON_Hooks)


def cJSON_InitHooks(hooks):
    """
    cJSON_InitHooks(cJSON_Hooks hooks)

    Parameters:
        hooks: cJSON_Hooks *

    """
    return _iotkit.cJSON_InitHooks(hooks)

def cJSON_Parse(value):
    """
    cJSON_Parse(char const * value) -> cJSON

    Parameters:
        value: char const *

    """
    return _iotkit.cJSON_Parse(value)

def cJSON_Print(item, indent):
    """
    cJSON_Print(cJSON item, int indent) -> char *

    Parameters:
        item: cJSON *
        indent: int

    """
    return _iotkit.cJSON_Print(item, indent)

def cJSON_PrintUnformatted(item):
    """
    cJSON_PrintUnformatted(cJSON item) -> char *

    Parameters:
        item: cJSON *

    """
    return _iotkit.cJSON_PrintUnformatted(item)

def cJSON_Delete(c):
    """
    cJSON_Delete(cJSON c)

    Parameters:
        c: cJSON *

    """
    return _iotkit.cJSON_Delete(c)

def cJSON_GetArraySize(array):
    """
    cJSON_GetArraySize(cJSON array) -> int

    Parameters:
        array: cJSON *

    """
    return _iotkit.cJSON_GetArraySize(array)

def cJSON_GetArrayItem(array, item):
    """
    cJSON_GetArrayItem(cJSON array, int item) -> cJSON

    Parameters:
        array: cJSON *
        item: int

    """
    return _iotkit.cJSON_GetArrayItem(array, item)

def cJSON_GetObjectItem(object, string):
    """
    cJSON_GetObjectItem(cJSON object, char const * string) -> cJSON

    Parameters:
        object: cJSON *
        string: char const *

    """
    return _iotkit.cJSON_GetObjectItem(object, string)

def cJSON_GetErrorPtr():
    """cJSON_GetErrorPtr() -> char const *"""
    return _iotkit.cJSON_GetErrorPtr()

def cJSON_CreateNull():
    """cJSON_CreateNull() -> cJSON"""
    return _iotkit.cJSON_CreateNull()

def cJSON_CreateTrue():
    """cJSON_CreateTrue() -> cJSON"""
    return _iotkit.cJSON_CreateTrue()

def cJSON_CreateFalse():
    """cJSON_CreateFalse() -> cJSON"""
    return _iotkit.cJSON_CreateFalse()

def cJSON_CreateBool(b):
    """
    cJSON_CreateBool(int b) -> cJSON

    Parameters:
        b: int

    """
    return _iotkit.cJSON_CreateBool(b)

def cJSON_CreateNumber(num):
    """
    cJSON_CreateNumber(double num) -> cJSON

    Parameters:
        num: double

    """
    return _iotkit.cJSON_CreateNumber(num)

def cJSON_CreateString(string):
    """
    cJSON_CreateString(char const * string) -> cJSON

    Parameters:
        string: char const *

    """
    return _iotkit.cJSON_CreateString(string)

def cJSON_CreateArray():
    """cJSON_CreateArray() -> cJSON"""
    return _iotkit.cJSON_CreateArray()

def cJSON_CreateObject():
    """cJSON_CreateObject() -> cJSON"""
    return _iotkit.cJSON_CreateObject()

def cJSON_CreateIntArray(numbers, count):
    """
    cJSON_CreateIntArray(int const * numbers, int count) -> cJSON

    Parameters:
        numbers: int const *
        count: int

    """
    return _iotkit.cJSON_CreateIntArray(numbers, count)

def cJSON_CreateFloatArray(numbers, count):
    """
    cJSON_CreateFloatArray(float const * numbers, int count) -> cJSON

    Parameters:
        numbers: float const *
        count: int

    """
    return _iotkit.cJSON_CreateFloatArray(numbers, count)

def cJSON_CreateDoubleArray(numbers, count):
    """
    cJSON_CreateDoubleArray(double const * numbers, int count) -> cJSON

    Parameters:
        numbers: double const *
        count: int

    """
    return _iotkit.cJSON_CreateDoubleArray(numbers, count)

def cJSON_CreateStringArray(strings, count):
    """
    cJSON_CreateStringArray(char const ** strings, int count) -> cJSON

    Parameters:
        strings: char const **
        count: int

    """
    return _iotkit.cJSON_CreateStringArray(strings, count)

def cJSON_AddItemToArray(array, item):
    """
    cJSON_AddItemToArray(cJSON array, cJSON item)

    Parameters:
        array: cJSON *
        item: cJSON *

    """
    return _iotkit.cJSON_AddItemToArray(array, item)

def cJSON_AddItemToObject(object, string, item):
    """
    cJSON_AddItemToObject(cJSON object, char const * string, cJSON item)

    Parameters:
        object: cJSON *
        string: char const *
        item: cJSON *

    """
    return _iotkit.cJSON_AddItemToObject(object, string, item)

def cJSON_AddItemReferenceToArray(array, item):
    """
    cJSON_AddItemReferenceToArray(cJSON array, cJSON item)

    Parameters:
        array: cJSON *
        item: cJSON *

    """
    return _iotkit.cJSON_AddItemReferenceToArray(array, item)

def cJSON_AddItemReferenceToObject(object, string, item):
    """
    cJSON_AddItemReferenceToObject(cJSON object, char const * string, cJSON item)

    Parameters:
        object: cJSON *
        string: char const *
        item: cJSON *

    """
    return _iotkit.cJSON_AddItemReferenceToObject(object, string, item)

def cJSON_DetachItemFromArray(array, which):
    """
    cJSON_DetachItemFromArray(cJSON array, int which) -> cJSON

    Parameters:
        array: cJSON *
        which: int

    """
    return _iotkit.cJSON_DetachItemFromArray(array, which)

def cJSON_DeleteItemFromArray(array, which):
    """
    cJSON_DeleteItemFromArray(cJSON array, int which)

    Parameters:
        array: cJSON *
        which: int

    """
    return _iotkit.cJSON_DeleteItemFromArray(array, which)

def cJSON_DetachItemFromObject(object, string):
    """
    cJSON_DetachItemFromObject(cJSON object, char const * string) -> cJSON

    Parameters:
        object: cJSON *
        string: char const *

    """
    return _iotkit.cJSON_DetachItemFromObject(object, string)

def cJSON_DeleteItemFromObject(object, string):
    """
    cJSON_DeleteItemFromObject(cJSON object, char const * string)

    Parameters:
        object: cJSON *
        string: char const *

    """
    return _iotkit.cJSON_DeleteItemFromObject(object, string)

def cJSON_ReplaceItemInArray(array, which, newitem):
    """
    cJSON_ReplaceItemInArray(cJSON array, int which, cJSON newitem)

    Parameters:
        array: cJSON *
        which: int
        newitem: cJSON *

    """
    return _iotkit.cJSON_ReplaceItemInArray(array, which, newitem)

def cJSON_ReplaceItemInObject(object, string, newitem):
    """
    cJSON_ReplaceItemInObject(cJSON object, char const * string, cJSON newitem)

    Parameters:
        object: cJSON *
        string: char const *
        newitem: cJSON *

    """
    return _iotkit.cJSON_ReplaceItemInObject(object, string, newitem)

def cJSON_Duplicate(item, recurse):
    """
    cJSON_Duplicate(cJSON item, int recurse) -> cJSON

    Parameters:
        item: cJSON *
        recurse: int

    """
    return _iotkit.cJSON_Duplicate(item, recurse)

def cJSON_ParseWithOpts(value, return_parse_end, require_null_terminated):
    """
    cJSON_ParseWithOpts(char const * value, char const ** return_parse_end, int require_null_terminated) -> cJSON

    Parameters:
        value: char const *
        return_parse_end: char const **
        require_null_terminated: int

    """
    return _iotkit.cJSON_ParseWithOpts(value, return_parse_end, require_null_terminated)

def cJSON_Minify(json):
    """
    cJSON_Minify(char * json)

    Parameters:
        json: char *

    """
    return _iotkit.cJSON_Minify(json)
# This file is compatible with both classic and new-style classes.


