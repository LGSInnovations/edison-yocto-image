# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_adc121c021', [dirname(__file__)])
        except ImportError:
            import _pyupm_adc121c021
            return _pyupm_adc121c021
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_adc121c021', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_adc121c021 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_adc121c021
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_adc121c021.ADC121C021_I2C_BUS_swigconstant(_pyupm_adc121c021)
ADC121C021_I2C_BUS = _pyupm_adc121c021.ADC121C021_I2C_BUS

_pyupm_adc121c021.ADC121C021_DEFAULT_I2C_ADDR_swigconstant(_pyupm_adc121c021)
ADC121C021_DEFAULT_I2C_ADDR = _pyupm_adc121c021.ADC121C021_DEFAULT_I2C_ADDR

_pyupm_adc121c021.ADC121C021_RESOLUTION_swigconstant(_pyupm_adc121c021)
ADC121C021_RESOLUTION = _pyupm_adc121c021.ADC121C021_RESOLUTION

_pyupm_adc121c021.ADC121C021_REG_RESULT_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_RESULT = _pyupm_adc121c021.ADC121C021_REG_RESULT

_pyupm_adc121c021.ADC121C021_REG_ALERT_STATUS_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_ALERT_STATUS = _pyupm_adc121c021.ADC121C021_REG_ALERT_STATUS

_pyupm_adc121c021.ADC121C021_REG_CONFIG_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_CONFIG = _pyupm_adc121c021.ADC121C021_REG_CONFIG

_pyupm_adc121c021.ADC121C021_REG_ALERT_LIM_UNDER_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_ALERT_LIM_UNDER = _pyupm_adc121c021.ADC121C021_REG_ALERT_LIM_UNDER

_pyupm_adc121c021.ADC121C021_REG_ALERT_LIM_OVER_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_ALERT_LIM_OVER = _pyupm_adc121c021.ADC121C021_REG_ALERT_LIM_OVER

_pyupm_adc121c021.ADC121C021_REG_ALERT_HYS_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_ALERT_HYS = _pyupm_adc121c021.ADC121C021_REG_ALERT_HYS

_pyupm_adc121c021.ADC121C021_REG_LOWEST_CONV_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_LOWEST_CONV = _pyupm_adc121c021.ADC121C021_REG_LOWEST_CONV

_pyupm_adc121c021.ADC121C021_REG_HIGHEST_CONV_swigconstant(_pyupm_adc121c021)
ADC121C021_REG_HIGHEST_CONV = _pyupm_adc121c021.ADC121C021_REG_HIGHEST_CONV

_pyupm_adc121c021.ADC121C021_DEFAULT_VREF_swigconstant(_pyupm_adc121c021)
ADC121C021_DEFAULT_VREF = _pyupm_adc121c021.ADC121C021_DEFAULT_VREF

_pyupm_adc121c021.ADC121C021_CYCLE_NONE_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_NONE = _pyupm_adc121c021.ADC121C021_CYCLE_NONE

_pyupm_adc121c021.ADC121C021_CYCLE_32_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_32 = _pyupm_adc121c021.ADC121C021_CYCLE_32

_pyupm_adc121c021.ADC121C021_CYCLE_64_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_64 = _pyupm_adc121c021.ADC121C021_CYCLE_64

_pyupm_adc121c021.ADC121C021_CYCLE_128_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_128 = _pyupm_adc121c021.ADC121C021_CYCLE_128

_pyupm_adc121c021.ADC121C021_CYCLE_256_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_256 = _pyupm_adc121c021.ADC121C021_CYCLE_256

_pyupm_adc121c021.ADC121C021_CYCLE_512_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_512 = _pyupm_adc121c021.ADC121C021_CYCLE_512

_pyupm_adc121c021.ADC121C021_CYCLE_1024_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_1024 = _pyupm_adc121c021.ADC121C021_CYCLE_1024

_pyupm_adc121c021.ADC121C021_CYCLE_2048_swigconstant(_pyupm_adc121c021)
ADC121C021_CYCLE_2048 = _pyupm_adc121c021.ADC121C021_CYCLE_2048
class ADC121C021(_object):
    """Proxy of C++ upm::ADC121C021 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADC121C021, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADC121C021, name)
    __repr__ = _swig_repr

    def __init__(self, bus, address=0x55, vref=3.0):
        """
        __init__(upm::ADC121C021 self, int bus, uint8_t address=0x55, float vref=3.0) -> ADC121C021

        Parameters:
            bus: int
            address: uint8_t
            vref: float

        __init__(upm::ADC121C021 self, int bus, uint8_t address=0x55) -> ADC121C021

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::ADC121C021 self, int bus) -> ADC121C021

        Parameters:
            bus: int

        """
        this = _pyupm_adc121c021.new_ADC121C021(bus, address, vref)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_adc121c021.delete_ADC121C021
    __del__ = lambda self: None

    def writeByte(self, reg, byte):
        """
        writeByte(ADC121C021 self, uint8_t reg, uint8_t byte) -> mraa_result_t

        Parameters:
            reg: uint8_t
            byte: uint8_t

        """
        return _pyupm_adc121c021.ADC121C021_writeByte(self, reg, byte)


    def writeWord(self, reg, word):
        """
        writeWord(ADC121C021 self, uint8_t reg, uint16_t word) -> mraa_result_t

        Parameters:
            reg: uint8_t
            word: uint16_t

        """
        return _pyupm_adc121c021.ADC121C021_writeWord(self, reg, word)


    def readByte(self, reg):
        """
        readByte(ADC121C021 self, uint8_t reg) -> uint8_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_adc121c021.ADC121C021_readByte(self, reg)


    def readWord(self, reg):
        """
        readWord(ADC121C021 self, uint8_t reg) -> uint16_t

        Parameters:
            reg: uint8_t

        """
        return _pyupm_adc121c021.ADC121C021_readWord(self, reg)


    def value(self):
        """
        value(ADC121C021 self) -> uint16_t

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_value(self)


    def valueToVolts(self, val):
        """
        valueToVolts(ADC121C021 self, uint16_t val) -> float

        Parameters:
            val: uint16_t

        """
        return _pyupm_adc121c021.ADC121C021_valueToVolts(self, val)


    def getAlertStatus(self):
        """
        getAlertStatus(ADC121C021 self) -> bool

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_getAlertStatus(self)


    def alertLowTriggered(self):
        """
        alertLowTriggered(ADC121C021 self) -> bool

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_alertLowTriggered(self)


    def alertHighTriggered(self):
        """
        alertHighTriggered(ADC121C021 self) -> bool

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_alertHighTriggered(self)


    def clearAlertStatus(self):
        """
        clearAlertStatus(ADC121C021 self)

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_clearAlertStatus(self)


    def enableAlertFlag(self, enable):
        """
        enableAlertFlag(ADC121C021 self, bool enable)

        Parameters:
            enable: bool

        """
        return _pyupm_adc121c021.ADC121C021_enableAlertFlag(self, enable)


    def enableAlertPin(self, enable):
        """
        enableAlertPin(ADC121C021 self, bool enable)

        Parameters:
            enable: bool

        """
        return _pyupm_adc121c021.ADC121C021_enableAlertPin(self, enable)


    def enableAlertHold(self, enable):
        """
        enableAlertHold(ADC121C021 self, bool enable)

        Parameters:
            enable: bool

        """
        return _pyupm_adc121c021.ADC121C021_enableAlertHold(self, enable)


    def enableAlertPinPolarityHigh(self, enable):
        """
        enableAlertPinPolarityHigh(ADC121C021 self, bool enable)

        Parameters:
            enable: bool

        """
        return _pyupm_adc121c021.ADC121C021_enableAlertPinPolarityHigh(self, enable)


    def setAutomaticConversion(self, cycleTime):
        """
        setAutomaticConversion(ADC121C021 self, upm::ADC121C021_CYCLE_TIME_T cycleTime)

        Parameters:
            cycleTime: enum upm::ADC121C021_CYCLE_TIME_T

        """
        return _pyupm_adc121c021.ADC121C021_setAutomaticConversion(self, cycleTime)


    def setAlertLowLimit(self, limit):
        """
        setAlertLowLimit(ADC121C021 self, uint16_t limit) -> mraa_result_t

        Parameters:
            limit: uint16_t

        """
        return _pyupm_adc121c021.ADC121C021_setAlertLowLimit(self, limit)


    def setAlertHighLimit(self, limit):
        """
        setAlertHighLimit(ADC121C021 self, uint16_t limit) -> mraa_result_t

        Parameters:
            limit: uint16_t

        """
        return _pyupm_adc121c021.ADC121C021_setAlertHighLimit(self, limit)


    def setHysteresis(self, limit):
        """
        setHysteresis(ADC121C021 self, uint16_t limit) -> mraa_result_t

        Parameters:
            limit: uint16_t

        """
        return _pyupm_adc121c021.ADC121C021_setHysteresis(self, limit)


    def getHighestConversion(self):
        """
        getHighestConversion(ADC121C021 self) -> uint16_t

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_getHighestConversion(self)


    def getLowestConversion(self):
        """
        getLowestConversion(ADC121C021 self) -> uint16_t

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_getLowestConversion(self)


    def clearHighestConversion(self):
        """
        clearHighestConversion(ADC121C021 self) -> mraa_result_t

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_clearHighestConversion(self)


    def clearLowestConversion(self):
        """
        clearLowestConversion(ADC121C021 self) -> mraa_result_t

        Parameters:
            self: upm::ADC121C021 *

        """
        return _pyupm_adc121c021.ADC121C021_clearLowestConversion(self)

ADC121C021_swigregister = _pyupm_adc121c021.ADC121C021_swigregister
ADC121C021_swigregister(ADC121C021)

# This file is compatible with both classic and new-style classes.


