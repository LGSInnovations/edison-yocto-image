# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_adxl345', [dirname(__file__)])
        except ImportError:
            import _pyupm_adxl345
            return _pyupm_adxl345
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_adxl345', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_adxl345 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_adxl345
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class int16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int16Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_adxl345.new_int16Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_adxl345.delete_int16Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_adxl345.int16Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_adxl345.int16Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_adxl345.int16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_adxl345.int16Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_adxl345.int16Array_frompointer)
int16Array_swigregister = _pyupm_adxl345.int16Array_swigregister
int16Array_swigregister(int16Array)

def int16Array_frompointer(t):
    return _pyupm_adxl345.int16Array_frompointer(t)
int16Array_frompointer = _pyupm_adxl345.int16Array_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_adxl345.new_floatArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_adxl345.delete_floatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_adxl345.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_adxl345.floatArray___setitem__(self, index, value)

    def cast(self):
        return _pyupm_adxl345.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_adxl345.floatArray_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_adxl345.floatArray_frompointer)
floatArray_swigregister = _pyupm_adxl345.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _pyupm_adxl345.floatArray_frompointer(t)
floatArray_frompointer = _pyupm_adxl345.floatArray_frompointer


_pyupm_adxl345.READ_BUFFER_LENGTH_swigconstant(_pyupm_adxl345)
READ_BUFFER_LENGTH = _pyupm_adxl345.READ_BUFFER_LENGTH
class Adxl345(_object):
    """Proxy of C++ upm::Adxl345 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adxl345, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Adxl345, name)
    __repr__ = _swig_repr

    def __init__(self, bus):
        """
        __init__(upm::Adxl345 self, int bus) -> Adxl345

        Parameters:
            bus: int

        """
        this = _pyupm_adxl345.new_Adxl345(bus)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_adxl345.delete_Adxl345
    __del__ = lambda self: None

    def getAcceleration(self):
        """
        getAcceleration(Adxl345 self) -> float *

        Parameters:
            self: upm::Adxl345 *

        """
        return _pyupm_adxl345.Adxl345_getAcceleration(self)


    def getRawValues(self):
        """
        getRawValues(Adxl345 self) -> int16_t *

        Parameters:
            self: upm::Adxl345 *

        """
        return _pyupm_adxl345.Adxl345_getRawValues(self)


    def getScale(self):
        """
        getScale(Adxl345 self) -> uint8_t

        Parameters:
            self: upm::Adxl345 *

        """
        return _pyupm_adxl345.Adxl345_getScale(self)


    def update(self):
        """
        update(Adxl345 self) -> mraa_result_t

        Parameters:
            self: upm::Adxl345 *

        """
        return _pyupm_adxl345.Adxl345_update(self)

Adxl345_swigregister = _pyupm_adxl345.Adxl345_swigregister
Adxl345_swigregister(Adxl345)

# This file is compatible with both classic and new-style classes.


