# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_am2315', [dirname(__file__)])
        except ImportError:
            import _pyupm_am2315
            return _pyupm_am2315
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_am2315', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_am2315 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_am2315
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_am2315.AM2315_NAME_swigconstant(_pyupm_am2315)
AM2315_NAME = _pyupm_am2315.AM2315_NAME

_pyupm_am2315.AM2315_I2C_ADDRESS_swigconstant(_pyupm_am2315)
AM2315_I2C_ADDRESS = _pyupm_am2315.AM2315_I2C_ADDRESS

_pyupm_am2315.AM2315_READ_swigconstant(_pyupm_am2315)
AM2315_READ = _pyupm_am2315.AM2315_READ

_pyupm_am2315.AM2315_WRITE_swigconstant(_pyupm_am2315)
AM2315_WRITE = _pyupm_am2315.AM2315_WRITE

_pyupm_am2315.AM2315_HUMIDITY_swigconstant(_pyupm_am2315)
AM2315_HUMIDITY = _pyupm_am2315.AM2315_HUMIDITY

_pyupm_am2315.AM2315_TEMP_swigconstant(_pyupm_am2315)
AM2315_TEMP = _pyupm_am2315.AM2315_TEMP

_pyupm_am2315.AM2315_MODEL_swigconstant(_pyupm_am2315)
AM2315_MODEL = _pyupm_am2315.AM2315_MODEL

_pyupm_am2315.AM2315_VERSION_swigconstant(_pyupm_am2315)
AM2315_VERSION = _pyupm_am2315.AM2315_VERSION

_pyupm_am2315.AM2315_ID_swigconstant(_pyupm_am2315)
AM2315_ID = _pyupm_am2315.AM2315_ID

_pyupm_am2315.AM2315_STATUS_swigconstant(_pyupm_am2315)
AM2315_STATUS = _pyupm_am2315.AM2315_STATUS

_pyupm_am2315.AM2315_USER_A_swigconstant(_pyupm_am2315)
AM2315_USER_A = _pyupm_am2315.AM2315_USER_A

_pyupm_am2315.AM2315_USER_B_swigconstant(_pyupm_am2315)
AM2315_USER_B = _pyupm_am2315.AM2315_USER_B

_pyupm_am2315.AM2315_SAMPLE_swigconstant(_pyupm_am2315)
AM2315_SAMPLE = _pyupm_am2315.AM2315_SAMPLE

_pyupm_am2315.HIGH_PRIORITY_swigconstant(_pyupm_am2315)
HIGH_PRIORITY = _pyupm_am2315.HIGH_PRIORITY
class AM2315(_object):
    """Proxy of C++ upm::AM2315 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AM2315, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AM2315, name)
    __repr__ = _swig_repr

    def __init__(self, bus, devAddr=0x5c):
        """
        __init__(upm::AM2315 self, int bus, int devAddr=0x5c) -> AM2315

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::AM2315 self, int bus) -> AM2315

        Parameters:
            bus: int

        """
        this = _pyupm_am2315.new_AM2315(bus, devAddr)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_am2315.delete_AM2315
    __del__ = lambda self: None

    def getHumidity(self):
        """
        getHumidity(AM2315 self) -> float

        Parameters:
            self: upm::AM2315 *

        """
        return _pyupm_am2315.AM2315_getHumidity(self)


    def getTemperature(self):
        """
        getTemperature(AM2315 self) -> float

        Parameters:
            self: upm::AM2315 *

        """
        return _pyupm_am2315.AM2315_getTemperature(self)


    def getTemperatureF(self):
        """
        getTemperatureF(AM2315 self) -> float

        Parameters:
            self: upm::AM2315 *

        """
        return _pyupm_am2315.AM2315_getTemperatureF(self)


    def testSensor(self):
        """
        testSensor(AM2315 self) -> int

        Parameters:
            self: upm::AM2315 *

        """
        return _pyupm_am2315.AM2315_testSensor(self)


    def i2cWriteReg_32(self, reg, ival):
        """
        i2cWriteReg_32(AM2315 self, int reg, uint32_t ival) -> int

        Parameters:
            reg: int
            ival: uint32_t

        """
        return _pyupm_am2315.AM2315_i2cWriteReg_32(self, reg, ival)


    def i2cWriteReg_16(self, reg, ival):
        """
        i2cWriteReg_16(AM2315 self, int reg, uint16_t ival) -> int

        Parameters:
            reg: int
            ival: uint16_t

        """
        return _pyupm_am2315.AM2315_i2cWriteReg_16(self, reg, ival)


    def i2cWriteReg_8(self, reg, ival):
        """
        i2cWriteReg_8(AM2315 self, int reg, uint8_t ival) -> int

        Parameters:
            reg: int
            ival: uint8_t

        """
        return _pyupm_am2315.AM2315_i2cWriteReg_8(self, reg, ival)


    def i2cReadReg_32(self, reg):
        """
        i2cReadReg_32(AM2315 self, int reg) -> uint32_t

        Parameters:
            reg: int

        """
        return _pyupm_am2315.AM2315_i2cReadReg_32(self, reg)


    def i2cReadReg_16(self, reg):
        """
        i2cReadReg_16(AM2315 self, int reg) -> uint16_t

        Parameters:
            reg: int

        """
        return _pyupm_am2315.AM2315_i2cReadReg_16(self, reg)


    def i2cReadReg_8(self, reg):
        """
        i2cReadReg_8(AM2315 self, int reg) -> uint8_t

        Parameters:
            reg: int

        """
        return _pyupm_am2315.AM2315_i2cReadReg_8(self, reg)

AM2315_swigregister = _pyupm_am2315.AM2315_swigregister
AM2315_swigregister(AM2315)

# This file is compatible with both classic and new-style classes.


