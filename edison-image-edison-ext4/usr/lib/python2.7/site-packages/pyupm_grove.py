# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grove', [dirname(__file__)])
        except ImportError:
            import _pyupm_grove
            return _pyupm_grove
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grove', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grove = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grove
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Grove(_object):
    """Proxy of C++ upm::Grove class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grove, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grove, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyupm_grove.delete_Grove
    __del__ = lambda self: None

    def name(self):
        """
        name(Grove self) -> std::string

        Parameters:
            self: upm::Grove *

        """
        return _pyupm_grove.Grove_name(self)


    def __init__(self):
        """__init__(upm::Grove self) -> Grove"""
        this = _pyupm_grove.new_Grove()
        try:
            self.this.append(this)
        except:
            self.this = this
Grove_swigregister = _pyupm_grove.Grove_swigregister
Grove_swigregister(Grove)

class GroveLed(Grove):
    """Proxy of C++ upm::GroveLed class"""
    __swig_setmethods__ = {}
    for _s in [Grove]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveLed, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveLed, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        """
        __init__(upm::GroveLed self, int pin) -> GroveLed

        Parameters:
            pin: int

        """
        this = _pyupm_grove.new_GroveLed(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveLed
    __del__ = lambda self: None

    def write(self, value):
        """
        write(GroveLed self, int value) -> mraa_result_t

        Parameters:
            value: int

        """
        return _pyupm_grove.GroveLed_write(self, value)


    def off(self):
        """
        off(GroveLed self) -> mraa_result_t

        Parameters:
            self: upm::GroveLed *

        """
        return _pyupm_grove.GroveLed_off(self)


    def on(self):
        """
        on(GroveLed self) -> mraa_result_t

        Parameters:
            self: upm::GroveLed *

        """
        return _pyupm_grove.GroveLed_on(self)

GroveLed_swigregister = _pyupm_grove.GroveLed_swigregister
GroveLed_swigregister(GroveLed)

class GroveRelay(Grove):
    """Proxy of C++ upm::GroveRelay class"""
    __swig_setmethods__ = {}
    for _s in [Grove]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveRelay, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveRelay, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        """
        __init__(upm::GroveRelay self, unsigned int pin) -> GroveRelay

        Parameters:
            pin: unsigned int

        """
        this = _pyupm_grove.new_GroveRelay(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveRelay
    __del__ = lambda self: None

    def on(self):
        """
        on(GroveRelay self) -> mraa_result_t

        Parameters:
            self: upm::GroveRelay *

        """
        return _pyupm_grove.GroveRelay_on(self)


    def off(self):
        """
        off(GroveRelay self) -> mraa_result_t

        Parameters:
            self: upm::GroveRelay *

        """
        return _pyupm_grove.GroveRelay_off(self)


    def isOn(self):
        """
        isOn(GroveRelay self) -> bool

        Parameters:
            self: upm::GroveRelay *

        """
        return _pyupm_grove.GroveRelay_isOn(self)


    def isOff(self):
        """
        isOff(GroveRelay self) -> bool

        Parameters:
            self: upm::GroveRelay *

        """
        return _pyupm_grove.GroveRelay_isOff(self)

GroveRelay_swigregister = _pyupm_grove.GroveRelay_swigregister
GroveRelay_swigregister(GroveRelay)

class GroveTemp(Grove):
    """Proxy of C++ upm::GroveTemp class"""
    __swig_setmethods__ = {}
    for _s in [Grove]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveTemp, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveTemp, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        """
        __init__(upm::GroveTemp self, unsigned int pin) -> GroveTemp

        Parameters:
            pin: unsigned int

        """
        this = _pyupm_grove.new_GroveTemp(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveTemp
    __del__ = lambda self: None

    def raw_value(self):
        """
        raw_value(GroveTemp self) -> float

        Parameters:
            self: upm::GroveTemp *

        """
        return _pyupm_grove.GroveTemp_raw_value(self)


    def value(self):
        """
        value(GroveTemp self) -> int

        Parameters:
            self: upm::GroveTemp *

        """
        return _pyupm_grove.GroveTemp_value(self)

GroveTemp_swigregister = _pyupm_grove.GroveTemp_swigregister
GroveTemp_swigregister(GroveTemp)

class GroveLight(Grove):
    """Proxy of C++ upm::GroveLight class"""
    __swig_setmethods__ = {}
    for _s in [Grove]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveLight, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveLight, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        """
        __init__(upm::GroveLight self, unsigned int pin) -> GroveLight

        Parameters:
            pin: unsigned int

        """
        this = _pyupm_grove.new_GroveLight(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveLight
    __del__ = lambda self: None

    def raw_value(self):
        """
        raw_value(GroveLight self) -> float

        Parameters:
            self: upm::GroveLight *

        """
        return _pyupm_grove.GroveLight_raw_value(self)


    def value(self):
        """
        value(GroveLight self) -> int

        Parameters:
            self: upm::GroveLight *

        """
        return _pyupm_grove.GroveLight_value(self)

GroveLight_swigregister = _pyupm_grove.GroveLight_swigregister
GroveLight_swigregister(GroveLight)

class GroveRotary(Grove):
    """Proxy of C++ upm::GroveRotary class"""
    __swig_setmethods__ = {}
    for _s in [Grove]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveRotary, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveRotary, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        """
        __init__(upm::GroveRotary self, unsigned int pin) -> GroveRotary

        Parameters:
            pin: unsigned int

        """
        this = _pyupm_grove.new_GroveRotary(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveRotary
    __del__ = lambda self: None

    def abs_value(self):
        """
        abs_value(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *

        """
        return _pyupm_grove.GroveRotary_abs_value(self)


    def abs_deg(self):
        """
        abs_deg(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *

        """
        return _pyupm_grove.GroveRotary_abs_deg(self)


    def abs_rad(self):
        """
        abs_rad(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *

        """
        return _pyupm_grove.GroveRotary_abs_rad(self)


    def rel_value(self):
        """
        rel_value(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *

        """
        return _pyupm_grove.GroveRotary_rel_value(self)


    def rel_deg(self):
        """
        rel_deg(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *

        """
        return _pyupm_grove.GroveRotary_rel_deg(self)


    def rel_rad(self):
        """
        rel_rad(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *

        """
        return _pyupm_grove.GroveRotary_rel_rad(self)

GroveRotary_swigregister = _pyupm_grove.GroveRotary_swigregister
GroveRotary_swigregister(GroveRotary)

class GroveSlide(Grove):
    """Proxy of C++ upm::GroveSlide class"""
    __swig_setmethods__ = {}
    for _s in [Grove]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveSlide, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveSlide, name)
    __repr__ = _swig_repr

    def __init__(self, pin, ref_voltage=5.0):
        """
        __init__(upm::GroveSlide self, unsigned int pin, float ref_voltage=5.0) -> GroveSlide

        Parameters:
            pin: unsigned int
            ref_voltage: float

        __init__(upm::GroveSlide self, unsigned int pin) -> GroveSlide

        Parameters:
            pin: unsigned int

        """
        this = _pyupm_grove.new_GroveSlide(pin, ref_voltage)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveSlide
    __del__ = lambda self: None

    def raw_value(self):
        """
        raw_value(GroveSlide self) -> float

        Parameters:
            self: upm::GroveSlide *

        """
        return _pyupm_grove.GroveSlide_raw_value(self)


    def voltage_value(self):
        """
        voltage_value(GroveSlide self) -> float

        Parameters:
            self: upm::GroveSlide *

        """
        return _pyupm_grove.GroveSlide_voltage_value(self)


    def ref_voltage(self):
        """
        ref_voltage(GroveSlide self) -> float

        Parameters:
            self: upm::GroveSlide *

        """
        return _pyupm_grove.GroveSlide_ref_voltage(self)

GroveSlide_swigregister = _pyupm_grove.GroveSlide_swigregister
GroveSlide_swigregister(GroveSlide)

class GroveButton(Grove):
    """Proxy of C++ upm::GroveButton class"""
    __swig_setmethods__ = {}
    for _s in [Grove]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveButton, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveButton, name)
    __repr__ = _swig_repr

    def __init__(self, pin):
        """
        __init__(upm::GroveButton self, unsigned int pin) -> GroveButton

        Parameters:
            pin: unsigned int

        """
        this = _pyupm_grove.new_GroveButton(pin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveButton
    __del__ = lambda self: None

    def name(self):
        """
        name(GroveButton self) -> std::string

        Parameters:
            self: upm::GroveButton *

        """
        return _pyupm_grove.GroveButton_name(self)


    def value(self):
        """
        value(GroveButton self) -> int

        Parameters:
            self: upm::GroveButton *

        """
        return _pyupm_grove.GroveButton_value(self)

GroveButton_swigregister = _pyupm_grove.GroveButton_swigregister
GroveButton_swigregister(GroveButton)

# This file is compatible with both classic and new-style classes.


