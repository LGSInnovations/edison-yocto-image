# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_htu21d', [dirname(__file__)])
        except ImportError:
            import _pyupm_htu21d
            return _pyupm_htu21d
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_htu21d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_htu21d = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_htu21d
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_htu21d.HTU21D_NAME_swigconstant(_pyupm_htu21d)
HTU21D_NAME = _pyupm_htu21d.HTU21D_NAME

_pyupm_htu21d.HTU21D_I2C_ADDRESS_swigconstant(_pyupm_htu21d)
HTU21D_I2C_ADDRESS = _pyupm_htu21d.HTU21D_I2C_ADDRESS

_pyupm_htu21d.HTU21D_READ_TEMP_HOLD_swigconstant(_pyupm_htu21d)
HTU21D_READ_TEMP_HOLD = _pyupm_htu21d.HTU21D_READ_TEMP_HOLD

_pyupm_htu21d.HTU21D_READ_HUMIDITY_HOLD_swigconstant(_pyupm_htu21d)
HTU21D_READ_HUMIDITY_HOLD = _pyupm_htu21d.HTU21D_READ_HUMIDITY_HOLD

_pyupm_htu21d.HTU21D_WRITE_USER_REG_swigconstant(_pyupm_htu21d)
HTU21D_WRITE_USER_REG = _pyupm_htu21d.HTU21D_WRITE_USER_REG

_pyupm_htu21d.HTU21D_READ_USER_REG_swigconstant(_pyupm_htu21d)
HTU21D_READ_USER_REG = _pyupm_htu21d.HTU21D_READ_USER_REG

_pyupm_htu21d.HTU21D_SOFT_RESET_swigconstant(_pyupm_htu21d)
HTU21D_SOFT_RESET = _pyupm_htu21d.HTU21D_SOFT_RESET

_pyupm_htu21d.HTU21D_DISABLE_OTP_swigconstant(_pyupm_htu21d)
HTU21D_DISABLE_OTP = _pyupm_htu21d.HTU21D_DISABLE_OTP

_pyupm_htu21d.HTU21D_HEATER_ENABLE_swigconstant(_pyupm_htu21d)
HTU21D_HEATER_ENABLE = _pyupm_htu21d.HTU21D_HEATER_ENABLE

_pyupm_htu21d.HTU21D_END_OF_BATTERY_swigconstant(_pyupm_htu21d)
HTU21D_END_OF_BATTERY = _pyupm_htu21d.HTU21D_END_OF_BATTERY

_pyupm_htu21d.HTU21D_RESO_RH12_T14_swigconstant(_pyupm_htu21d)
HTU21D_RESO_RH12_T14 = _pyupm_htu21d.HTU21D_RESO_RH12_T14

_pyupm_htu21d.HTU21D_RESO_RH8_T12_swigconstant(_pyupm_htu21d)
HTU21D_RESO_RH8_T12 = _pyupm_htu21d.HTU21D_RESO_RH8_T12

_pyupm_htu21d.HTU21D_RESO_RH10_T13_swigconstant(_pyupm_htu21d)
HTU21D_RESO_RH10_T13 = _pyupm_htu21d.HTU21D_RESO_RH10_T13

_pyupm_htu21d.HTU21D_RESO_RH11_T11_swigconstant(_pyupm_htu21d)
HTU21D_RESO_RH11_T11 = _pyupm_htu21d.HTU21D_RESO_RH11_T11
class HTU21D(_object):
    """Proxy of C++ upm::HTU21D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTU21D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTU21D, name)
    __repr__ = _swig_repr

    def __init__(self, bus, devAddr=0x40):
        """
        __init__(upm::HTU21D self, int bus, int devAddr=0x40) -> HTU21D

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::HTU21D self, int bus) -> HTU21D

        Parameters:
            bus: int

        """
        this = _pyupm_htu21d.new_HTU21D(bus, devAddr)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_htu21d.delete_HTU21D
    __del__ = lambda self: None

    def sampleData(self):
        """
        sampleData(HTU21D self) -> int

        Parameters:
            self: upm::HTU21D *

        """
        return _pyupm_htu21d.HTU21D_sampleData(self)


    def getHumidity(self, bSampleData=False):
        """
        getHumidity(HTU21D self, int bSampleData=False) -> float

        Parameters:
            bSampleData: int

        getHumidity(HTU21D self) -> float

        Parameters:
            self: upm::HTU21D *

        """
        return _pyupm_htu21d.HTU21D_getHumidity(self, bSampleData)


    def getTemperature(self, bSampleData=False):
        """
        getTemperature(HTU21D self, int bSampleData=False) -> float

        Parameters:
            bSampleData: int

        getTemperature(HTU21D self) -> float

        Parameters:
            self: upm::HTU21D *

        """
        return _pyupm_htu21d.HTU21D_getTemperature(self, bSampleData)


    def getCompRH(self, bSampleData=True):
        """
        getCompRH(HTU21D self, int bSampleData=True) -> float

        Parameters:
            bSampleData: int

        getCompRH(HTU21D self) -> float

        Parameters:
            self: upm::HTU21D *

        """
        return _pyupm_htu21d.HTU21D_getCompRH(self, bSampleData)


    def setHeater(self, bEnable=False):
        """
        setHeater(HTU21D self, int bEnable=False) -> int

        Parameters:
            bEnable: int

        setHeater(HTU21D self) -> int

        Parameters:
            self: upm::HTU21D *

        """
        return _pyupm_htu21d.HTU21D_setHeater(self, bEnable)


    def resetSensor(self):
        """
        resetSensor(HTU21D self) -> int

        Parameters:
            self: upm::HTU21D *

        """
        return _pyupm_htu21d.HTU21D_resetSensor(self)


    def testSensor(self):
        """
        testSensor(HTU21D self) -> int

        Parameters:
            self: upm::HTU21D *

        """
        return _pyupm_htu21d.HTU21D_testSensor(self)


    def i2cWriteReg(self, reg, value):
        """
        i2cWriteReg(HTU21D self, uint8_t reg, uint8_t value) -> mraa_result_t

        Parameters:
            reg: uint8_t
            value: uint8_t

        """
        return _pyupm_htu21d.HTU21D_i2cWriteReg(self, reg, value)


    def i2cReadReg_16(self, reg):
        """
        i2cReadReg_16(HTU21D self, int reg) -> uint16_t

        Parameters:
            reg: int

        """
        return _pyupm_htu21d.HTU21D_i2cReadReg_16(self, reg)


    def i2cReadReg_8(self, reg):
        """
        i2cReadReg_8(HTU21D self, int reg) -> uint8_t

        Parameters:
            reg: int

        """
        return _pyupm_htu21d.HTU21D_i2cReadReg_8(self, reg)

HTU21D_swigregister = _pyupm_htu21d.HTU21D_swigregister
HTU21D_swigregister(HTU21D)

# This file is compatible with both classic and new-style classes.


