# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_i2clcd', [dirname(__file__)])
        except ImportError:
            import _pyupm_i2clcd
            return _pyupm_i2clcd
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_i2clcd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_i2clcd = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_i2clcd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_i2clcd.DISPLAY_CMD_OFF_swigconstant(_pyupm_i2clcd)
DISPLAY_CMD_OFF = _pyupm_i2clcd.DISPLAY_CMD_OFF

_pyupm_i2clcd.DISPLAY_CMD_ON_swigconstant(_pyupm_i2clcd)
DISPLAY_CMD_ON = _pyupm_i2clcd.DISPLAY_CMD_ON

_pyupm_i2clcd.BASE_LOW_COLUMN_ADDR_swigconstant(_pyupm_i2clcd)
BASE_LOW_COLUMN_ADDR = _pyupm_i2clcd.BASE_LOW_COLUMN_ADDR

_pyupm_i2clcd.BASE_HIGH_COLUMN_ADDR_swigconstant(_pyupm_i2clcd)
BASE_HIGH_COLUMN_ADDR = _pyupm_i2clcd.BASE_HIGH_COLUMN_ADDR

_pyupm_i2clcd.BASE_PAGE_START_ADDR_swigconstant(_pyupm_i2clcd)
BASE_PAGE_START_ADDR = _pyupm_i2clcd.BASE_PAGE_START_ADDR

_pyupm_i2clcd.DISPLAY_CMD_MEM_ADDR_MODE_swigconstant(_pyupm_i2clcd)
DISPLAY_CMD_MEM_ADDR_MODE = _pyupm_i2clcd.DISPLAY_CMD_MEM_ADDR_MODE

_pyupm_i2clcd.HORIZONTAL_swigconstant(_pyupm_i2clcd)
HORIZONTAL = _pyupm_i2clcd.HORIZONTAL

_pyupm_i2clcd.VERTICAL_swigconstant(_pyupm_i2clcd)
VERTICAL = _pyupm_i2clcd.VERTICAL

_pyupm_i2clcd.PAGE_swigconstant(_pyupm_i2clcd)
PAGE = _pyupm_i2clcd.PAGE

_pyupm_i2clcd.LCD_CLEARDISPLAY_swigconstant(_pyupm_i2clcd)
LCD_CLEARDISPLAY = _pyupm_i2clcd.LCD_CLEARDISPLAY

_pyupm_i2clcd.LCD_RETURNHOME_swigconstant(_pyupm_i2clcd)
LCD_RETURNHOME = _pyupm_i2clcd.LCD_RETURNHOME

_pyupm_i2clcd.LCD_ENTRYMODESET_swigconstant(_pyupm_i2clcd)
LCD_ENTRYMODESET = _pyupm_i2clcd.LCD_ENTRYMODESET

_pyupm_i2clcd.LCD_DISPLAYCONTROL_swigconstant(_pyupm_i2clcd)
LCD_DISPLAYCONTROL = _pyupm_i2clcd.LCD_DISPLAYCONTROL

_pyupm_i2clcd.LCD_CURSORSHIFT_swigconstant(_pyupm_i2clcd)
LCD_CURSORSHIFT = _pyupm_i2clcd.LCD_CURSORSHIFT

_pyupm_i2clcd.LCD_FUNCTIONSET_swigconstant(_pyupm_i2clcd)
LCD_FUNCTIONSET = _pyupm_i2clcd.LCD_FUNCTIONSET

_pyupm_i2clcd.LCD_DATA_swigconstant(_pyupm_i2clcd)
LCD_DATA = _pyupm_i2clcd.LCD_DATA

_pyupm_i2clcd.LCD_CMD_swigconstant(_pyupm_i2clcd)
LCD_CMD = _pyupm_i2clcd.LCD_CMD

_pyupm_i2clcd.LCD_BACKLIGHT_swigconstant(_pyupm_i2clcd)
LCD_BACKLIGHT = _pyupm_i2clcd.LCD_BACKLIGHT

_pyupm_i2clcd.LCD_NOBACKLIGHT_swigconstant(_pyupm_i2clcd)
LCD_NOBACKLIGHT = _pyupm_i2clcd.LCD_NOBACKLIGHT

_pyupm_i2clcd.LCD_ENTRYRIGHT_swigconstant(_pyupm_i2clcd)
LCD_ENTRYRIGHT = _pyupm_i2clcd.LCD_ENTRYRIGHT

_pyupm_i2clcd.LCD_ENTRYLEFT_swigconstant(_pyupm_i2clcd)
LCD_ENTRYLEFT = _pyupm_i2clcd.LCD_ENTRYLEFT

_pyupm_i2clcd.LCD_ENTRYSHIFTINCREMENT_swigconstant(_pyupm_i2clcd)
LCD_ENTRYSHIFTINCREMENT = _pyupm_i2clcd.LCD_ENTRYSHIFTINCREMENT

_pyupm_i2clcd.LCD_ENTRYSHIFTDECREMENT_swigconstant(_pyupm_i2clcd)
LCD_ENTRYSHIFTDECREMENT = _pyupm_i2clcd.LCD_ENTRYSHIFTDECREMENT

_pyupm_i2clcd.LCD_DISPLAYON_swigconstant(_pyupm_i2clcd)
LCD_DISPLAYON = _pyupm_i2clcd.LCD_DISPLAYON

_pyupm_i2clcd.LCD_DISPLAYOFF_swigconstant(_pyupm_i2clcd)
LCD_DISPLAYOFF = _pyupm_i2clcd.LCD_DISPLAYOFF

_pyupm_i2clcd.LCD_CURSORON_swigconstant(_pyupm_i2clcd)
LCD_CURSORON = _pyupm_i2clcd.LCD_CURSORON

_pyupm_i2clcd.LCD_CURSOROFF_swigconstant(_pyupm_i2clcd)
LCD_CURSOROFF = _pyupm_i2clcd.LCD_CURSOROFF

_pyupm_i2clcd.LCD_BLINKON_swigconstant(_pyupm_i2clcd)
LCD_BLINKON = _pyupm_i2clcd.LCD_BLINKON

_pyupm_i2clcd.LCD_BLINKOFF_swigconstant(_pyupm_i2clcd)
LCD_BLINKOFF = _pyupm_i2clcd.LCD_BLINKOFF

_pyupm_i2clcd.LCD_DISPLAYMOVE_swigconstant(_pyupm_i2clcd)
LCD_DISPLAYMOVE = _pyupm_i2clcd.LCD_DISPLAYMOVE

_pyupm_i2clcd.LCD_MOVERIGHT_swigconstant(_pyupm_i2clcd)
LCD_MOVERIGHT = _pyupm_i2clcd.LCD_MOVERIGHT

_pyupm_i2clcd.LCD_MOVELEFT_swigconstant(_pyupm_i2clcd)
LCD_MOVELEFT = _pyupm_i2clcd.LCD_MOVELEFT

_pyupm_i2clcd.LCD_8BITMODE_swigconstant(_pyupm_i2clcd)
LCD_8BITMODE = _pyupm_i2clcd.LCD_8BITMODE

_pyupm_i2clcd.LCD_4BITMODE_swigconstant(_pyupm_i2clcd)
LCD_4BITMODE = _pyupm_i2clcd.LCD_4BITMODE

_pyupm_i2clcd.LCD_2LINE_swigconstant(_pyupm_i2clcd)
LCD_2LINE = _pyupm_i2clcd.LCD_2LINE

_pyupm_i2clcd.LCD_1LINE_swigconstant(_pyupm_i2clcd)
LCD_1LINE = _pyupm_i2clcd.LCD_1LINE

_pyupm_i2clcd.LCD_5x10DOTS_swigconstant(_pyupm_i2clcd)
LCD_5x10DOTS = _pyupm_i2clcd.LCD_5x10DOTS

_pyupm_i2clcd.LCD_5x8DOTS_swigconstant(_pyupm_i2clcd)
LCD_5x8DOTS = _pyupm_i2clcd.LCD_5x8DOTS

_pyupm_i2clcd.LCD_EN_swigconstant(_pyupm_i2clcd)
LCD_EN = _pyupm_i2clcd.LCD_EN

_pyupm_i2clcd.LCD_RW_swigconstant(_pyupm_i2clcd)
LCD_RW = _pyupm_i2clcd.LCD_RW

_pyupm_i2clcd.LCD_RS_swigconstant(_pyupm_i2clcd)
LCD_RS = _pyupm_i2clcd.LCD_RS
class I2CLcd(_object):
    """Proxy of C++ upm::I2CLcd class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, I2CLcd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, I2CLcd, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def write(self, *args):
        """
        write(I2CLcd self, int x, int y, std::string msg) -> mraa_result_t

        Parameters:
            x: int
            y: int
            msg: std::string

        write(I2CLcd self, std::string msg) -> mraa_result_t

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.I2CLcd_write(self, *args)


    def setCursor(self, row, column):
        """
        setCursor(I2CLcd self, int row, int column) -> mraa_result_t

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.I2CLcd_setCursor(self, row, column)


    def clear(self):
        """
        clear(I2CLcd self) -> mraa_result_t

        Parameters:
            self: upm::I2CLcd *

        """
        return _pyupm_i2clcd.I2CLcd_clear(self)


    def home(self):
        """
        home(I2CLcd self) -> mraa_result_t

        Parameters:
            self: upm::I2CLcd *

        """
        return _pyupm_i2clcd.I2CLcd_home(self)


    def i2Cmd(self, ctx, value):
        """
        i2Cmd(I2CLcd self, mraa_i2c_context ctx, uint8_t value) -> mraa_result_t

        Parameters:
            ctx: mraa_i2c_context
            value: uint8_t

        """
        return _pyupm_i2clcd.I2CLcd_i2Cmd(self, ctx, value)


    def i2cReg(self, ctx, deviceAdress, addr, data):
        """
        i2cReg(I2CLcd self, mraa_i2c_context ctx, int deviceAdress, int addr, uint8_t data) -> mraa_result_t

        Parameters:
            ctx: mraa_i2c_context
            deviceAdress: int
            addr: int
            data: uint8_t

        """
        return _pyupm_i2clcd.I2CLcd_i2cReg(self, ctx, deviceAdress, addr, data)


    def i2cData(self, ctx, value):
        """
        i2cData(I2CLcd self, mraa_i2c_context ctx, uint8_t value) -> mraa_result_t

        Parameters:
            ctx: mraa_i2c_context
            value: uint8_t

        """
        return _pyupm_i2clcd.I2CLcd_i2cData(self, ctx, value)


    def close(self):
        """
        close(I2CLcd self) -> mraa_result_t

        Parameters:
            self: upm::I2CLcd *

        """
        return _pyupm_i2clcd.I2CLcd_close(self)


    def name(self):
        """
        name(I2CLcd self) -> std::string

        Parameters:
            self: upm::I2CLcd *

        """
        return _pyupm_i2clcd.I2CLcd_name(self)

    __swig_destroy__ = _pyupm_i2clcd.delete_I2CLcd
    __del__ = lambda self: None
I2CLcd_swigregister = _pyupm_i2clcd.I2CLcd_swigregister
I2CLcd_swigregister(I2CLcd)
cvar = _pyupm_i2clcd.cvar
BasicFont = cvar.BasicFont

class Jhd1313m1(I2CLcd):
    """Proxy of C++ upm::Jhd1313m1 class"""
    __swig_setmethods__ = {}
    for _s in [I2CLcd]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Jhd1313m1, name, value)
    __swig_getmethods__ = {}
    for _s in [I2CLcd]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Jhd1313m1, name)
    __repr__ = _swig_repr

    def __init__(self, bus, lcdAddress=0x3E, rgbAddress=0x62):
        """
        __init__(upm::Jhd1313m1 self, int bus, int lcdAddress=0x3E, int rgbAddress=0x62) -> Jhd1313m1

        Parameters:
            bus: int
            lcdAddress: int
            rgbAddress: int

        __init__(upm::Jhd1313m1 self, int bus, int lcdAddress=0x3E) -> Jhd1313m1

        Parameters:
            bus: int
            lcdAddress: int

        __init__(upm::Jhd1313m1 self, int bus) -> Jhd1313m1

        Parameters:
            bus: int

        """
        this = _pyupm_i2clcd.new_Jhd1313m1(bus, lcdAddress, rgbAddress)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_Jhd1313m1
    __del__ = lambda self: None

    def scroll(self, direction):
        """
        scroll(Jhd1313m1 self, bool direction) -> mraa_result_t

        Parameters:
            direction: bool

        """
        return _pyupm_i2clcd.Jhd1313m1_scroll(self, direction)


    def setColor(self, r, g, b):
        """
        setColor(Jhd1313m1 self, uint8_t r, uint8_t g, uint8_t b) -> mraa_result_t

        Parameters:
            r: uint8_t
            g: uint8_t
            b: uint8_t

        """
        return _pyupm_i2clcd.Jhd1313m1_setColor(self, r, g, b)


    def write(self, msg):
        """
        write(Jhd1313m1 self, std::string msg) -> mraa_result_t

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.Jhd1313m1_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(Jhd1313m1 self, int row, int column) -> mraa_result_t

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.Jhd1313m1_setCursor(self, row, column)


    def clear(self):
        """
        clear(Jhd1313m1 self) -> mraa_result_t

        Parameters:
            self: upm::Jhd1313m1 *

        """
        return _pyupm_i2clcd.Jhd1313m1_clear(self)


    def home(self):
        """
        home(Jhd1313m1 self) -> mraa_result_t

        Parameters:
            self: upm::Jhd1313m1 *

        """
        return _pyupm_i2clcd.Jhd1313m1_home(self)

Jhd1313m1_swigregister = _pyupm_i2clcd.Jhd1313m1_swigregister
Jhd1313m1_swigregister(Jhd1313m1)

class Lcm1602(I2CLcd):
    """Proxy of C++ upm::Lcm1602 class"""
    __swig_setmethods__ = {}
    for _s in [I2CLcd]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lcm1602, name, value)
    __swig_getmethods__ = {}
    for _s in [I2CLcd]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lcm1602, name)
    __repr__ = _swig_repr

    def __init__(self, bus, address):
        """
        __init__(upm::Lcm1602 self, int bus, int address) -> Lcm1602

        Parameters:
            bus: int
            address: int

        """
        this = _pyupm_i2clcd.new_Lcm1602(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_Lcm1602
    __del__ = lambda self: None

    def write(self, msg):
        """
        write(Lcm1602 self, std::string msg) -> mraa_result_t

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.Lcm1602_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(Lcm1602 self, int row, int column) -> mraa_result_t

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.Lcm1602_setCursor(self, row, column)


    def clear(self):
        """
        clear(Lcm1602 self) -> mraa_result_t

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_clear(self)


    def home(self):
        """
        home(Lcm1602 self) -> mraa_result_t

        Parameters:
            self: upm::Lcm1602 *

        """
        return _pyupm_i2clcd.Lcm1602_home(self)

Lcm1602_swigregister = _pyupm_i2clcd.Lcm1602_swigregister
Lcm1602_swigregister(Lcm1602)


_pyupm_i2clcd.DISPLAY_CMD_SET_NORMAL_swigconstant(_pyupm_i2clcd)
DISPLAY_CMD_SET_NORMAL = _pyupm_i2clcd.DISPLAY_CMD_SET_NORMAL
class SSD1327(I2CLcd):
    """Proxy of C++ upm::SSD1327 class"""
    __swig_setmethods__ = {}
    for _s in [I2CLcd]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1327, name, value)
    __swig_getmethods__ = {}
    for _s in [I2CLcd]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1327, name)
    __repr__ = _swig_repr

    def __init__(self, bus, address=0x3C):
        """
        __init__(upm::SSD1327 self, int bus, int address=0x3C) -> SSD1327

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1327 self, int bus) -> SSD1327

        Parameters:
            bus: int

        """
        this = _pyupm_i2clcd.new_SSD1327(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1327
    __del__ = lambda self: None

    def draw(self, data, bytes):
        """
        draw(SSD1327 self, uint8_t * data, int bytes) -> mraa_result_t

        Parameters:
            data: uint8_t *
            bytes: int

        """
        return _pyupm_i2clcd.SSD1327_draw(self, data, bytes)


    def setGrayLevel(self, level):
        """
        setGrayLevel(SSD1327 self, uint8_t level) -> mraa_result_t

        Parameters:
            level: uint8_t

        """
        return _pyupm_i2clcd.SSD1327_setGrayLevel(self, level)


    def write(self, msg):
        """
        write(SSD1327 self, std::string msg) -> mraa_result_t

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.SSD1327_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(SSD1327 self, int row, int column) -> mraa_result_t

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.SSD1327_setCursor(self, row, column)


    def clear(self):
        """
        clear(SSD1327 self) -> mraa_result_t

        Parameters:
            self: upm::SSD1327 *

        """
        return _pyupm_i2clcd.SSD1327_clear(self)


    def home(self):
        """
        home(SSD1327 self) -> mraa_result_t

        Parameters:
            self: upm::SSD1327 *

        """
        return _pyupm_i2clcd.SSD1327_home(self)

SSD1327_swigregister = _pyupm_i2clcd.SSD1327_swigregister
SSD1327_swigregister(SSD1327)


_pyupm_i2clcd.DISPLAY_CMD_SET_NORMAL_1308_swigconstant(_pyupm_i2clcd)
DISPLAY_CMD_SET_NORMAL_1308 = _pyupm_i2clcd.DISPLAY_CMD_SET_NORMAL_1308
class SSD1308(I2CLcd):
    """Proxy of C++ upm::SSD1308 class"""
    __swig_setmethods__ = {}
    for _s in [I2CLcd]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSD1308, name, value)
    __swig_getmethods__ = {}
    for _s in [I2CLcd]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SSD1308, name)
    __repr__ = _swig_repr

    def __init__(self, bus, address=0x3C):
        """
        __init__(upm::SSD1308 self, int bus, int address=0x3C) -> SSD1308

        Parameters:
            bus: int
            address: int

        __init__(upm::SSD1308 self, int bus) -> SSD1308

        Parameters:
            bus: int

        """
        this = _pyupm_i2clcd.new_SSD1308(bus, address)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_i2clcd.delete_SSD1308
    __del__ = lambda self: None

    def draw(self, data, bytes):
        """
        draw(SSD1308 self, uint8_t * data, int bytes) -> mraa_result_t

        Parameters:
            data: uint8_t *
            bytes: int

        """
        return _pyupm_i2clcd.SSD1308_draw(self, data, bytes)


    def write(self, msg):
        """
        write(SSD1308 self, std::string msg) -> mraa_result_t

        Parameters:
            msg: std::string

        """
        return _pyupm_i2clcd.SSD1308_write(self, msg)


    def setCursor(self, row, column):
        """
        setCursor(SSD1308 self, int row, int column) -> mraa_result_t

        Parameters:
            row: int
            column: int

        """
        return _pyupm_i2clcd.SSD1308_setCursor(self, row, column)


    def clear(self):
        """
        clear(SSD1308 self) -> mraa_result_t

        Parameters:
            self: upm::SSD1308 *

        """
        return _pyupm_i2clcd.SSD1308_clear(self)


    def home(self):
        """
        home(SSD1308 self) -> mraa_result_t

        Parameters:
            self: upm::SSD1308 *

        """
        return _pyupm_i2clcd.SSD1308_home(self)

SSD1308_swigregister = _pyupm_i2clcd.SSD1308_swigregister
SSD1308_swigregister(SSD1308)

# This file is compatible with both classic and new-style classes.


