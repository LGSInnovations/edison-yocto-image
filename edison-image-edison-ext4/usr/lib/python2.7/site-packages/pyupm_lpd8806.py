# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_lpd8806', [dirname(__file__)])
        except ImportError:
            import _pyupm_lpd8806
            return _pyupm_lpd8806
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_lpd8806', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_lpd8806 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_lpd8806
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_lpd8806.HIGH_swigconstant(_pyupm_lpd8806)
HIGH = _pyupm_lpd8806.HIGH

_pyupm_lpd8806.LOW_swigconstant(_pyupm_lpd8806)
LOW = _pyupm_lpd8806.LOW
class LPD8806(_object):
    """Proxy of C++ upm::LPD8806 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LPD8806, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LPD8806, name)
    __repr__ = _swig_repr

    def __init__(self, pixelCount, csn):
        """
        __init__(upm::LPD8806 self, uint16_t pixelCount, uint8_t csn) -> LPD8806

        Parameters:
            pixelCount: uint16_t
            csn: uint8_t

        """
        this = _pyupm_lpd8806.new_LPD8806(pixelCount, csn)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_lpd8806.delete_LPD8806
    __del__ = lambda self: None

    def setPixelColor(self, pixelOffset, r, g, b):
        """
        setPixelColor(LPD8806 self, uint16_t pixelOffset, uint8_t r, uint8_t g, uint8_t b)

        Parameters:
            pixelOffset: uint16_t
            r: uint8_t
            g: uint8_t
            b: uint8_t

        """
        return _pyupm_lpd8806.LPD8806_setPixelColor(self, pixelOffset, r, g, b)


    def show(self):
        """
        show(LPD8806 self)

        Parameters:
            self: upm::LPD8806 *

        """
        return _pyupm_lpd8806.LPD8806_show(self)


    def getStripLength(self):
        """
        getStripLength(LPD8806 self) -> uint16_t

        Parameters:
            self: upm::LPD8806 *

        """
        return _pyupm_lpd8806.LPD8806_getStripLength(self)


    def name(self):
        """
        name(LPD8806 self) -> std::string

        Parameters:
            self: upm::LPD8806 *

        """
        return _pyupm_lpd8806.LPD8806_name(self)

LPD8806_swigregister = _pyupm_lpd8806.LPD8806_swigregister
LPD8806_swigregister(LPD8806)

# This file is compatible with both classic and new-style classes.


