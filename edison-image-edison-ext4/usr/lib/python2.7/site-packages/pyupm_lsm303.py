# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_lsm303', [dirname(__file__)])
        except ImportError:
            import _pyupm_lsm303
            return _pyupm_lsm303
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_lsm303', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_lsm303 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_lsm303
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_lsm303.LSM303_MAG_swigconstant(_pyupm_lsm303)
LSM303_MAG = _pyupm_lsm303.LSM303_MAG

_pyupm_lsm303.LSM303_ACC_swigconstant(_pyupm_lsm303)
LSM303_ACC = _pyupm_lsm303.LSM303_ACC

_pyupm_lsm303.CTRL_REG1_A_swigconstant(_pyupm_lsm303)
CTRL_REG1_A = _pyupm_lsm303.CTRL_REG1_A

_pyupm_lsm303.CTRL_REG2_A_swigconstant(_pyupm_lsm303)
CTRL_REG2_A = _pyupm_lsm303.CTRL_REG2_A

_pyupm_lsm303.CTRL_REG3_A_swigconstant(_pyupm_lsm303)
CTRL_REG3_A = _pyupm_lsm303.CTRL_REG3_A

_pyupm_lsm303.CTRL_REG4_A_swigconstant(_pyupm_lsm303)
CTRL_REG4_A = _pyupm_lsm303.CTRL_REG4_A

_pyupm_lsm303.CTRL_REG5_A_swigconstant(_pyupm_lsm303)
CTRL_REG5_A = _pyupm_lsm303.CTRL_REG5_A

_pyupm_lsm303.CRA_REG_M_swigconstant(_pyupm_lsm303)
CRA_REG_M = _pyupm_lsm303.CRA_REG_M

_pyupm_lsm303.CRB_REG_M_swigconstant(_pyupm_lsm303)
CRB_REG_M = _pyupm_lsm303.CRB_REG_M

_pyupm_lsm303.MR_REG_M_swigconstant(_pyupm_lsm303)
MR_REG_M = _pyupm_lsm303.MR_REG_M

_pyupm_lsm303.OUT_X_H_M_swigconstant(_pyupm_lsm303)
OUT_X_H_M = _pyupm_lsm303.OUT_X_H_M

_pyupm_lsm303.OUT_X_L_A_swigconstant(_pyupm_lsm303)
OUT_X_L_A = _pyupm_lsm303.OUT_X_L_A

_pyupm_lsm303.OUT_X_H_A_swigconstant(_pyupm_lsm303)
OUT_X_H_A = _pyupm_lsm303.OUT_X_H_A

_pyupm_lsm303.OUT_Y_L_A_swigconstant(_pyupm_lsm303)
OUT_Y_L_A = _pyupm_lsm303.OUT_Y_L_A

_pyupm_lsm303.OUT_Y_H_A_swigconstant(_pyupm_lsm303)
OUT_Y_H_A = _pyupm_lsm303.OUT_Y_H_A

_pyupm_lsm303.OUT_Z_L_A_swigconstant(_pyupm_lsm303)
OUT_Z_L_A = _pyupm_lsm303.OUT_Z_L_A

_pyupm_lsm303.OUT_Z_H_A_swigconstant(_pyupm_lsm303)
OUT_Z_H_A = _pyupm_lsm303.OUT_Z_H_A

_pyupm_lsm303.X_swigconstant(_pyupm_lsm303)
X = _pyupm_lsm303.X

_pyupm_lsm303.Y_swigconstant(_pyupm_lsm303)
Y = _pyupm_lsm303.Y

_pyupm_lsm303.Z_swigconstant(_pyupm_lsm303)
Z = _pyupm_lsm303.Z
class LSM303(_object):
    """Proxy of C++ upm::LSM303 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LSM303, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LSM303, name)
    __repr__ = _swig_repr

    def __init__(self, bus, addrMag=0x1E, addrAcc=0x18, accScale=8):
        """
        __init__(upm::LSM303 self, int bus, int addrMag=0x1E, int addrAcc=0x18, int accScale=8) -> LSM303

        Parameters:
            bus: int
            addrMag: int
            addrAcc: int
            accScale: int

        __init__(upm::LSM303 self, int bus, int addrMag=0x1E, int addrAcc=0x18) -> LSM303

        Parameters:
            bus: int
            addrMag: int
            addrAcc: int

        __init__(upm::LSM303 self, int bus, int addrMag=0x1E) -> LSM303

        Parameters:
            bus: int
            addrMag: int

        __init__(upm::LSM303 self, int bus) -> LSM303

        Parameters:
            bus: int

        """
        this = _pyupm_lsm303.new_LSM303(bus, addrMag, addrAcc, accScale)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_lsm303.delete_LSM303
    __del__ = lambda self: None

    def getHeading(self):
        """
        getHeading(LSM303 self) -> float

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getHeading(self)


    def getCoordinates(self):
        """
        getCoordinates(LSM303 self) -> mraa_result_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getCoordinates(self)


    def getAcceleration(self):
        """
        getAcceleration(LSM303 self) -> mraa_result_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getAcceleration(self)


    def getRawCoorData(self):
        """
        getRawCoorData(LSM303 self) -> int16_t *

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getRawCoorData(self)


    def getCoorX(self):
        """
        getCoorX(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getCoorX(self)


    def getCoorY(self):
        """
        getCoorY(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getCoorY(self)


    def getCoorZ(self):
        """
        getCoorZ(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getCoorZ(self)


    def getRawAccelData(self):
        """
        getRawAccelData(LSM303 self) -> int16_t *

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getRawAccelData(self)


    def getAccelX(self):
        """
        getAccelX(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getAccelX(self)


    def getAccelY(self):
        """
        getAccelY(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getAccelY(self)


    def getAccelZ(self):
        """
        getAccelZ(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *

        """
        return _pyupm_lsm303.LSM303_getAccelZ(self)

LSM303_swigregister = _pyupm_lsm303.LSM303_swigregister
LSM303_swigregister(LSM303)

# This file is compatible with both classic and new-style classes.


