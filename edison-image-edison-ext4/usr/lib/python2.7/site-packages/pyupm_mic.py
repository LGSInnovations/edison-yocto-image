# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mic', [dirname(__file__)])
        except ImportError:
            import _pyupm_mic
            return _pyupm_mic
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mic = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mic
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class uint16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint16Array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyupm_mic.new_uint16Array(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mic.delete_uint16Array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyupm_mic.uint16Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyupm_mic.uint16Array___setitem__(self, index, value)

    def cast(self):
        return _pyupm_mic.uint16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_mic.uint16Array_frompointer
    if _newclass:
        frompointer = staticmethod(_pyupm_mic.uint16Array_frompointer)
uint16Array_swigregister = _pyupm_mic.uint16Array_swigregister
uint16Array_swigregister(uint16Array)

def uint16Array_frompointer(t):
    return _pyupm_mic.uint16Array_frompointer(t)
uint16Array_frompointer = _pyupm_mic.uint16Array_frompointer

class thresholdContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, thresholdContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, thresholdContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["averageReading"] = _pyupm_mic.thresholdContext_averageReading_set
    __swig_getmethods__["averageReading"] = _pyupm_mic.thresholdContext_averageReading_get
    if _newclass:
        averageReading = _swig_property(_pyupm_mic.thresholdContext_averageReading_get, _pyupm_mic.thresholdContext_averageReading_set)
    __swig_setmethods__["runningAverage"] = _pyupm_mic.thresholdContext_runningAverage_set
    __swig_getmethods__["runningAverage"] = _pyupm_mic.thresholdContext_runningAverage_get
    if _newclass:
        runningAverage = _swig_property(_pyupm_mic.thresholdContext_runningAverage_get, _pyupm_mic.thresholdContext_runningAverage_set)
    __swig_setmethods__["averagedOver"] = _pyupm_mic.thresholdContext_averagedOver_set
    __swig_getmethods__["averagedOver"] = _pyupm_mic.thresholdContext_averagedOver_get
    if _newclass:
        averagedOver = _swig_property(_pyupm_mic.thresholdContext_averagedOver_get, _pyupm_mic.thresholdContext_averagedOver_set)

    def __init__(self):
        this = _pyupm_mic.new_thresholdContext()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mic.delete_thresholdContext
    __del__ = lambda self: None
thresholdContext_swigregister = _pyupm_mic.thresholdContext_swigregister
thresholdContext_swigregister(thresholdContext)

class Microphone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Microphone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Microphone, name)
    __repr__ = _swig_repr

    def __init__(self, micPin):
        this = _pyupm_mic.new_Microphone(micPin)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mic.delete_Microphone
    __del__ = lambda self: None

    def getSampledWindow(self, freqMS, numberOfSamples, buffer):
        return _pyupm_mic.Microphone_getSampledWindow(self, freqMS, numberOfSamples, buffer)

    def findThreshold(self, ctx, threshold, buffer, len):
        return _pyupm_mic.Microphone_findThreshold(self, ctx, threshold, buffer, len)

    def printGraph(self, ctx):
        return _pyupm_mic.Microphone_printGraph(self, ctx)
Microphone_swigregister = _pyupm_mic.Microphone_swigregister
Microphone_swigregister(Microphone)

# This file is compatible with both classic and new-style classes.


