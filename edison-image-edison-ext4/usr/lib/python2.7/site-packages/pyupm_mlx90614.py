# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mlx90614', [dirname(__file__)])
        except ImportError:
            import _pyupm_mlx90614
            return _pyupm_mlx90614
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mlx90614', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mlx90614 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mlx90614
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_mlx90614.DEVICE_ADDR_swigconstant(_pyupm_mlx90614)
DEVICE_ADDR = _pyupm_mlx90614.DEVICE_ADDR

_pyupm_mlx90614.MLX90614_RAWIR1_swigconstant(_pyupm_mlx90614)
MLX90614_RAWIR1 = _pyupm_mlx90614.MLX90614_RAWIR1

_pyupm_mlx90614.MLX90614_RAWIR2_swigconstant(_pyupm_mlx90614)
MLX90614_RAWIR2 = _pyupm_mlx90614.MLX90614_RAWIR2

_pyupm_mlx90614.MLX90614_TA_swigconstant(_pyupm_mlx90614)
MLX90614_TA = _pyupm_mlx90614.MLX90614_TA

_pyupm_mlx90614.MLX90614_TOBJ1_swigconstant(_pyupm_mlx90614)
MLX90614_TOBJ1 = _pyupm_mlx90614.MLX90614_TOBJ1

_pyupm_mlx90614.MLX90614_TOBJ2_swigconstant(_pyupm_mlx90614)
MLX90614_TOBJ2 = _pyupm_mlx90614.MLX90614_TOBJ2

_pyupm_mlx90614.MLX90614_TOMAX_swigconstant(_pyupm_mlx90614)
MLX90614_TOMAX = _pyupm_mlx90614.MLX90614_TOMAX

_pyupm_mlx90614.MLX90614_TOMIN_swigconstant(_pyupm_mlx90614)
MLX90614_TOMIN = _pyupm_mlx90614.MLX90614_TOMIN

_pyupm_mlx90614.MLX90614_PWMCTRL_swigconstant(_pyupm_mlx90614)
MLX90614_PWMCTRL = _pyupm_mlx90614.MLX90614_PWMCTRL

_pyupm_mlx90614.MLX90614_TARANGE_swigconstant(_pyupm_mlx90614)
MLX90614_TARANGE = _pyupm_mlx90614.MLX90614_TARANGE

_pyupm_mlx90614.MLX90614_EMISS_swigconstant(_pyupm_mlx90614)
MLX90614_EMISS = _pyupm_mlx90614.MLX90614_EMISS

_pyupm_mlx90614.MLX90614_CONFIG_swigconstant(_pyupm_mlx90614)
MLX90614_CONFIG = _pyupm_mlx90614.MLX90614_CONFIG

_pyupm_mlx90614.MLX90614_ADDR_swigconstant(_pyupm_mlx90614)
MLX90614_ADDR = _pyupm_mlx90614.MLX90614_ADDR

_pyupm_mlx90614.MLX90614_ID1_swigconstant(_pyupm_mlx90614)
MLX90614_ID1 = _pyupm_mlx90614.MLX90614_ID1

_pyupm_mlx90614.MLX90614_ID2_swigconstant(_pyupm_mlx90614)
MLX90614_ID2 = _pyupm_mlx90614.MLX90614_ID2

_pyupm_mlx90614.MLX90614_ID3_swigconstant(_pyupm_mlx90614)
MLX90614_ID3 = _pyupm_mlx90614.MLX90614_ID3

_pyupm_mlx90614.MLX90614_ID4_swigconstant(_pyupm_mlx90614)
MLX90614_ID4 = _pyupm_mlx90614.MLX90614_ID4

_pyupm_mlx90614.HIGH_swigconstant(_pyupm_mlx90614)
HIGH = _pyupm_mlx90614.HIGH

_pyupm_mlx90614.LOW_swigconstant(_pyupm_mlx90614)
LOW = _pyupm_mlx90614.LOW
class MLX90614(_object):
    """Proxy of C++ upm::MLX90614 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MLX90614, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MLX90614, name)
    __repr__ = _swig_repr

    def __init__(self, bus=0, devAddr=0x5A):
        """
        __init__(upm::MLX90614 self, int bus=0, int devAddr=0x5A) -> MLX90614

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::MLX90614 self, int bus=0) -> MLX90614

        Parameters:
            bus: int

        __init__(upm::MLX90614 self) -> MLX90614
        """
        this = _pyupm_mlx90614.new_MLX90614(bus, devAddr)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mlx90614.delete_MLX90614
    __del__ = lambda self: None

    def readObjectTempF(self):
        """
        readObjectTempF(MLX90614 self) -> float

        Parameters:
            self: upm::MLX90614 *

        """
        return _pyupm_mlx90614.MLX90614_readObjectTempF(self)


    def readAmbientTempF(self):
        """
        readAmbientTempF(MLX90614 self) -> float

        Parameters:
            self: upm::MLX90614 *

        """
        return _pyupm_mlx90614.MLX90614_readAmbientTempF(self)


    def readObjectTempC(self):
        """
        readObjectTempC(MLX90614 self) -> float

        Parameters:
            self: upm::MLX90614 *

        """
        return _pyupm_mlx90614.MLX90614_readObjectTempC(self)


    def readAmbientTempC(self):
        """
        readAmbientTempC(MLX90614 self) -> float

        Parameters:
            self: upm::MLX90614 *

        """
        return _pyupm_mlx90614.MLX90614_readAmbientTempC(self)


    def name(self):
        """
        name(MLX90614 self) -> std::string

        Parameters:
            self: upm::MLX90614 *

        """
        return _pyupm_mlx90614.MLX90614_name(self)

MLX90614_swigregister = _pyupm_mlx90614.MLX90614_swigregister
MLX90614_swigregister(MLX90614)

# This file is compatible with both classic and new-style classes.


