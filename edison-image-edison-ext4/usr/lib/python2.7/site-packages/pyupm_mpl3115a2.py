# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mpl3115a2', [dirname(__file__)])
        except ImportError:
            import _pyupm_mpl3115a2
            return _pyupm_mpl3115a2
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mpl3115a2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mpl3115a2 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mpl3115a2
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_mpl3115a2.MPL3115A2_NAME_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_NAME = _pyupm_mpl3115a2.MPL3115A2_NAME

_pyupm_mpl3115a2.MPL3115A2_I2C_ADDRESS_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_I2C_ADDRESS = _pyupm_mpl3115a2.MPL3115A2_I2C_ADDRESS

_pyupm_mpl3115a2.MPL3115A2_DEVICE_ID_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_DEVICE_ID = _pyupm_mpl3115a2.MPL3115A2_DEVICE_ID

_pyupm_mpl3115a2.MPL3115A2_STATUS_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_STATUS = _pyupm_mpl3115a2.MPL3115A2_STATUS

_pyupm_mpl3115a2.MPL3115A2_OUT_PRESS_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_OUT_PRESS = _pyupm_mpl3115a2.MPL3115A2_OUT_PRESS

_pyupm_mpl3115a2.MPL3115A2_OUT_TEMP_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_OUT_TEMP = _pyupm_mpl3115a2.MPL3115A2_OUT_TEMP

_pyupm_mpl3115a2.MPL3115A2_WHO_AM_I_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_WHO_AM_I = _pyupm_mpl3115a2.MPL3115A2_WHO_AM_I

_pyupm_mpl3115a2.MPL3115A2_PT_DATA_CFG_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_PT_DATA_CFG = _pyupm_mpl3115a2.MPL3115A2_PT_DATA_CFG

_pyupm_mpl3115a2.MPL3115A2_P_MIN_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_P_MIN = _pyupm_mpl3115a2.MPL3115A2_P_MIN

_pyupm_mpl3115a2.MPL3115A2_T_MIN_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_T_MIN = _pyupm_mpl3115a2.MPL3115A2_T_MIN

_pyupm_mpl3115a2.MPL3115A2_P_MAX_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_P_MAX = _pyupm_mpl3115a2.MPL3115A2_P_MAX

_pyupm_mpl3115a2.MPL3115A2_T_MAX_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_T_MAX = _pyupm_mpl3115a2.MPL3115A2_T_MAX

_pyupm_mpl3115a2.MPL3115A2_CTRL_REG1_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_CTRL_REG1 = _pyupm_mpl3115a2.MPL3115A2_CTRL_REG1

_pyupm_mpl3115a2.MPL3115A2_CTRL_SBYB_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_CTRL_SBYB = _pyupm_mpl3115a2.MPL3115A2_CTRL_SBYB

_pyupm_mpl3115a2.MPL3115A2_CTRL_OST_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_CTRL_OST = _pyupm_mpl3115a2.MPL3115A2_CTRL_OST

_pyupm_mpl3115a2.MPL3115A2_CTRL_RESET_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_CTRL_RESET = _pyupm_mpl3115a2.MPL3115A2_CTRL_RESET

_pyupm_mpl3115a2.MPL3115A2_CTRL_ALT_MODE_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_CTRL_ALT_MODE = _pyupm_mpl3115a2.MPL3115A2_CTRL_ALT_MODE

_pyupm_mpl3115a2.MPL3115A2_MAXOVERSAMPLE_swigconstant(_pyupm_mpl3115a2)
MPL3115A2_MAXOVERSAMPLE = _pyupm_mpl3115a2.MPL3115A2_MAXOVERSAMPLE
class MPL3115A2(_object):
    """Proxy of C++ upm::MPL3115A2 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPL3115A2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPL3115A2, name)
    __repr__ = _swig_repr

    def __init__(self, bus, devAddr=0x60, mode=6):
        """
        __init__(upm::MPL3115A2 self, int bus, int devAddr=0x60, uint8_t mode=6) -> MPL3115A2

        Parameters:
            bus: int
            devAddr: int
            mode: uint8_t

        __init__(upm::MPL3115A2 self, int bus, int devAddr=0x60) -> MPL3115A2

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::MPL3115A2 self, int bus) -> MPL3115A2

        Parameters:
            bus: int

        """
        this = _pyupm_mpl3115a2.new_MPL3115A2(bus, devAddr, mode)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpl3115a2.delete_MPL3115A2
    __del__ = lambda self: None

    def testSensor(self):
        """
        testSensor(MPL3115A2 self) -> int

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_testSensor(self)


    def resetSensor(self):
        """
        resetSensor(MPL3115A2 self) -> int

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_resetSensor(self)


    def dumpSensor(self):
        """
        dumpSensor(MPL3115A2 self)

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_dumpSensor(self)


    def sampleData(self):
        """
        sampleData(MPL3115A2 self) -> int

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_sampleData(self)


    def getPressureReg(self, reg):
        """
        getPressureReg(MPL3115A2 self, int reg) -> int32_t

        Parameters:
            reg: int

        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressureReg(self, reg)


    def getTempReg(self, reg):
        """
        getTempReg(MPL3115A2 self, int reg) -> int32_t

        Parameters:
            reg: int

        """
        return _pyupm_mpl3115a2.MPL3115A2_getTempReg(self, reg)


    def getPressure(self, bSampleData=True):
        """
        getPressure(MPL3115A2 self, int bSampleData=True) -> float

        Parameters:
            bSampleData: int

        getPressure(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressure(self, bSampleData)


    def getTemperature(self, bSampleData=True):
        """
        getTemperature(MPL3115A2 self, int bSampleData=True) -> float

        Parameters:
            bSampleData: int

        getTemperature(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getTemperature(self, bSampleData)


    def getSealevelPressure(self, altitudeMeters=0.0):
        """
        getSealevelPressure(MPL3115A2 self, float altitudeMeters=0.0) -> float

        Parameters:
            altitudeMeters: float

        getSealevelPressure(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getSealevelPressure(self, altitudeMeters)


    def getAltitude(self, sealevelPressure=101325.0):
        """
        getAltitude(MPL3115A2 self, float sealevelPressure=101325.0) -> float

        Parameters:
            sealevelPressure: float

        getAltitude(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getAltitude(self, sealevelPressure)


    def setOversampling(self, oversampling):
        """
        setOversampling(MPL3115A2 self, uint8_t oversampling)

        Parameters:
            oversampling: uint8_t

        """
        return _pyupm_mpl3115a2.MPL3115A2_setOversampling(self, oversampling)


    def getOversampling(self):
        """
        getOversampling(MPL3115A2 self) -> uint8_t

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getOversampling(self)


    def getTemperatureMax(self):
        """
        getTemperatureMax(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getTemperatureMax(self)


    def getTemperatureMin(self):
        """
        getTemperatureMin(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getTemperatureMin(self)


    def getPressureMax(self):
        """
        getPressureMax(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressureMax(self)


    def getPressureMin(self):
        """
        getPressureMin(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *

        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressureMin(self)


    def convertTempCtoF(self, fTemp):
        """
        convertTempCtoF(MPL3115A2 self, float fTemp) -> float

        Parameters:
            fTemp: float

        """
        return _pyupm_mpl3115a2.MPL3115A2_convertTempCtoF(self, fTemp)


    def convertPaToinHg(self, fPressure):
        """
        convertPaToinHg(MPL3115A2 self, float fPressure) -> float

        Parameters:
            fPressure: float

        """
        return _pyupm_mpl3115a2.MPL3115A2_convertPaToinHg(self, fPressure)


    def i2cWriteReg(self, reg, value):
        """
        i2cWriteReg(MPL3115A2 self, uint8_t reg, uint8_t value) -> mraa_result_t

        Parameters:
            reg: uint8_t
            value: uint8_t

        """
        return _pyupm_mpl3115a2.MPL3115A2_i2cWriteReg(self, reg, value)


    def i2cReadReg_16(self, reg):
        """
        i2cReadReg_16(MPL3115A2 self, int reg) -> uint16_t

        Parameters:
            reg: int

        """
        return _pyupm_mpl3115a2.MPL3115A2_i2cReadReg_16(self, reg)


    def i2cReadReg_8(self, reg):
        """
        i2cReadReg_8(MPL3115A2 self, int reg) -> uint8_t

        Parameters:
            reg: int

        """
        return _pyupm_mpl3115a2.MPL3115A2_i2cReadReg_8(self, reg)

MPL3115A2_swigregister = _pyupm_mpl3115a2.MPL3115A2_swigregister
MPL3115A2_swigregister(MPL3115A2)

# This file is compatible with both classic and new-style classes.


