# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mpu9150', [dirname(__file__)])
        except ImportError:
            import _pyupm_mpu9150
            return _pyupm_mpu9150
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mpu9150', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mpu9150 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mpu9150
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_mpu9150.MPU6050_ADDRESS_AD0_LOW_swigconstant(_pyupm_mpu9150)
MPU6050_ADDRESS_AD0_LOW = _pyupm_mpu9150.MPU6050_ADDRESS_AD0_LOW

_pyupm_mpu9150.MPU6050_ADDRESS_AD0_HIGH_swigconstant(_pyupm_mpu9150)
MPU6050_ADDRESS_AD0_HIGH = _pyupm_mpu9150.MPU6050_ADDRESS_AD0_HIGH

_pyupm_mpu9150.ADDR_swigconstant(_pyupm_mpu9150)
ADDR = _pyupm_mpu9150.ADDR

_pyupm_mpu9150.MPU6050_CLOCK_PLL_XGYRO_swigconstant(_pyupm_mpu9150)
MPU6050_CLOCK_PLL_XGYRO = _pyupm_mpu9150.MPU6050_CLOCK_PLL_XGYRO

_pyupm_mpu9150.MPU6050_GYRO_FS_250_swigconstant(_pyupm_mpu9150)
MPU6050_GYRO_FS_250 = _pyupm_mpu9150.MPU6050_GYRO_FS_250

_pyupm_mpu9150.MPU6050_ACCEL_FS_2_swigconstant(_pyupm_mpu9150)
MPU6050_ACCEL_FS_2 = _pyupm_mpu9150.MPU6050_ACCEL_FS_2

_pyupm_mpu9150.MPU6050_RA_INT_PIN_CFG_swigconstant(_pyupm_mpu9150)
MPU6050_RA_INT_PIN_CFG = _pyupm_mpu9150.MPU6050_RA_INT_PIN_CFG

_pyupm_mpu9150.MPU6050_RA_ACCEL_XOUT_H_swigconstant(_pyupm_mpu9150)
MPU6050_RA_ACCEL_XOUT_H = _pyupm_mpu9150.MPU6050_RA_ACCEL_XOUT_H

_pyupm_mpu9150.MPU6050_RA_ACCEL_XOUT_L_swigconstant(_pyupm_mpu9150)
MPU6050_RA_ACCEL_XOUT_L = _pyupm_mpu9150.MPU6050_RA_ACCEL_XOUT_L

_pyupm_mpu9150.MPU6050_RA_ACCEL_YOUT_H_swigconstant(_pyupm_mpu9150)
MPU6050_RA_ACCEL_YOUT_H = _pyupm_mpu9150.MPU6050_RA_ACCEL_YOUT_H

_pyupm_mpu9150.MPU6050_RA_ACCEL_YOUT_L_swigconstant(_pyupm_mpu9150)
MPU6050_RA_ACCEL_YOUT_L = _pyupm_mpu9150.MPU6050_RA_ACCEL_YOUT_L

_pyupm_mpu9150.MPU6050_RA_ACCEL_ZOUT_H_swigconstant(_pyupm_mpu9150)
MPU6050_RA_ACCEL_ZOUT_H = _pyupm_mpu9150.MPU6050_RA_ACCEL_ZOUT_H

_pyupm_mpu9150.MPU6050_RA_ACCEL_ZOUT_L_swigconstant(_pyupm_mpu9150)
MPU6050_RA_ACCEL_ZOUT_L = _pyupm_mpu9150.MPU6050_RA_ACCEL_ZOUT_L

_pyupm_mpu9150.MPU6050_RA_TEMP_OUT_H_swigconstant(_pyupm_mpu9150)
MPU6050_RA_TEMP_OUT_H = _pyupm_mpu9150.MPU6050_RA_TEMP_OUT_H

_pyupm_mpu9150.MPU6050_RA_TEMP_OUT_L_swigconstant(_pyupm_mpu9150)
MPU6050_RA_TEMP_OUT_L = _pyupm_mpu9150.MPU6050_RA_TEMP_OUT_L

_pyupm_mpu9150.MPU6050_RA_GYRO_XOUT_H_swigconstant(_pyupm_mpu9150)
MPU6050_RA_GYRO_XOUT_H = _pyupm_mpu9150.MPU6050_RA_GYRO_XOUT_H

_pyupm_mpu9150.MPU6050_RA_GYRO_XOUT_L_swigconstant(_pyupm_mpu9150)
MPU6050_RA_GYRO_XOUT_L = _pyupm_mpu9150.MPU6050_RA_GYRO_XOUT_L

_pyupm_mpu9150.MPU6050_RA_GYRO_YOUT_H_swigconstant(_pyupm_mpu9150)
MPU6050_RA_GYRO_YOUT_H = _pyupm_mpu9150.MPU6050_RA_GYRO_YOUT_H

_pyupm_mpu9150.MPU6050_RA_GYRO_YOUT_L_swigconstant(_pyupm_mpu9150)
MPU6050_RA_GYRO_YOUT_L = _pyupm_mpu9150.MPU6050_RA_GYRO_YOUT_L

_pyupm_mpu9150.MPU6050_RA_GYRO_ZOUT_H_swigconstant(_pyupm_mpu9150)
MPU6050_RA_GYRO_ZOUT_H = _pyupm_mpu9150.MPU6050_RA_GYRO_ZOUT_H

_pyupm_mpu9150.MPU6050_RA_GYRO_ZOUT_L_swigconstant(_pyupm_mpu9150)
MPU6050_RA_GYRO_ZOUT_L = _pyupm_mpu9150.MPU6050_RA_GYRO_ZOUT_L

_pyupm_mpu9150.MPU6050_RA_CONFIG_swigconstant(_pyupm_mpu9150)
MPU6050_RA_CONFIG = _pyupm_mpu9150.MPU6050_RA_CONFIG

_pyupm_mpu9150.MPU6050_CFG_DLPF_CFG_BIT_swigconstant(_pyupm_mpu9150)
MPU6050_CFG_DLPF_CFG_BIT = _pyupm_mpu9150.MPU6050_CFG_DLPF_CFG_BIT

_pyupm_mpu9150.MPU6050_CFG_DLPF_CFG_LENGTH_swigconstant(_pyupm_mpu9150)
MPU6050_CFG_DLPF_CFG_LENGTH = _pyupm_mpu9150.MPU6050_CFG_DLPF_CFG_LENGTH

_pyupm_mpu9150.MPU6050_RA_GYRO_CONFIG_swigconstant(_pyupm_mpu9150)
MPU6050_RA_GYRO_CONFIG = _pyupm_mpu9150.MPU6050_RA_GYRO_CONFIG

_pyupm_mpu9150.MPU6050_GCONFIG_FS_SEL_BIT_swigconstant(_pyupm_mpu9150)
MPU6050_GCONFIG_FS_SEL_BIT = _pyupm_mpu9150.MPU6050_GCONFIG_FS_SEL_BIT

_pyupm_mpu9150.MPU6050_GCONFIG_FS_SEL_LENGTH_swigconstant(_pyupm_mpu9150)
MPU6050_GCONFIG_FS_SEL_LENGTH = _pyupm_mpu9150.MPU6050_GCONFIG_FS_SEL_LENGTH

_pyupm_mpu9150.MPU6050_RA_ACCEL_CONFIG_swigconstant(_pyupm_mpu9150)
MPU6050_RA_ACCEL_CONFIG = _pyupm_mpu9150.MPU6050_RA_ACCEL_CONFIG

_pyupm_mpu9150.MPU6050_ACONFIG_AFS_SEL_BIT_swigconstant(_pyupm_mpu9150)
MPU6050_ACONFIG_AFS_SEL_BIT = _pyupm_mpu9150.MPU6050_ACONFIG_AFS_SEL_BIT

_pyupm_mpu9150.MPU6050_ACONFIG_AFS_SEL_LENGTH_swigconstant(_pyupm_mpu9150)
MPU6050_ACONFIG_AFS_SEL_LENGTH = _pyupm_mpu9150.MPU6050_ACONFIG_AFS_SEL_LENGTH

_pyupm_mpu9150.MPU9150_RA_MAG_ADDRESS_swigconstant(_pyupm_mpu9150)
MPU9150_RA_MAG_ADDRESS = _pyupm_mpu9150.MPU9150_RA_MAG_ADDRESS

_pyupm_mpu9150.MPU9150_RA_MAG_XOUT_L_swigconstant(_pyupm_mpu9150)
MPU9150_RA_MAG_XOUT_L = _pyupm_mpu9150.MPU9150_RA_MAG_XOUT_L

_pyupm_mpu9150.MPU6050_RA_PWR_MGMT_1_swigconstant(_pyupm_mpu9150)
MPU6050_RA_PWR_MGMT_1 = _pyupm_mpu9150.MPU6050_RA_PWR_MGMT_1

_pyupm_mpu9150.MPU6050_PWR1_CLKSEL_BIT_swigconstant(_pyupm_mpu9150)
MPU6050_PWR1_CLKSEL_BIT = _pyupm_mpu9150.MPU6050_PWR1_CLKSEL_BIT

_pyupm_mpu9150.MPU6050_PWR1_CLKSEL_LENGTH_swigconstant(_pyupm_mpu9150)
MPU6050_PWR1_CLKSEL_LENGTH = _pyupm_mpu9150.MPU6050_PWR1_CLKSEL_LENGTH

_pyupm_mpu9150.MPU6050_PWR1_SLEEP_BIT_swigconstant(_pyupm_mpu9150)
MPU6050_PWR1_SLEEP_BIT = _pyupm_mpu9150.MPU6050_PWR1_SLEEP_BIT

_pyupm_mpu9150.MPU6050_PWR1_TEMP_DIS_BIT_swigconstant(_pyupm_mpu9150)
MPU6050_PWR1_TEMP_DIS_BIT = _pyupm_mpu9150.MPU6050_PWR1_TEMP_DIS_BIT

_pyupm_mpu9150.MPU6050_RA_WHO_AM_I_swigconstant(_pyupm_mpu9150)
MPU6050_RA_WHO_AM_I = _pyupm_mpu9150.MPU6050_RA_WHO_AM_I

_pyupm_mpu9150.MPU6050_WHO_AM_I_BIT_swigconstant(_pyupm_mpu9150)
MPU6050_WHO_AM_I_BIT = _pyupm_mpu9150.MPU6050_WHO_AM_I_BIT

_pyupm_mpu9150.MPU6050_WHO_AM_I_LENGTH_swigconstant(_pyupm_mpu9150)
MPU6050_WHO_AM_I_LENGTH = _pyupm_mpu9150.MPU6050_WHO_AM_I_LENGTH

_pyupm_mpu9150.SMOOTH_TIMES_swigconstant(_pyupm_mpu9150)
SMOOTH_TIMES = _pyupm_mpu9150.SMOOTH_TIMES

_pyupm_mpu9150.HIGH_swigconstant(_pyupm_mpu9150)
HIGH = _pyupm_mpu9150.HIGH

_pyupm_mpu9150.LOW_swigconstant(_pyupm_mpu9150)
LOW = _pyupm_mpu9150.LOW
class Vector3DRaw(_object):
    """Proxy of C++ upm::Vector3DRaw class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3DRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3DRaw, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisX"] = _pyupm_mpu9150.Vector3DRaw_axisX_set
    __swig_getmethods__["axisX"] = _pyupm_mpu9150.Vector3DRaw_axisX_get
    if _newclass:
        axisX = _swig_property(_pyupm_mpu9150.Vector3DRaw_axisX_get, _pyupm_mpu9150.Vector3DRaw_axisX_set)
    __swig_setmethods__["axisY"] = _pyupm_mpu9150.Vector3DRaw_axisY_set
    __swig_getmethods__["axisY"] = _pyupm_mpu9150.Vector3DRaw_axisY_get
    if _newclass:
        axisY = _swig_property(_pyupm_mpu9150.Vector3DRaw_axisY_get, _pyupm_mpu9150.Vector3DRaw_axisY_set)
    __swig_setmethods__["axisZ"] = _pyupm_mpu9150.Vector3DRaw_axisZ_set
    __swig_getmethods__["axisZ"] = _pyupm_mpu9150.Vector3DRaw_axisZ_get
    if _newclass:
        axisZ = _swig_property(_pyupm_mpu9150.Vector3DRaw_axisZ_get, _pyupm_mpu9150.Vector3DRaw_axisZ_set)

    def __init__(self):
        """__init__(upm::Vector3DRaw self) -> Vector3DRaw"""
        this = _pyupm_mpu9150.new_Vector3DRaw()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_Vector3DRaw
    __del__ = lambda self: None
Vector3DRaw_swigregister = _pyupm_mpu9150.Vector3DRaw_swigregister
Vector3DRaw_swigregister(Vector3DRaw)

class Vector3D(_object):
    """Proxy of C++ upm::Vector3D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axisX"] = _pyupm_mpu9150.Vector3D_axisX_set
    __swig_getmethods__["axisX"] = _pyupm_mpu9150.Vector3D_axisX_get
    if _newclass:
        axisX = _swig_property(_pyupm_mpu9150.Vector3D_axisX_get, _pyupm_mpu9150.Vector3D_axisX_set)
    __swig_setmethods__["axisY"] = _pyupm_mpu9150.Vector3D_axisY_set
    __swig_getmethods__["axisY"] = _pyupm_mpu9150.Vector3D_axisY_get
    if _newclass:
        axisY = _swig_property(_pyupm_mpu9150.Vector3D_axisY_get, _pyupm_mpu9150.Vector3D_axisY_set)
    __swig_setmethods__["axisZ"] = _pyupm_mpu9150.Vector3D_axisZ_set
    __swig_getmethods__["axisZ"] = _pyupm_mpu9150.Vector3D_axisZ_get
    if _newclass:
        axisZ = _swig_property(_pyupm_mpu9150.Vector3D_axisZ_get, _pyupm_mpu9150.Vector3D_axisZ_set)

    def __init__(self):
        """__init__(upm::Vector3D self) -> Vector3D"""
        this = _pyupm_mpu9150.new_Vector3D()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_Vector3D
    __del__ = lambda self: None
Vector3D_swigregister = _pyupm_mpu9150.Vector3D_swigregister
Vector3D_swigregister(Vector3D)

class AxisData(_object):
    """Proxy of C++ upm::AxisData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rawData"] = _pyupm_mpu9150.AxisData_rawData_set
    __swig_getmethods__["rawData"] = _pyupm_mpu9150.AxisData_rawData_get
    if _newclass:
        rawData = _swig_property(_pyupm_mpu9150.AxisData_rawData_get, _pyupm_mpu9150.AxisData_rawData_set)
    __swig_setmethods__["sumData"] = _pyupm_mpu9150.AxisData_sumData_set
    __swig_getmethods__["sumData"] = _pyupm_mpu9150.AxisData_sumData_get
    if _newclass:
        sumData = _swig_property(_pyupm_mpu9150.AxisData_sumData_get, _pyupm_mpu9150.AxisData_sumData_set)
    __swig_setmethods__["data"] = _pyupm_mpu9150.AxisData_data_set
    __swig_getmethods__["data"] = _pyupm_mpu9150.AxisData_data_get
    if _newclass:
        data = _swig_property(_pyupm_mpu9150.AxisData_data_get, _pyupm_mpu9150.AxisData_data_set)

    def __init__(self):
        """__init__(upm::AxisData self) -> AxisData"""
        this = _pyupm_mpu9150.new_AxisData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_AxisData
    __del__ = lambda self: None
AxisData_swigregister = _pyupm_mpu9150.AxisData_swigregister
AxisData_swigregister(AxisData)

class MPU9150(_object):
    """Proxy of C++ upm::MPU9150 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPU9150, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPU9150, name)
    __repr__ = _swig_repr

    def __init__(self, bus=0, devAddr=0x68):
        """
        __init__(upm::MPU9150 self, int bus=0, int devAddr=0x68) -> MPU9150

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::MPU9150 self, int bus=0) -> MPU9150

        Parameters:
            bus: int

        __init__(upm::MPU9150 self) -> MPU9150
        """
        this = _pyupm_mpu9150.new_MPU9150(bus, devAddr)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_mpu9150.delete_MPU9150
    __del__ = lambda self: None

    def initSensor(self):
        """
        initSensor(MPU9150 self) -> mraa_result_t

        Parameters:
            self: upm::MPU9150 *

        """
        return _pyupm_mpu9150.MPU9150_initSensor(self)


    def getDeviceID(self):
        """
        getDeviceID(MPU9150 self) -> uint8_t

        Parameters:
            self: upm::MPU9150 *

        """
        return _pyupm_mpu9150.MPU9150_getDeviceID(self)


    def getData(self):
        """
        getData(MPU9150 self) -> mraa_result_t

        Parameters:
            self: upm::MPU9150 *

        """
        return _pyupm_mpu9150.MPU9150_getData(self)


    def getAcceleromter(self, data):
        """
        getAcceleromter(MPU9150 self, Vector3D data) -> mraa_result_t

        Parameters:
            data: upm::Vector3D *

        """
        return _pyupm_mpu9150.MPU9150_getAcceleromter(self, data)


    def getGyro(self, data):
        """
        getGyro(MPU9150 self, Vector3D data) -> mraa_result_t

        Parameters:
            data: upm::Vector3D *

        """
        return _pyupm_mpu9150.MPU9150_getGyro(self, data)


    def getMagnometer(self, data):
        """
        getMagnometer(MPU9150 self, Vector3D data) -> mraa_result_t

        Parameters:
            data: upm::Vector3D *

        """
        return _pyupm_mpu9150.MPU9150_getMagnometer(self, data)


    def getTemperature(self):
        """
        getTemperature(MPU9150 self) -> float

        Parameters:
            self: upm::MPU9150 *

        """
        return _pyupm_mpu9150.MPU9150_getTemperature(self)


    def name(self):
        """
        name(MPU9150 self) -> std::string

        Parameters:
            self: upm::MPU9150 *

        """
        return _pyupm_mpu9150.MPU9150_name(self)

MPU9150_swigregister = _pyupm_mpu9150.MPU9150_swigregister
MPU9150_swigregister(MPU9150)

# This file is compatible with both classic and new-style classes.


