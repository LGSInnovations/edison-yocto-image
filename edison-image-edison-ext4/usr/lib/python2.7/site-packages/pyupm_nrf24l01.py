# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_nrf24l01', [dirname(__file__)])
        except ImportError:
            import _pyupm_nrf24l01
            return _pyupm_nrf24l01
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_nrf24l01', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_nrf24l01 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_nrf24l01
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_nrf24l01.CONFIG_swigconstant(_pyupm_nrf24l01)
CONFIG = _pyupm_nrf24l01.CONFIG

_pyupm_nrf24l01.EN_AA_swigconstant(_pyupm_nrf24l01)
EN_AA = _pyupm_nrf24l01.EN_AA

_pyupm_nrf24l01.EN_RXADDR_swigconstant(_pyupm_nrf24l01)
EN_RXADDR = _pyupm_nrf24l01.EN_RXADDR

_pyupm_nrf24l01.SETUP_AW_swigconstant(_pyupm_nrf24l01)
SETUP_AW = _pyupm_nrf24l01.SETUP_AW

_pyupm_nrf24l01.SETUP_RETR_swigconstant(_pyupm_nrf24l01)
SETUP_RETR = _pyupm_nrf24l01.SETUP_RETR

_pyupm_nrf24l01.RF_CH_swigconstant(_pyupm_nrf24l01)
RF_CH = _pyupm_nrf24l01.RF_CH

_pyupm_nrf24l01.RF_SETUP_swigconstant(_pyupm_nrf24l01)
RF_SETUP = _pyupm_nrf24l01.RF_SETUP

_pyupm_nrf24l01.STATUS_swigconstant(_pyupm_nrf24l01)
STATUS = _pyupm_nrf24l01.STATUS

_pyupm_nrf24l01.OBSERVE_TX_swigconstant(_pyupm_nrf24l01)
OBSERVE_TX = _pyupm_nrf24l01.OBSERVE_TX

_pyupm_nrf24l01.CD_swigconstant(_pyupm_nrf24l01)
CD = _pyupm_nrf24l01.CD

_pyupm_nrf24l01.RX_ADDR_P0_swigconstant(_pyupm_nrf24l01)
RX_ADDR_P0 = _pyupm_nrf24l01.RX_ADDR_P0

_pyupm_nrf24l01.RX_ADDR_P1_swigconstant(_pyupm_nrf24l01)
RX_ADDR_P1 = _pyupm_nrf24l01.RX_ADDR_P1

_pyupm_nrf24l01.RX_ADDR_P2_swigconstant(_pyupm_nrf24l01)
RX_ADDR_P2 = _pyupm_nrf24l01.RX_ADDR_P2

_pyupm_nrf24l01.RX_ADDR_P3_swigconstant(_pyupm_nrf24l01)
RX_ADDR_P3 = _pyupm_nrf24l01.RX_ADDR_P3

_pyupm_nrf24l01.RX_ADDR_P4_swigconstant(_pyupm_nrf24l01)
RX_ADDR_P4 = _pyupm_nrf24l01.RX_ADDR_P4

_pyupm_nrf24l01.RX_ADDR_P5_swigconstant(_pyupm_nrf24l01)
RX_ADDR_P5 = _pyupm_nrf24l01.RX_ADDR_P5

_pyupm_nrf24l01.TX_ADDR_swigconstant(_pyupm_nrf24l01)
TX_ADDR = _pyupm_nrf24l01.TX_ADDR

_pyupm_nrf24l01.RX_PW_P0_swigconstant(_pyupm_nrf24l01)
RX_PW_P0 = _pyupm_nrf24l01.RX_PW_P0

_pyupm_nrf24l01.RX_PW_P1_swigconstant(_pyupm_nrf24l01)
RX_PW_P1 = _pyupm_nrf24l01.RX_PW_P1

_pyupm_nrf24l01.RX_PW_P2_swigconstant(_pyupm_nrf24l01)
RX_PW_P2 = _pyupm_nrf24l01.RX_PW_P2

_pyupm_nrf24l01.RX_PW_P3_swigconstant(_pyupm_nrf24l01)
RX_PW_P3 = _pyupm_nrf24l01.RX_PW_P3

_pyupm_nrf24l01.RX_PW_P4_swigconstant(_pyupm_nrf24l01)
RX_PW_P4 = _pyupm_nrf24l01.RX_PW_P4

_pyupm_nrf24l01.RX_PW_P5_swigconstant(_pyupm_nrf24l01)
RX_PW_P5 = _pyupm_nrf24l01.RX_PW_P5

_pyupm_nrf24l01.FIFO_STATUS_swigconstant(_pyupm_nrf24l01)
FIFO_STATUS = _pyupm_nrf24l01.FIFO_STATUS

_pyupm_nrf24l01.DYNPD_swigconstant(_pyupm_nrf24l01)
DYNPD = _pyupm_nrf24l01.DYNPD

_pyupm_nrf24l01.FEATURE_swigconstant(_pyupm_nrf24l01)
FEATURE = _pyupm_nrf24l01.FEATURE

_pyupm_nrf24l01.MASK_RX_DR_swigconstant(_pyupm_nrf24l01)
MASK_RX_DR = _pyupm_nrf24l01.MASK_RX_DR

_pyupm_nrf24l01.MASK_TX_DS_swigconstant(_pyupm_nrf24l01)
MASK_TX_DS = _pyupm_nrf24l01.MASK_TX_DS

_pyupm_nrf24l01.MASK_MAX_RT_swigconstant(_pyupm_nrf24l01)
MASK_MAX_RT = _pyupm_nrf24l01.MASK_MAX_RT

_pyupm_nrf24l01.EN_CRC_swigconstant(_pyupm_nrf24l01)
EN_CRC = _pyupm_nrf24l01.EN_CRC

_pyupm_nrf24l01.CRCO_swigconstant(_pyupm_nrf24l01)
CRCO = _pyupm_nrf24l01.CRCO

_pyupm_nrf24l01.PWR_UP_swigconstant(_pyupm_nrf24l01)
PWR_UP = _pyupm_nrf24l01.PWR_UP

_pyupm_nrf24l01.PRIM_RX_swigconstant(_pyupm_nrf24l01)
PRIM_RX = _pyupm_nrf24l01.PRIM_RX

_pyupm_nrf24l01.ENAA_P5_swigconstant(_pyupm_nrf24l01)
ENAA_P5 = _pyupm_nrf24l01.ENAA_P5

_pyupm_nrf24l01.ENAA_P4_swigconstant(_pyupm_nrf24l01)
ENAA_P4 = _pyupm_nrf24l01.ENAA_P4

_pyupm_nrf24l01.ENAA_P3_swigconstant(_pyupm_nrf24l01)
ENAA_P3 = _pyupm_nrf24l01.ENAA_P3

_pyupm_nrf24l01.ENAA_P2_swigconstant(_pyupm_nrf24l01)
ENAA_P2 = _pyupm_nrf24l01.ENAA_P2

_pyupm_nrf24l01.ENAA_P1_swigconstant(_pyupm_nrf24l01)
ENAA_P1 = _pyupm_nrf24l01.ENAA_P1

_pyupm_nrf24l01.ENAA_P0_swigconstant(_pyupm_nrf24l01)
ENAA_P0 = _pyupm_nrf24l01.ENAA_P0

_pyupm_nrf24l01.ERX_P5_swigconstant(_pyupm_nrf24l01)
ERX_P5 = _pyupm_nrf24l01.ERX_P5

_pyupm_nrf24l01.ERX_P4_swigconstant(_pyupm_nrf24l01)
ERX_P4 = _pyupm_nrf24l01.ERX_P4

_pyupm_nrf24l01.ERX_P3_swigconstant(_pyupm_nrf24l01)
ERX_P3 = _pyupm_nrf24l01.ERX_P3

_pyupm_nrf24l01.ERX_P2_swigconstant(_pyupm_nrf24l01)
ERX_P2 = _pyupm_nrf24l01.ERX_P2

_pyupm_nrf24l01.ERX_P1_swigconstant(_pyupm_nrf24l01)
ERX_P1 = _pyupm_nrf24l01.ERX_P1

_pyupm_nrf24l01.ERX_P0_swigconstant(_pyupm_nrf24l01)
ERX_P0 = _pyupm_nrf24l01.ERX_P0

_pyupm_nrf24l01.AW_swigconstant(_pyupm_nrf24l01)
AW = _pyupm_nrf24l01.AW

_pyupm_nrf24l01.ARD_swigconstant(_pyupm_nrf24l01)
ARD = _pyupm_nrf24l01.ARD

_pyupm_nrf24l01.ARC_swigconstant(_pyupm_nrf24l01)
ARC = _pyupm_nrf24l01.ARC

_pyupm_nrf24l01.PLL_LOCK_swigconstant(_pyupm_nrf24l01)
PLL_LOCK = _pyupm_nrf24l01.PLL_LOCK

_pyupm_nrf24l01.RF_DR_swigconstant(_pyupm_nrf24l01)
RF_DR = _pyupm_nrf24l01.RF_DR

_pyupm_nrf24l01.RF_PWR_swigconstant(_pyupm_nrf24l01)
RF_PWR = _pyupm_nrf24l01.RF_PWR

_pyupm_nrf24l01.LNA_HCURR_swigconstant(_pyupm_nrf24l01)
LNA_HCURR = _pyupm_nrf24l01.LNA_HCURR

_pyupm_nrf24l01.RX_DR_swigconstant(_pyupm_nrf24l01)
RX_DR = _pyupm_nrf24l01.RX_DR

_pyupm_nrf24l01.TX_DS_swigconstant(_pyupm_nrf24l01)
TX_DS = _pyupm_nrf24l01.TX_DS

_pyupm_nrf24l01.MAX_RT_swigconstant(_pyupm_nrf24l01)
MAX_RT = _pyupm_nrf24l01.MAX_RT

_pyupm_nrf24l01.RX_P_NO_swigconstant(_pyupm_nrf24l01)
RX_P_NO = _pyupm_nrf24l01.RX_P_NO

_pyupm_nrf24l01.TX_FULL_swigconstant(_pyupm_nrf24l01)
TX_FULL = _pyupm_nrf24l01.TX_FULL

_pyupm_nrf24l01.PLOS_CNT_swigconstant(_pyupm_nrf24l01)
PLOS_CNT = _pyupm_nrf24l01.PLOS_CNT

_pyupm_nrf24l01.ARC_CNT_swigconstant(_pyupm_nrf24l01)
ARC_CNT = _pyupm_nrf24l01.ARC_CNT

_pyupm_nrf24l01.TX_REUSE_swigconstant(_pyupm_nrf24l01)
TX_REUSE = _pyupm_nrf24l01.TX_REUSE

_pyupm_nrf24l01.FIFO_FULL_swigconstant(_pyupm_nrf24l01)
FIFO_FULL = _pyupm_nrf24l01.FIFO_FULL

_pyupm_nrf24l01.TX_EMPTY_swigconstant(_pyupm_nrf24l01)
TX_EMPTY = _pyupm_nrf24l01.TX_EMPTY

_pyupm_nrf24l01.RX_FULL_swigconstant(_pyupm_nrf24l01)
RX_FULL = _pyupm_nrf24l01.RX_FULL

_pyupm_nrf24l01.RX_EMPTY_swigconstant(_pyupm_nrf24l01)
RX_EMPTY = _pyupm_nrf24l01.RX_EMPTY

_pyupm_nrf24l01.R_REGISTER_swigconstant(_pyupm_nrf24l01)
R_REGISTER = _pyupm_nrf24l01.R_REGISTER

_pyupm_nrf24l01.W_REGISTER_swigconstant(_pyupm_nrf24l01)
W_REGISTER = _pyupm_nrf24l01.W_REGISTER

_pyupm_nrf24l01.REGISTER_MASK_swigconstant(_pyupm_nrf24l01)
REGISTER_MASK = _pyupm_nrf24l01.REGISTER_MASK

_pyupm_nrf24l01.R_RX_PAYLOAD_swigconstant(_pyupm_nrf24l01)
R_RX_PAYLOAD = _pyupm_nrf24l01.R_RX_PAYLOAD

_pyupm_nrf24l01.W_TX_PAYLOAD_swigconstant(_pyupm_nrf24l01)
W_TX_PAYLOAD = _pyupm_nrf24l01.W_TX_PAYLOAD

_pyupm_nrf24l01.FLUSH_TX_swigconstant(_pyupm_nrf24l01)
FLUSH_TX = _pyupm_nrf24l01.FLUSH_TX

_pyupm_nrf24l01.FLUSH_RX_swigconstant(_pyupm_nrf24l01)
FLUSH_RX = _pyupm_nrf24l01.FLUSH_RX

_pyupm_nrf24l01.REUSE_TX_PL_swigconstant(_pyupm_nrf24l01)
REUSE_TX_PL = _pyupm_nrf24l01.REUSE_TX_PL

_pyupm_nrf24l01.NOP_swigconstant(_pyupm_nrf24l01)
NOP = _pyupm_nrf24l01.NOP

_pyupm_nrf24l01.RF_DR_LOW_swigconstant(_pyupm_nrf24l01)
RF_DR_LOW = _pyupm_nrf24l01.RF_DR_LOW

_pyupm_nrf24l01.RF_DR_HIGH_swigconstant(_pyupm_nrf24l01)
RF_DR_HIGH = _pyupm_nrf24l01.RF_DR_HIGH

_pyupm_nrf24l01.RF_PWR_LOW_swigconstant(_pyupm_nrf24l01)
RF_PWR_LOW = _pyupm_nrf24l01.RF_PWR_LOW

_pyupm_nrf24l01.RF_PWR_HIGH_swigconstant(_pyupm_nrf24l01)
RF_PWR_HIGH = _pyupm_nrf24l01.RF_PWR_HIGH

_pyupm_nrf24l01.ADDR_LEN_swigconstant(_pyupm_nrf24l01)
ADDR_LEN = _pyupm_nrf24l01.ADDR_LEN

_pyupm_nrf24l01._CONFIG_swigconstant(_pyupm_nrf24l01)
_CONFIG = _pyupm_nrf24l01._CONFIG

_pyupm_nrf24l01.MAX_BUFFER_swigconstant(_pyupm_nrf24l01)
MAX_BUFFER = _pyupm_nrf24l01.MAX_BUFFER

_pyupm_nrf24l01.HIGH_swigconstant(_pyupm_nrf24l01)
HIGH = _pyupm_nrf24l01.HIGH

_pyupm_nrf24l01.LOW_swigconstant(_pyupm_nrf24l01)
LOW = _pyupm_nrf24l01.LOW

_pyupm_nrf24l01.BLE_MAC_0_swigconstant(_pyupm_nrf24l01)
BLE_MAC_0 = _pyupm_nrf24l01.BLE_MAC_0

_pyupm_nrf24l01.BLE_MAC_1_swigconstant(_pyupm_nrf24l01)
BLE_MAC_1 = _pyupm_nrf24l01.BLE_MAC_1

_pyupm_nrf24l01.BLE_MAC_2_swigconstant(_pyupm_nrf24l01)
BLE_MAC_2 = _pyupm_nrf24l01.BLE_MAC_2

_pyupm_nrf24l01.BLE_MAC_3_swigconstant(_pyupm_nrf24l01)
BLE_MAC_3 = _pyupm_nrf24l01.BLE_MAC_3

_pyupm_nrf24l01.BLE_MAC_4_swigconstant(_pyupm_nrf24l01)
BLE_MAC_4 = _pyupm_nrf24l01.BLE_MAC_4

_pyupm_nrf24l01.BLE_MAC_5_swigconstant(_pyupm_nrf24l01)
BLE_MAC_5 = _pyupm_nrf24l01.BLE_MAC_5

_pyupm_nrf24l01.BLE_PAYLOAD_OFFSET_swigconstant(_pyupm_nrf24l01)
BLE_PAYLOAD_OFFSET = _pyupm_nrf24l01.BLE_PAYLOAD_OFFSET

_pyupm_nrf24l01.NRF_250KBPS_swigconstant(_pyupm_nrf24l01)
NRF_250KBPS = _pyupm_nrf24l01.NRF_250KBPS

_pyupm_nrf24l01.NRF_1MBPS_swigconstant(_pyupm_nrf24l01)
NRF_1MBPS = _pyupm_nrf24l01.NRF_1MBPS

_pyupm_nrf24l01.NRF_2MBPS_swigconstant(_pyupm_nrf24l01)
NRF_2MBPS = _pyupm_nrf24l01.NRF_2MBPS

_pyupm_nrf24l01.NRF_0DBM_swigconstant(_pyupm_nrf24l01)
NRF_0DBM = _pyupm_nrf24l01.NRF_0DBM

_pyupm_nrf24l01.NRF_6DBM_swigconstant(_pyupm_nrf24l01)
NRF_6DBM = _pyupm_nrf24l01.NRF_6DBM

_pyupm_nrf24l01.NRF_12DBM_swigconstant(_pyupm_nrf24l01)
NRF_12DBM = _pyupm_nrf24l01.NRF_12DBM

_pyupm_nrf24l01.NRF_18DBM_swigconstant(_pyupm_nrf24l01)
NRF_18DBM = _pyupm_nrf24l01.NRF_18DBM
class NRF24L01(_object):
    """Proxy of C++ upm::NRF24L01 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NRF24L01, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NRF24L01, name)
    __repr__ = _swig_repr

    def __init__(self, cs, ce):
        """
        __init__(upm::NRF24L01 self, uint8_t cs, uint8_t ce) -> NRF24L01

        Parameters:
            cs: uint8_t
            ce: uint8_t

        """
        this = _pyupm_nrf24l01.new_NRF24L01(cs, ce)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_nrf24l01.delete_NRF24L01
    __del__ = lambda self: None

    def name(self):
        """
        name(NRF24L01 self) -> std::string

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_name(self)


    def init(self, chipSelect, chipEnable):
        """
        init(NRF24L01 self, uint8_t chipSelect, uint8_t chipEnable)

        Parameters:
            chipSelect: uint8_t
            chipEnable: uint8_t

        """
        return _pyupm_nrf24l01.NRF24L01_init(self, chipSelect, chipEnable)


    def configure(self):
        """
        configure(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_configure(self)


    def send(self, *args):
        """
        send(NRF24L01 self, uint8_t * value)

        Parameters:
            value: uint8_t *

        send(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_send(self, *args)


    def setSourceAddress(self, addr):
        """
        setSourceAddress(NRF24L01 self, uint8_t * addr)

        Parameters:
            addr: uint8_t *

        """
        return _pyupm_nrf24l01.NRF24L01_setSourceAddress(self, addr)


    def setDestinationAddress(self, addr):
        """
        setDestinationAddress(NRF24L01 self, uint8_t * addr)

        Parameters:
            addr: uint8_t *

        """
        return _pyupm_nrf24l01.NRF24L01_setDestinationAddress(self, addr)


    def setBroadcastAddress(self, addr):
        """
        setBroadcastAddress(NRF24L01 self, uint8_t * addr)

        Parameters:
            addr: uint8_t *

        """
        return _pyupm_nrf24l01.NRF24L01_setBroadcastAddress(self, addr)


    def setPayload(self, load):
        """
        setPayload(NRF24L01 self, uint8_t load)

        Parameters:
            load: uint8_t

        """
        return _pyupm_nrf24l01.NRF24L01_setPayload(self, load)


    def dataReady(self):
        """
        dataReady(NRF24L01 self) -> bool

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_dataReady(self)


    def dataSending(self):
        """
        dataSending(NRF24L01 self) -> bool

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_dataSending(self)


    def getData(self, data):
        """
        getData(NRF24L01 self, uint8_t * data)

        Parameters:
            data: uint8_t *

        """
        return _pyupm_nrf24l01.NRF24L01_getData(self, data)


    def getStatus(self):
        """
        getStatus(NRF24L01 self) -> uint8_t

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_getStatus(self)


    def rxFifoEmpty(self):
        """
        rxFifoEmpty(NRF24L01 self) -> bool

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_rxFifoEmpty(self)


    def rxPowerUp(self):
        """
        rxPowerUp(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_rxPowerUp(self)


    def rxFlushBuffer(self):
        """
        rxFlushBuffer(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_rxFlushBuffer(self)


    def txPowerUp(self):
        """
        txPowerUp(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_txPowerUp(self)


    def powerDown(self):
        """
        powerDown(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_powerDown(self)


    def setChannel(self, channel):
        """
        setChannel(NRF24L01 self, uint8_t channel)

        Parameters:
            channel: uint8_t

        """
        return _pyupm_nrf24l01.NRF24L01_setChannel(self, channel)


    def setPower(self, power):
        """
        setPower(NRF24L01 self, upm::power_t power)

        Parameters:
            power: enum upm::power_t

        """
        return _pyupm_nrf24l01.NRF24L01_setPower(self, power)


    def setSpeedRate(self, rate):
        """
        setSpeedRate(NRF24L01 self, upm::speed_rate_t rate) -> uint8_t

        Parameters:
            rate: enum upm::speed_rate_t

        """
        return _pyupm_nrf24l01.NRF24L01_setSpeedRate(self, rate)


    def txFlushBuffer(self):
        """
        txFlushBuffer(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_txFlushBuffer(self)


    def pollListener(self):
        """
        pollListener(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_pollListener(self)


    def ceHigh(self):
        """
        ceHigh(NRF24L01 self) -> mraa_result_t

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_ceHigh(self)


    def ceLow(self):
        """
        ceLow(NRF24L01 self) -> mraa_result_t

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_ceLow(self)


    def csOn(self):
        """
        csOn(NRF24L01 self) -> mraa_result_t

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_csOn(self)


    def csOff(self):
        """
        csOff(NRF24L01 self) -> mraa_result_t

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_csOff(self)


    def setBeaconingMode(self):
        """
        setBeaconingMode(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *

        """
        return _pyupm_nrf24l01.NRF24L01_setBeaconingMode(self)


    def sendBeaconingMsg(self, msg):
        """
        sendBeaconingMsg(NRF24L01 self, uint8_t * msg)

        Parameters:
            msg: uint8_t *

        """
        return _pyupm_nrf24l01.NRF24L01_sendBeaconingMsg(self, msg)

    __swig_setmethods__["m_rxBuffer"] = _pyupm_nrf24l01.NRF24L01_m_rxBuffer_set
    __swig_getmethods__["m_rxBuffer"] = _pyupm_nrf24l01.NRF24L01_m_rxBuffer_get
    if _newclass:
        m_rxBuffer = _swig_property(_pyupm_nrf24l01.NRF24L01_m_rxBuffer_get, _pyupm_nrf24l01.NRF24L01_m_rxBuffer_set)
    __swig_setmethods__["m_txBuffer"] = _pyupm_nrf24l01.NRF24L01_m_txBuffer_set
    __swig_getmethods__["m_txBuffer"] = _pyupm_nrf24l01.NRF24L01_m_txBuffer_get
    if _newclass:
        m_txBuffer = _swig_property(_pyupm_nrf24l01.NRF24L01_m_txBuffer_get, _pyupm_nrf24l01.NRF24L01_m_txBuffer_set)
    __swig_setmethods__["m_bleBuffer"] = _pyupm_nrf24l01.NRF24L01_m_bleBuffer_set
    __swig_getmethods__["m_bleBuffer"] = _pyupm_nrf24l01.NRF24L01_m_bleBuffer_get
    if _newclass:
        m_bleBuffer = _swig_property(_pyupm_nrf24l01.NRF24L01_m_bleBuffer_get, _pyupm_nrf24l01.NRF24L01_m_bleBuffer_set)
    __swig_setmethods__["dataRecievedHandler"] = _pyupm_nrf24l01.NRF24L01_dataRecievedHandler_set
    __swig_getmethods__["dataRecievedHandler"] = _pyupm_nrf24l01.NRF24L01_dataRecievedHandler_get
    if _newclass:
        dataRecievedHandler = _swig_property(_pyupm_nrf24l01.NRF24L01_dataRecievedHandler_get, _pyupm_nrf24l01.NRF24L01_dataRecievedHandler_set)
NRF24L01_swigregister = _pyupm_nrf24l01.NRF24L01_swigregister
NRF24L01_swigregister(NRF24L01)

# This file is compatible with both classic and new-style classes.


