# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_pulsensor', [dirname(__file__)])
        except ImportError:
            import _pyupm_pulsensor
            return _pyupm_pulsensor
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_pulsensor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_pulsensor = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_pulsensor
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_pulsensor.HIGH_swigconstant(_pyupm_pulsensor)
HIGH = _pyupm_pulsensor.HIGH

_pyupm_pulsensor.LOW_swigconstant(_pyupm_pulsensor)
LOW = _pyupm_pulsensor.LOW

_pyupm_pulsensor.TRUE_swigconstant(_pyupm_pulsensor)
TRUE = _pyupm_pulsensor.TRUE

_pyupm_pulsensor.FALSE_swigconstant(_pyupm_pulsensor)
FALSE = _pyupm_pulsensor.FALSE
class clbk_data(_object):
    """Proxy of C++ clbk_data class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, clbk_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, clbk_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_heart_beat"] = _pyupm_pulsensor.clbk_data_is_heart_beat_set
    __swig_getmethods__["is_heart_beat"] = _pyupm_pulsensor.clbk_data_is_heart_beat_get
    if _newclass:
        is_heart_beat = _swig_property(_pyupm_pulsensor.clbk_data_is_heart_beat_get, _pyupm_pulsensor.clbk_data_is_heart_beat_set)

    def __init__(self):
        """__init__(clbk_data self) -> clbk_data"""
        this = _pyupm_pulsensor.new_clbk_data()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_pulsensor.delete_clbk_data
    __del__ = lambda self: None
clbk_data_swigregister = _pyupm_pulsensor.clbk_data_swigregister
clbk_data_swigregister(clbk_data)

class pulsensor_context(_object):
    """Proxy of C++ pulsensor_context class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pulsensor_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pulsensor_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sample_thread"] = _pyupm_pulsensor.pulsensor_context_sample_thread_set
    __swig_getmethods__["sample_thread"] = _pyupm_pulsensor.pulsensor_context_sample_thread_get
    if _newclass:
        sample_thread = _swig_property(_pyupm_pulsensor.pulsensor_context_sample_thread_get, _pyupm_pulsensor.pulsensor_context_sample_thread_set)
    __swig_setmethods__["sample_counter"] = _pyupm_pulsensor.pulsensor_context_sample_counter_set
    __swig_getmethods__["sample_counter"] = _pyupm_pulsensor.pulsensor_context_sample_counter_get
    if _newclass:
        sample_counter = _swig_property(_pyupm_pulsensor.pulsensor_context_sample_counter_get, _pyupm_pulsensor.pulsensor_context_sample_counter_set)
    __swig_setmethods__["last_beat_time"] = _pyupm_pulsensor.pulsensor_context_last_beat_time_set
    __swig_getmethods__["last_beat_time"] = _pyupm_pulsensor.pulsensor_context_last_beat_time_get
    if _newclass:
        last_beat_time = _swig_property(_pyupm_pulsensor.pulsensor_context_last_beat_time_get, _pyupm_pulsensor.pulsensor_context_last_beat_time_set)
    __swig_setmethods__["threshold"] = _pyupm_pulsensor.pulsensor_context_threshold_set
    __swig_getmethods__["threshold"] = _pyupm_pulsensor.pulsensor_context_threshold_get
    if _newclass:
        threshold = _swig_property(_pyupm_pulsensor.pulsensor_context_threshold_get, _pyupm_pulsensor.pulsensor_context_threshold_set)
    __swig_setmethods__["ibi_rate"] = _pyupm_pulsensor.pulsensor_context_ibi_rate_set
    __swig_getmethods__["ibi_rate"] = _pyupm_pulsensor.pulsensor_context_ibi_rate_get
    if _newclass:
        ibi_rate = _swig_property(_pyupm_pulsensor.pulsensor_context_ibi_rate_get, _pyupm_pulsensor.pulsensor_context_ibi_rate_set)
    __swig_setmethods__["ibi"] = _pyupm_pulsensor.pulsensor_context_ibi_set
    __swig_getmethods__["ibi"] = _pyupm_pulsensor.pulsensor_context_ibi_get
    if _newclass:
        ibi = _swig_property(_pyupm_pulsensor.pulsensor_context_ibi_get, _pyupm_pulsensor.pulsensor_context_ibi_set)
    __swig_setmethods__["trough"] = _pyupm_pulsensor.pulsensor_context_trough_set
    __swig_getmethods__["trough"] = _pyupm_pulsensor.pulsensor_context_trough_get
    if _newclass:
        trough = _swig_property(_pyupm_pulsensor.pulsensor_context_trough_get, _pyupm_pulsensor.pulsensor_context_trough_set)
    __swig_setmethods__["peak"] = _pyupm_pulsensor.pulsensor_context_peak_set
    __swig_getmethods__["peak"] = _pyupm_pulsensor.pulsensor_context_peak_get
    if _newclass:
        peak = _swig_property(_pyupm_pulsensor.pulsensor_context_peak_get, _pyupm_pulsensor.pulsensor_context_peak_set)
    __swig_setmethods__["bpm"] = _pyupm_pulsensor.pulsensor_context_bpm_set
    __swig_getmethods__["bpm"] = _pyupm_pulsensor.pulsensor_context_bpm_get
    if _newclass:
        bpm = _swig_property(_pyupm_pulsensor.pulsensor_context_bpm_get, _pyupm_pulsensor.pulsensor_context_bpm_set)
    __swig_setmethods__["apmlitude"] = _pyupm_pulsensor.pulsensor_context_apmlitude_set
    __swig_getmethods__["apmlitude"] = _pyupm_pulsensor.pulsensor_context_apmlitude_get
    if _newclass:
        apmlitude = _swig_property(_pyupm_pulsensor.pulsensor_context_apmlitude_get, _pyupm_pulsensor.pulsensor_context_apmlitude_set)
    __swig_setmethods__["qs"] = _pyupm_pulsensor.pulsensor_context_qs_set
    __swig_getmethods__["qs"] = _pyupm_pulsensor.pulsensor_context_qs_get
    if _newclass:
        qs = _swig_property(_pyupm_pulsensor.pulsensor_context_qs_get, _pyupm_pulsensor.pulsensor_context_qs_set)
    __swig_setmethods__["is_pulse"] = _pyupm_pulsensor.pulsensor_context_is_pulse_set
    __swig_getmethods__["is_pulse"] = _pyupm_pulsensor.pulsensor_context_is_pulse_get
    if _newclass:
        is_pulse = _swig_property(_pyupm_pulsensor.pulsensor_context_is_pulse_get, _pyupm_pulsensor.pulsensor_context_is_pulse_set)
    __swig_setmethods__["first_beat"] = _pyupm_pulsensor.pulsensor_context_first_beat_set
    __swig_getmethods__["first_beat"] = _pyupm_pulsensor.pulsensor_context_first_beat_get
    if _newclass:
        first_beat = _swig_property(_pyupm_pulsensor.pulsensor_context_first_beat_get, _pyupm_pulsensor.pulsensor_context_first_beat_set)
    __swig_setmethods__["second_beat"] = _pyupm_pulsensor.pulsensor_context_second_beat_set
    __swig_getmethods__["second_beat"] = _pyupm_pulsensor.pulsensor_context_second_beat_get
    if _newclass:
        second_beat = _swig_property(_pyupm_pulsensor.pulsensor_context_second_beat_get, _pyupm_pulsensor.pulsensor_context_second_beat_set)
    __swig_setmethods__["pin"] = _pyupm_pulsensor.pulsensor_context_pin_set
    __swig_getmethods__["pin"] = _pyupm_pulsensor.pulsensor_context_pin_get
    if _newclass:
        pin = _swig_property(_pyupm_pulsensor.pulsensor_context_pin_get, _pyupm_pulsensor.pulsensor_context_pin_set)
    __swig_setmethods__["ret"] = _pyupm_pulsensor.pulsensor_context_ret_set
    __swig_getmethods__["ret"] = _pyupm_pulsensor.pulsensor_context_ret_get
    if _newclass:
        ret = _swig_property(_pyupm_pulsensor.pulsensor_context_ret_get, _pyupm_pulsensor.pulsensor_context_ret_set)
    __swig_setmethods__["pin_ctx"] = _pyupm_pulsensor.pulsensor_context_pin_ctx_set
    __swig_getmethods__["pin_ctx"] = _pyupm_pulsensor.pulsensor_context_pin_ctx_get
    if _newclass:
        pin_ctx = _swig_property(_pyupm_pulsensor.pulsensor_context_pin_ctx_get, _pyupm_pulsensor.pulsensor_context_pin_ctx_set)
    __swig_setmethods__["callback"] = _pyupm_pulsensor.pulsensor_context_callback_set
    __swig_getmethods__["callback"] = _pyupm_pulsensor.pulsensor_context_callback_get
    if _newclass:
        callback = _swig_property(_pyupm_pulsensor.pulsensor_context_callback_get, _pyupm_pulsensor.pulsensor_context_callback_set)

    def __init__(self):
        """__init__(pulsensor_context self) -> pulsensor_context"""
        this = _pyupm_pulsensor.new_pulsensor_context()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_pulsensor.delete_pulsensor_context
    __del__ = lambda self: None
pulsensor_context_swigregister = _pyupm_pulsensor.pulsensor_context_swigregister
pulsensor_context_swigregister(pulsensor_context)


def init_pulsensor(ctx, handler):
    """
    init_pulsensor(pulsensor_context ctx, callback_handler handler)

    Parameters:
        ctx: pulsensor_context *
        handler: callback_handler

    """
    return _pyupm_pulsensor.init_pulsensor(ctx, handler)

def start_sampler(ctx):
    """
    start_sampler(pulsensor_context ctx)

    Parameters:
        ctx: pulsensor_context *

    """
    return _pyupm_pulsensor.start_sampler(ctx)

def stop_sampler(ctx):
    """
    stop_sampler(pulsensor_context ctx)

    Parameters:
        ctx: pulsensor_context *

    """
    return _pyupm_pulsensor.stop_sampler(ctx)

def do_sample(arg):
    """
    do_sample(void * arg) -> void *

    Parameters:
        arg: void *

    """
    return _pyupm_pulsensor.do_sample(arg)
# This file is compatible with both classic and new-style classes.

cvar = _pyupm_pulsensor.cvar

