# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_sm130', [dirname(__file__)])
        except ImportError:
            import _pyupm_sm130
            return _pyupm_sm130
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_sm130', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_sm130 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_sm130
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_sm130.SIZE_PAYLOAD_swigconstant(_pyupm_sm130)
SIZE_PAYLOAD = _pyupm_sm130.SIZE_PAYLOAD

_pyupm_sm130.SIZE_PACKET_swigconstant(_pyupm_sm130)
SIZE_PACKET = _pyupm_sm130.SIZE_PACKET

_pyupm_sm130.HIGH_swigconstant(_pyupm_sm130)
HIGH = _pyupm_sm130.HIGH

_pyupm_sm130.LOW_swigconstant(_pyupm_sm130)
LOW = _pyupm_sm130.LOW
class SM130(_object):
    """Proxy of C++ upm::SM130 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SM130, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SM130, name)
    __repr__ = _swig_repr
    MIFARE_ULTRALIGHT = _pyupm_sm130.SM130_MIFARE_ULTRALIGHT
    MIFARE_1K = _pyupm_sm130.SM130_MIFARE_1K
    MIFARE_4K = _pyupm_sm130.SM130_MIFARE_4K
    CMD_RESET = _pyupm_sm130.SM130_CMD_RESET
    CMD_VERSION = _pyupm_sm130.SM130_CMD_VERSION
    CMD_SEEK_TAG = _pyupm_sm130.SM130_CMD_SEEK_TAG
    CMD_SELECT_TAG = _pyupm_sm130.SM130_CMD_SELECT_TAG
    CMD_AUTHENTICATE = _pyupm_sm130.SM130_CMD_AUTHENTICATE
    CMD_READ16 = _pyupm_sm130.SM130_CMD_READ16
    CMD_READ_VALUE = _pyupm_sm130.SM130_CMD_READ_VALUE
    CMD_WRITE16 = _pyupm_sm130.SM130_CMD_WRITE16
    CMD_WRITE_VALUE = _pyupm_sm130.SM130_CMD_WRITE_VALUE
    CMD_WRITE4 = _pyupm_sm130.SM130_CMD_WRITE4
    CMD_WRITE_KEY = _pyupm_sm130.SM130_CMD_WRITE_KEY
    CMD_INC_VALUE = _pyupm_sm130.SM130_CMD_INC_VALUE
    CMD_DEC_VALUE = _pyupm_sm130.SM130_CMD_DEC_VALUE
    CMD_ANTENNA_POWER = _pyupm_sm130.SM130_CMD_ANTENNA_POWER
    CMD_READ_PORT = _pyupm_sm130.SM130_CMD_READ_PORT
    CMD_WRITE_PORT = _pyupm_sm130.SM130_CMD_WRITE_PORT
    CMD_HALT_TAG = _pyupm_sm130.SM130_CMD_HALT_TAG
    CMD_SET_BAUD = _pyupm_sm130.SM130_CMD_SET_BAUD
    CMD_SLEEP = _pyupm_sm130.SM130_CMD_SLEEP

    def __init__(self, bus, devAddr, rst, dready):
        """
        __init__(upm::SM130 self, int bus, int devAddr, int rst, int dready) -> SM130

        Parameters:
            bus: int
            devAddr: int
            rst: int
            dready: int

        """
        this = _pyupm_sm130.new_SM130(bus, devAddr, rst, dready)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_sm130.delete_SM130
    __del__ = lambda self: None

    def getFirmwareVersion(self):
        """
        getFirmwareVersion(SM130 self) -> char const *

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getFirmwareVersion(self)


    def available(self):
        """
        available(SM130 self) -> uint8_t

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_available(self)


    def getPacketLength(self):
        """
        getPacketLength(SM130 self) -> uint8_t

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getPacketLength(self)


    def getCommand(self):
        """
        getCommand(SM130 self) -> uint8_t

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_getCommand(self)


    def name(self):
        """
        name(SM130 self) -> std::string

        Parameters:
            self: upm::SM130 *

        """
        return _pyupm_sm130.SM130_name(self)

SM130_swigregister = _pyupm_sm130.SM130_swigregister
SM130_swigregister(SM130)

# This file is compatible with both classic and new-style classes.


