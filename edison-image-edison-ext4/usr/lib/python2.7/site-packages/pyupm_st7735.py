# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_st7735', [dirname(__file__)])
        except ImportError:
            import _pyupm_st7735
            return _pyupm_st7735
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_st7735', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_st7735 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_st7735
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_st7735.INITR_GREENTAB_swigconstant(_pyupm_st7735)
INITR_GREENTAB = _pyupm_st7735.INITR_GREENTAB

_pyupm_st7735.INITR_REDTAB_swigconstant(_pyupm_st7735)
INITR_REDTAB = _pyupm_st7735.INITR_REDTAB

_pyupm_st7735.INITR_BLACKTAB_swigconstant(_pyupm_st7735)
INITR_BLACKTAB = _pyupm_st7735.INITR_BLACKTAB

_pyupm_st7735.ST7735_TFTWIDTH_swigconstant(_pyupm_st7735)
ST7735_TFTWIDTH = _pyupm_st7735.ST7735_TFTWIDTH

_pyupm_st7735.ST7735_TFTHEIGHT_swigconstant(_pyupm_st7735)
ST7735_TFTHEIGHT = _pyupm_st7735.ST7735_TFTHEIGHT

_pyupm_st7735.ST7735_NOP_swigconstant(_pyupm_st7735)
ST7735_NOP = _pyupm_st7735.ST7735_NOP

_pyupm_st7735.ST7735_SWRESET_swigconstant(_pyupm_st7735)
ST7735_SWRESET = _pyupm_st7735.ST7735_SWRESET

_pyupm_st7735.ST7735_RDDID_swigconstant(_pyupm_st7735)
ST7735_RDDID = _pyupm_st7735.ST7735_RDDID

_pyupm_st7735.ST7735_RDDST_swigconstant(_pyupm_st7735)
ST7735_RDDST = _pyupm_st7735.ST7735_RDDST

_pyupm_st7735.ST7735_SLPIN_swigconstant(_pyupm_st7735)
ST7735_SLPIN = _pyupm_st7735.ST7735_SLPIN

_pyupm_st7735.ST7735_SLPOUT_swigconstant(_pyupm_st7735)
ST7735_SLPOUT = _pyupm_st7735.ST7735_SLPOUT

_pyupm_st7735.ST7735_PTLON_swigconstant(_pyupm_st7735)
ST7735_PTLON = _pyupm_st7735.ST7735_PTLON

_pyupm_st7735.ST7735_NORON_swigconstant(_pyupm_st7735)
ST7735_NORON = _pyupm_st7735.ST7735_NORON

_pyupm_st7735.ST7735_INVOFF_swigconstant(_pyupm_st7735)
ST7735_INVOFF = _pyupm_st7735.ST7735_INVOFF

_pyupm_st7735.ST7735_INVON_swigconstant(_pyupm_st7735)
ST7735_INVON = _pyupm_st7735.ST7735_INVON

_pyupm_st7735.ST7735_DISPOFF_swigconstant(_pyupm_st7735)
ST7735_DISPOFF = _pyupm_st7735.ST7735_DISPOFF

_pyupm_st7735.ST7735_DISPON_swigconstant(_pyupm_st7735)
ST7735_DISPON = _pyupm_st7735.ST7735_DISPON

_pyupm_st7735.ST7735_CASET_swigconstant(_pyupm_st7735)
ST7735_CASET = _pyupm_st7735.ST7735_CASET

_pyupm_st7735.ST7735_RASET_swigconstant(_pyupm_st7735)
ST7735_RASET = _pyupm_st7735.ST7735_RASET

_pyupm_st7735.ST7735_RAMWR_swigconstant(_pyupm_st7735)
ST7735_RAMWR = _pyupm_st7735.ST7735_RAMWR

_pyupm_st7735.ST7735_RAMRD_swigconstant(_pyupm_st7735)
ST7735_RAMRD = _pyupm_st7735.ST7735_RAMRD

_pyupm_st7735.ST7735_PTLAR_swigconstant(_pyupm_st7735)
ST7735_PTLAR = _pyupm_st7735.ST7735_PTLAR

_pyupm_st7735.ST7735_COLMOD_swigconstant(_pyupm_st7735)
ST7735_COLMOD = _pyupm_st7735.ST7735_COLMOD

_pyupm_st7735.ST7735_MADCTL_swigconstant(_pyupm_st7735)
ST7735_MADCTL = _pyupm_st7735.ST7735_MADCTL

_pyupm_st7735.ST7735_FRMCTR1_swigconstant(_pyupm_st7735)
ST7735_FRMCTR1 = _pyupm_st7735.ST7735_FRMCTR1

_pyupm_st7735.ST7735_FRMCTR2_swigconstant(_pyupm_st7735)
ST7735_FRMCTR2 = _pyupm_st7735.ST7735_FRMCTR2

_pyupm_st7735.ST7735_FRMCTR3_swigconstant(_pyupm_st7735)
ST7735_FRMCTR3 = _pyupm_st7735.ST7735_FRMCTR3

_pyupm_st7735.ST7735_INVCTR_swigconstant(_pyupm_st7735)
ST7735_INVCTR = _pyupm_st7735.ST7735_INVCTR

_pyupm_st7735.ST7735_DISSET5_swigconstant(_pyupm_st7735)
ST7735_DISSET5 = _pyupm_st7735.ST7735_DISSET5

_pyupm_st7735.ST7735_PWCTR1_swigconstant(_pyupm_st7735)
ST7735_PWCTR1 = _pyupm_st7735.ST7735_PWCTR1

_pyupm_st7735.ST7735_PWCTR2_swigconstant(_pyupm_st7735)
ST7735_PWCTR2 = _pyupm_st7735.ST7735_PWCTR2

_pyupm_st7735.ST7735_PWCTR3_swigconstant(_pyupm_st7735)
ST7735_PWCTR3 = _pyupm_st7735.ST7735_PWCTR3

_pyupm_st7735.ST7735_PWCTR4_swigconstant(_pyupm_st7735)
ST7735_PWCTR4 = _pyupm_st7735.ST7735_PWCTR4

_pyupm_st7735.ST7735_PWCTR5_swigconstant(_pyupm_st7735)
ST7735_PWCTR5 = _pyupm_st7735.ST7735_PWCTR5

_pyupm_st7735.ST7735_VMCTR1_swigconstant(_pyupm_st7735)
ST7735_VMCTR1 = _pyupm_st7735.ST7735_VMCTR1

_pyupm_st7735.ST7735_RDID1_swigconstant(_pyupm_st7735)
ST7735_RDID1 = _pyupm_st7735.ST7735_RDID1

_pyupm_st7735.ST7735_RDID2_swigconstant(_pyupm_st7735)
ST7735_RDID2 = _pyupm_st7735.ST7735_RDID2

_pyupm_st7735.ST7735_RDID3_swigconstant(_pyupm_st7735)
ST7735_RDID3 = _pyupm_st7735.ST7735_RDID3

_pyupm_st7735.ST7735_RDID4_swigconstant(_pyupm_st7735)
ST7735_RDID4 = _pyupm_st7735.ST7735_RDID4

_pyupm_st7735.ST7735_PWCTR6_swigconstant(_pyupm_st7735)
ST7735_PWCTR6 = _pyupm_st7735.ST7735_PWCTR6

_pyupm_st7735.ST7735_GMCTRP1_swigconstant(_pyupm_st7735)
ST7735_GMCTRP1 = _pyupm_st7735.ST7735_GMCTRP1

_pyupm_st7735.ST7735_GMCTRN1_swigconstant(_pyupm_st7735)
ST7735_GMCTRN1 = _pyupm_st7735.ST7735_GMCTRN1

_pyupm_st7735.ST7735_BLACK_swigconstant(_pyupm_st7735)
ST7735_BLACK = _pyupm_st7735.ST7735_BLACK

_pyupm_st7735.ST7735_BLUE_swigconstant(_pyupm_st7735)
ST7735_BLUE = _pyupm_st7735.ST7735_BLUE

_pyupm_st7735.ST7735_RED_swigconstant(_pyupm_st7735)
ST7735_RED = _pyupm_st7735.ST7735_RED

_pyupm_st7735.ST7735_GREEN_swigconstant(_pyupm_st7735)
ST7735_GREEN = _pyupm_st7735.ST7735_GREEN

_pyupm_st7735.ST7735_CYAN_swigconstant(_pyupm_st7735)
ST7735_CYAN = _pyupm_st7735.ST7735_CYAN

_pyupm_st7735.ST7735_MAGENTA_swigconstant(_pyupm_st7735)
ST7735_MAGENTA = _pyupm_st7735.ST7735_MAGENTA

_pyupm_st7735.ST7735_YELLOW_swigconstant(_pyupm_st7735)
ST7735_YELLOW = _pyupm_st7735.ST7735_YELLOW

_pyupm_st7735.ST7735_WHITE_swigconstant(_pyupm_st7735)
ST7735_WHITE = _pyupm_st7735.ST7735_WHITE

_pyupm_st7735.HIGH_swigconstant(_pyupm_st7735)
HIGH = _pyupm_st7735.HIGH

_pyupm_st7735.LOW_swigconstant(_pyupm_st7735)
LOW = _pyupm_st7735.LOW

_pyupm_st7735.DELAY_swigconstant(_pyupm_st7735)
DELAY = _pyupm_st7735.DELAY
class ST7735(_object):
    """Proxy of C++ upm::ST7735 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST7735, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ST7735, name)
    __repr__ = _swig_repr

    def __init__(self, csLCD, cSD, rs, rst):
        """
        __init__(upm::ST7735 self, uint8_t csLCD, uint8_t cSD, uint8_t rs, uint8_t rst) -> ST7735

        Parameters:
            csLCD: uint8_t
            cSD: uint8_t
            rs: uint8_t
            rst: uint8_t

        """
        this = _pyupm_st7735.new_ST7735(csLCD, cSD, rs, rst)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_st7735.delete_ST7735
    __del__ = lambda self: None

    def name(self):
        """
        name(ST7735 self) -> std::string

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_name(self)


    def initModule(self):
        """
        initModule(ST7735 self)

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_initModule(self)


    def configModule(self):
        """
        configModule(ST7735 self)

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_configModule(self)


    def write(self, value):
        """
        write(ST7735 self, uint8_t value)

        Parameters:
            value: uint8_t

        """
        return _pyupm_st7735.ST7735_write(self, value)


    def data(self, value):
        """
        data(ST7735 self, uint8_t value)

        Parameters:
            value: uint8_t

        """
        return _pyupm_st7735.ST7735_data(self, value)


    def executeCMDList(self, addr):
        """
        executeCMDList(ST7735 self, uint8_t const * addr)

        Parameters:
            addr: uint8_t const *

        """
        return _pyupm_st7735.ST7735_executeCMDList(self, addr)


    def setAddrWindow(self, x0, y0, x1, y1):
        """
        setAddrWindow(ST7735 self, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)

        Parameters:
            x0: uint8_t
            y0: uint8_t
            x1: uint8_t
            y1: uint8_t

        """
        return _pyupm_st7735.ST7735_setAddrWindow(self, x0, y0, x1, y1)


    def drawPixel(self, x, y, color):
        """
        drawPixel(ST7735 self, int16_t x, int16_t y, uint16_t color)

        Parameters:
            x: int16_t
            y: int16_t
            color: uint16_t

        """
        return _pyupm_st7735.ST7735_drawPixel(self, x, y, color)


    def refresh(self):
        """
        refresh(ST7735 self)

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_refresh(self)


    def lcdCSOn(self):
        """
        lcdCSOn(ST7735 self) -> mraa_result_t

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_lcdCSOn(self)


    def lcdCSOff(self):
        """
        lcdCSOff(ST7735 self) -> mraa_result_t

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_lcdCSOff(self)


    def sdCSOn(self):
        """
        sdCSOn(ST7735 self) -> mraa_result_t

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_sdCSOn(self)


    def sdCSOff(self):
        """
        sdCSOff(ST7735 self) -> mraa_result_t

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_sdCSOff(self)


    def rsHIGH(self):
        """
        rsHIGH(ST7735 self) -> mraa_result_t

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_rsHIGH(self)


    def rsLOW(self):
        """
        rsLOW(ST7735 self) -> mraa_result_t

        Parameters:
            self: upm::ST7735 *

        """
        return _pyupm_st7735.ST7735_rsLOW(self)

    __swig_setmethods__["m_map"] = _pyupm_st7735.ST7735_m_map_set
    __swig_getmethods__["m_map"] = _pyupm_st7735.ST7735_m_map_get
    if _newclass:
        m_map = _swig_property(_pyupm_st7735.ST7735_m_map_get, _pyupm_st7735.ST7735_m_map_set)
ST7735_swigregister = _pyupm_st7735.ST7735_swigregister
ST7735_swigregister(ST7735)
cvar = _pyupm_st7735.cvar
Bcmd = cvar.Bcmd
Rcmd1 = cvar.Rcmd1
Rcmd2green = cvar.Rcmd2green
Rcmd2red = cvar.Rcmd2red
Rcmd3 = cvar.Rcmd3
font = cvar.font

# This file is compatible with both classic and new-style classes.


