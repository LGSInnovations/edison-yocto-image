# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_tm1637', [dirname(__file__)])
        except ImportError:
            import _pyupm_tm1637
            return _pyupm_tm1637
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_tm1637', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_tm1637 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_tm1637
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pyupm_tm1637.TM1637_I2C_COMM1_swigconstant(_pyupm_tm1637)
TM1637_I2C_COMM1 = _pyupm_tm1637.TM1637_I2C_COMM1

_pyupm_tm1637.TM1637_I2C_COMM2_swigconstant(_pyupm_tm1637)
TM1637_I2C_COMM2 = _pyupm_tm1637.TM1637_I2C_COMM2

_pyupm_tm1637.TM1637_I2C_COMM3_swigconstant(_pyupm_tm1637)
TM1637_I2C_COMM3 = _pyupm_tm1637.TM1637_I2C_COMM3

_pyupm_tm1637.PULSE_LENGTH_swigconstant(_pyupm_tm1637)
PULSE_LENGTH = _pyupm_tm1637.PULSE_LENGTH

_pyupm_tm1637.HIGH_swigconstant(_pyupm_tm1637)
HIGH = _pyupm_tm1637.HIGH

_pyupm_tm1637.LOW_swigconstant(_pyupm_tm1637)
LOW = _pyupm_tm1637.LOW
class TM1637(_object):
    """Proxy of C++ upm::TM1637 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TM1637, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TM1637, name)
    __repr__ = _swig_repr

    def __init__(self, di, dcki):
        """
        __init__(upm::TM1637 self, uint8_t di, uint8_t dcki) -> TM1637

        Parameters:
            di: uint8_t
            dcki: uint8_t

        """
        this = _pyupm_tm1637.new_TM1637(di, dcki)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_tm1637.delete_TM1637
    __del__ = lambda self: None

    def setBrightness(self, level):
        """
        setBrightness(TM1637 self, uint8_t level) -> mraa_result_t

        Parameters:
            level: uint8_t

        """
        return _pyupm_tm1637.TM1637_setBrightness(self, level)


    def setSegments(self, segments, length=4, pos=0):
        """
        setSegments(TM1637 self, uint8_t const [] segments, uint8_t length=4, uint8_t pos=0) -> mraa_result_t

        Parameters:
            segments: uint8_t const []
            length: uint8_t
            pos: uint8_t

        setSegments(TM1637 self, uint8_t const [] segments, uint8_t length=4) -> mraa_result_t

        Parameters:
            segments: uint8_t const []
            length: uint8_t

        setSegments(TM1637 self, uint8_t const [] segments) -> mraa_result_t

        Parameters:
            segments: uint8_t const []

        """
        return _pyupm_tm1637.TM1637_setSegments(self, segments, length, pos)


    def write(self, msg):
        """
        write(TM1637 self, std::string msg) -> mraa_result_t

        Parameters:
            msg: std::string

        """
        return _pyupm_tm1637.TM1637_write(self, msg)


    def name(self):
        """
        name(TM1637 self) -> std::string

        Parameters:
            self: upm::TM1637 *

        """
        return _pyupm_tm1637.TM1637_name(self)

TM1637_swigregister = _pyupm_tm1637.TM1637_swigregister
TM1637_swigregister(TM1637)

# This file is compatible with both classic and new-style classes.


