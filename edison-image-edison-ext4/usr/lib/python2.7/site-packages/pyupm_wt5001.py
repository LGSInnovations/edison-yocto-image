# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_wt5001', [dirname(__file__)])
        except ImportError:
            import _pyupm_wt5001
            return _pyupm_wt5001
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_wt5001', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_wt5001 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_wt5001
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class WT5001(_object):
    """Proxy of C++ upm::WT5001 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WT5001, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WT5001, name)
    __repr__ = _swig_repr
    NONE = _pyupm_wt5001.WT5001_NONE
    PLAY_SD = _pyupm_wt5001.WT5001_PLAY_SD
    PLAY_SPI = _pyupm_wt5001.WT5001_PLAY_SPI
    PLAY_UDISK = _pyupm_wt5001.WT5001_PLAY_UDISK
    PAUSE = _pyupm_wt5001.WT5001_PAUSE
    STOP = _pyupm_wt5001.WT5001_STOP
    NEXT = _pyupm_wt5001.WT5001_NEXT
    PREVIOUS = _pyupm_wt5001.WT5001_PREVIOUS
    SET_VOLUME = _pyupm_wt5001.WT5001_SET_VOLUME
    QUEUE = _pyupm_wt5001.WT5001_QUEUE
    PLAY_MODE = _pyupm_wt5001.WT5001_PLAY_MODE
    COPY_SD2FLASH = _pyupm_wt5001.WT5001_COPY_SD2FLASH
    COPY_UDISK2FLASH = _pyupm_wt5001.WT5001_COPY_UDISK2FLASH
    INSERT_SONG = _pyupm_wt5001.WT5001_INSERT_SONG
    SET_DATE = _pyupm_wt5001.WT5001_SET_DATE
    SET_TIME = _pyupm_wt5001.WT5001_SET_TIME
    SET_ALARM = _pyupm_wt5001.WT5001_SET_ALARM
    SET_ALARM_DUR = _pyupm_wt5001.WT5001_SET_ALARM_DUR
    CLEAR_ALARM = _pyupm_wt5001.WT5001_CLEAR_ALARM
    CLEAR_ALARM_DUR = _pyupm_wt5001.WT5001_CLEAR_ALARM_DUR
    READ_VOLUME = _pyupm_wt5001.WT5001_READ_VOLUME
    READ_PLAY_STATE = _pyupm_wt5001.WT5001_READ_PLAY_STATE
    READ_SPI_NUMF = _pyupm_wt5001.WT5001_READ_SPI_NUMF
    READ_SD_NUMF = _pyupm_wt5001.WT5001_READ_SD_NUMF
    READ_UDISK_NUMF = _pyupm_wt5001.WT5001_READ_UDISK_NUMF
    READ_CUR_FNAME = _pyupm_wt5001.WT5001_READ_CUR_FNAME
    READ_CF_CHAR = _pyupm_wt5001.WT5001_READ_CF_CHAR
    READ_DATE = _pyupm_wt5001.WT5001_READ_DATE
    READ_TIME = _pyupm_wt5001.WT5001_READ_TIME
    NORMAL = _pyupm_wt5001.WT5001_NORMAL
    SINGLE_REPEAT = _pyupm_wt5001.WT5001_SINGLE_REPEAT
    ALL_REPEAT = _pyupm_wt5001.WT5001_ALL_REPEAT
    RANDOM = _pyupm_wt5001.WT5001_RANDOM
    SD = _pyupm_wt5001.WT5001_SD
    SPI = _pyupm_wt5001.WT5001_SPI
    UDISK = _pyupm_wt5001.WT5001_UDISK

    def __init__(self, uart):
        """
        __init__(upm::WT5001 self, int uart) -> WT5001

        Parameters:
            uart: int

        """
        this = _pyupm_wt5001.new_WT5001(uart)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyupm_wt5001.delete_WT5001
    __del__ = lambda self: None

    def dataAvailable(self, millis):
        """
        dataAvailable(WT5001 self, unsigned int millis) -> bool

        Parameters:
            millis: unsigned int

        """
        return _pyupm_wt5001.WT5001_dataAvailable(self, millis)


    def readData(self, buffer, len):
        """
        readData(WT5001 self, char * buffer, size_t len) -> int

        Parameters:
            buffer: char *
            len: size_t

        """
        return _pyupm_wt5001.WT5001_readData(self, buffer, len)


    def writeData(self, buffer, len):
        """
        writeData(WT5001 self, char * buffer, size_t len) -> int

        Parameters:
            buffer: char *
            len: size_t

        """
        return _pyupm_wt5001.WT5001_writeData(self, buffer, len)


    def setupTty(self, *args):
        """
        setupTty(WT5001 self, speed_t baud) -> bool

        Parameters:
            baud: speed_t

        setupTty(WT5001 self) -> bool

        Parameters:
            self: upm::WT5001 *

        """
        return _pyupm_wt5001.WT5001_setupTty(self, *args)


    def checkResponse(self, opcode):
        """
        checkResponse(WT5001 self, upm::WT5001::WT5001_OPCODE_T opcode) -> bool

        Parameters:
            opcode: enum upm::WT5001::WT5001_OPCODE_T

        """
        return _pyupm_wt5001.WT5001_checkResponse(self, opcode)


    def play(self, psrc, index):
        """
        play(WT5001 self, upm::WT5001::WT5001_PLAYSOURCE_T psrc, uint16_t index) -> bool

        Parameters:
            psrc: enum upm::WT5001::WT5001_PLAYSOURCE_T
            index: uint16_t

        """
        return _pyupm_wt5001.WT5001_play(self, psrc, index)


    def stop(self):
        """
        stop(WT5001 self) -> bool

        Parameters:
            self: upm::WT5001 *

        """
        return _pyupm_wt5001.WT5001_stop(self)


    def pause(self):
        """
        pause(WT5001 self) -> bool

        Parameters:
            self: upm::WT5001 *

        """
        return _pyupm_wt5001.WT5001_pause(self)


    def next(self):
        """
        next(WT5001 self) -> bool

        Parameters:
            self: upm::WT5001 *

        """
        return _pyupm_wt5001.WT5001_next(self)


    def previous(self):
        """
        previous(WT5001 self) -> bool

        Parameters:
            self: upm::WT5001 *

        """
        return _pyupm_wt5001.WT5001_previous(self)


    def setVolume(self, vol):
        """
        setVolume(WT5001 self, uint8_t vol) -> bool

        Parameters:
            vol: uint8_t

        """
        return _pyupm_wt5001.WT5001_setVolume(self, vol)


    def queue(self, index):
        """
        queue(WT5001 self, uint16_t index) -> bool

        Parameters:
            index: uint16_t

        """
        return _pyupm_wt5001.WT5001_queue(self, index)


    def setPlayMode(self, pm):
        """
        setPlayMode(WT5001 self, upm::WT5001::WT5001_PLAYMODE_T pm) -> bool

        Parameters:
            pm: enum upm::WT5001::WT5001_PLAYMODE_T

        """
        return _pyupm_wt5001.WT5001_setPlayMode(self, pm)


    def insert(self, index):
        """
        insert(WT5001 self, uint16_t index) -> bool

        Parameters:
            index: uint16_t

        """
        return _pyupm_wt5001.WT5001_insert(self, index)


    def setDate(self, year, month, day):
        """
        setDate(WT5001 self, uint16_t year, uint8_t month, uint8_t day) -> bool

        Parameters:
            year: uint16_t
            month: uint8_t
            day: uint8_t

        """
        return _pyupm_wt5001.WT5001_setDate(self, year, month, day)


    def setTime(self, hour, minute, second):
        """
        setTime(WT5001 self, uint8_t hour, uint8_t minute, uint8_t second) -> bool

        Parameters:
            hour: uint8_t
            minute: uint8_t
            second: uint8_t

        """
        return _pyupm_wt5001.WT5001_setTime(self, hour, minute, second)


    def setAlarm(self, hour, minute, second):
        """
        setAlarm(WT5001 self, uint8_t hour, uint8_t minute, uint8_t second) -> bool

        Parameters:
            hour: uint8_t
            minute: uint8_t
            second: uint8_t

        """
        return _pyupm_wt5001.WT5001_setAlarm(self, hour, minute, second)


    def clearAlarm(self):
        """
        clearAlarm(WT5001 self) -> bool

        Parameters:
            self: upm::WT5001 *

        """
        return _pyupm_wt5001.WT5001_clearAlarm(self)


    def getVolume(self, vol):
        """
        getVolume(WT5001 self, uint8_t * vol) -> bool

        Parameters:
            vol: uint8_t *

        """
        return _pyupm_wt5001.WT5001_getVolume(self, vol)


    def getPlayState(self, ps):
        """
        getPlayState(WT5001 self, uint8_t * ps) -> bool

        Parameters:
            ps: uint8_t *

        """
        return _pyupm_wt5001.WT5001_getPlayState(self, ps)


    def getNumFiles(self, psrc, numf):
        """
        getNumFiles(WT5001 self, upm::WT5001::WT5001_PLAYSOURCE_T psrc, uint16_t * numf) -> bool

        Parameters:
            psrc: enum upm::WT5001::WT5001_PLAYSOURCE_T
            numf: uint16_t *

        """
        return _pyupm_wt5001.WT5001_getNumFiles(self, psrc, numf)


    def getCurrentFile(self, curf):
        """
        getCurrentFile(WT5001 self, uint16_t * curf) -> bool

        Parameters:
            curf: uint16_t *

        """
        return _pyupm_wt5001.WT5001_getCurrentFile(self, curf)


    def getDate(self, year, month, day):
        """
        getDate(WT5001 self, uint16_t * year, uint8_t * month, uint8_t * day) -> bool

        Parameters:
            year: uint16_t *
            month: uint8_t *
            day: uint8_t *

        """
        return _pyupm_wt5001.WT5001_getDate(self, year, month, day)


    def getTime(self, hour, minute, second):
        """
        getTime(WT5001 self, uint8_t * hour, uint8_t * minute, uint8_t * second) -> bool

        Parameters:
            hour: uint8_t *
            minute: uint8_t *
            second: uint8_t *

        """
        return _pyupm_wt5001.WT5001_getTime(self, hour, minute, second)

WT5001_swigregister = _pyupm_wt5001.WT5001_swigregister
WT5001_swigregister(WT5001)
cvar = _pyupm_wt5001.cvar
WT5001_DEFAULT_UART = cvar.WT5001_DEFAULT_UART
WT5001_MAX_VOLUME = cvar.WT5001_MAX_VOLUME
WT5001_START = cvar.WT5001_START
WT5001_END = cvar.WT5001_END

# This file is compatible with both classic and new-style classes.


